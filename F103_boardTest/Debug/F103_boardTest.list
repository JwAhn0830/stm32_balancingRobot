
F103_boardTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800a9e8  0800a9e8  0000b9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adf0  0800adf0  0000c1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adf0  0800adf0  0000bdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adf8  0800adf8  0000c1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adf8  0800adf8  0000bdf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adfc  0800adfc  0000bdfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ae00  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  200001f0  0800aff0  0000c1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  0800aff0  0000c97c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f04  00000000  00000000  0000c219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036a1  00000000  00000000  0002211d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000257c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd0  00000000  00000000  00026c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b45f  00000000  00000000  00027be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aa8b  00000000  00000000  0004303f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000977b8  00000000  00000000  0005daca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006878  00000000  00000000  000f52c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fbb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a9cc 	.word	0x0800a9cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800a9cc 	.word	0x0800a9cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_ADC2_Init+0x74>)
 800112e:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <MX_ADC2_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001132:	4b17      	ldr	r3, [pc, #92]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <MX_ADC2_Init+0x74>)
 800113a:	2201      	movs	r2, #1
 800113c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001146:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800114a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800114c:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <MX_ADC2_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001152:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <MX_ADC2_Init+0x74>)
 8001154:	2201      	movs	r2, #1
 8001156:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001158:	480d      	ldr	r0, [pc, #52]	@ (8001190 <MX_ADC2_Init+0x74>)
 800115a:	f001 fcad 	bl	8002ab8 <HAL_ADC_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001164:	f000 fcc5 	bl	8001af2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	2301      	movs	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_ADC2_Init+0x74>)
 800117a:	f001 fd75 	bl	8002c68 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001184:	f000 fcb5 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000020c 	.word	0x2000020c
 8001194:	40012800 	.word	0x40012800

08001198 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC2)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <HAL_ADC_MspInit+0x6c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d121      	bne.n	80011fc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* ADC2 clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80011b8:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a12      	ldr	r2, [pc, #72]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b10      	ldr	r3, [pc, #64]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_ADC_MspInit+0x70>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA1     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011e8:	2302      	movs	r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ec:	2303      	movs	r3, #3
 80011ee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_ADC_MspInit+0x74>)
 80011f8:	f002 f992 	bl	8003520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40012800 	.word	0x40012800
 8001208:	40021000 	.word	0x40021000
 800120c:	40010800 	.word	0x40010800

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <MX_DMA_Init+0x48>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <MX_DMA_Init+0x48>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6153      	str	r3, [r2, #20]
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <MX_DMA_Init+0x48>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	200c      	movs	r0, #12
 8001234:	f001 ff29 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001238:	200c      	movs	r0, #12
 800123a:	f001 ff42 	bl	80030c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2011      	movs	r0, #17
 8001244:	f001 ff21 	bl	800308a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001248:	2011      	movs	r0, #17
 800124a:	f001 ff3a 	bl	80030c2 <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a33      	ldr	r2, [pc, #204]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_GPIO_Init+0xe8>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001288:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <MX_GPIO_Init+0xe8>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <MX_GPIO_Init+0xe8>)
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_GPIO_Init+0xe8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_GPIO_Init+0xe8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	481c      	ldr	r0, [pc, #112]	@ (8001348 <MX_GPIO_Init+0xec>)
 80012d6:	f002 faa7 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80012e0:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_GPIO_Init+0xf0>)
 80012e2:	f002 faa1 	bl	8003828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	4814      	ldr	r0, [pc, #80]	@ (800134c <MX_GPIO_Init+0xf0>)
 80012fc:	f002 f910 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001300:	2320      	movs	r3, #32
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	4619      	mov	r1, r3
 8001316:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_GPIO_Init+0xec>)
 8001318:	f002 f902 	bl	8003520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800131c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2302      	movs	r3, #2
 800132c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 0310 	add.w	r3, r7, #16
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_GPIO_Init+0xf0>)
 8001336:	f002 f8f3 	bl	8003520 <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	40011000 	.word	0x40011000

08001350 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001356:	4a13      	ldr	r2, [pc, #76]	@ (80013a4 <MX_I2C1_Init+0x54>)
 8001358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800135c:	4a12      	ldr	r2, [pc, #72]	@ (80013a8 <MX_I2C1_Init+0x58>)
 800135e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800136e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001380:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001382:	2200      	movs	r2, #0
 8001384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_I2C1_Init+0x50>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138c:	4804      	ldr	r0, [pc, #16]	@ (80013a0 <MX_I2C1_Init+0x50>)
 800138e:	f002 fa63 	bl	8003858 <HAL_I2C_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 fbab 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000023c 	.word	0x2000023c
 80013a4:	40005400 	.word	0x40005400
 80013a8:	000186a0 	.word	0x000186a0

080013ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_I2C_MspInit+0x90>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d132      	bne.n	8001432 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 80013d2:	f043 0308 	orr.w	r3, r3, #8
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ea:	2312      	movs	r3, #18
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	4812      	ldr	r0, [pc, #72]	@ (8001444 <HAL_I2C_MspInit+0x98>)
 80013fa:	f002 f891 	bl	8003520 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <HAL_I2C_MspInit+0x9c>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140e:	f043 0302 	orr.w	r3, r3, #2
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
 8001414:	4a0c      	ldr	r2, [pc, #48]	@ (8001448 <HAL_I2C_MspInit+0x9c>)
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a08      	ldr	r2, [pc, #32]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 8001420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001424:	61d3      	str	r3, [r2, #28]
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_I2C_MspInit+0x94>)
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	@ 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40005400 	.word	0x40005400
 8001440:	40021000 	.word	0x40021000
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40010000 	.word	0x40010000
 800144c:	00000000 	.word	0x00000000

08001450 <getAngle>:
	totalVoltage = voltage * 2.5;

	return totalVoltage;
}

float getAngle() {
 8001450:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001454:	af00      	add	r7, sp, #0
	readAccel_MPU6050(&hi2c1, &mpu6050);
 8001456:	4956      	ldr	r1, [pc, #344]	@ (80015b0 <getAngle+0x160>)
 8001458:	4856      	ldr	r0, [pc, #344]	@ (80015b4 <getAngle+0x164>)
 800145a:	f000 fc61 	bl	8001d20 <readAccel_MPU6050>
	readGyro_MPU6050(&hi2c1, &mpu6050);
 800145e:	4954      	ldr	r1, [pc, #336]	@ (80015b0 <getAngle+0x160>)
 8001460:	4854      	ldr	r0, [pc, #336]	@ (80015b4 <getAngle+0x164>)
 8001462:	f000 fcd3 	bl	8001e0c <readGyro_MPU6050>
	aceelAngle_X = atan((mpu6050.Ay)/(sqrt((pow(mpu6050.Ax, 2) + pow(mpu6050.Az, 2))))) * (180 / 3.14);
 8001466:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <getAngle+0x160>)
 8001468:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800146c:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <getAngle+0x160>)
 800146e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800147a:	f008 f9e3 	bl	8009844 <pow>
 800147e:	4680      	mov	r8, r0
 8001480:	4689      	mov	r9, r1
 8001482:	4b4b      	ldr	r3, [pc, #300]	@ (80015b0 <getAngle+0x160>)
 8001484:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001490:	f008 f9d8 	bl	8009844 <pow>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4640      	mov	r0, r8
 800149a:	4649      	mov	r1, r9
 800149c:	f7fe fe66 	bl	800016c <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f008 fa34 	bl	8009914 <sqrt>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7ff f93a 	bl	800072c <__aeabi_ddiv>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f008 fa4e 	bl	8009960 <atan>
 80014c4:	a332      	add	r3, pc, #200	@ (adr r3, 8001590 <getAngle+0x140>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f805 	bl	80004d8 <__aeabi_dmul>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fad7 	bl	8000a88 <__aeabi_d2f>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a36      	ldr	r2, [pc, #216]	@ (80015b8 <getAngle+0x168>)
 80014de:	6013      	str	r3, [r2, #0]
	gyroAngle_X = (mpu6050.Gx * 0.001);
 80014e0:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <getAngle+0x160>)
 80014e2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80014e6:	a32c      	add	r3, pc, #176	@ (adr r3, 8001598 <getAngle+0x148>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7fe fff4 	bl	80004d8 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fac6 	bl	8000a88 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4a2f      	ldr	r2, [pc, #188]	@ (80015bc <getAngle+0x16c>)
 8001500:	6013      	str	r3, [r2, #0]
	X_angle = (0.95 * (previousAngle + (gyroAngle_X * 0.001))) + (0.05 * aceelAngle_X);
 8001502:	4b2f      	ldr	r3, [pc, #188]	@ (80015c0 <getAngle+0x170>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe ff8e 	bl	8000428 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <getAngle+0x16c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff87 	bl	8000428 <__aeabi_f2d>
 800151a:	a31f      	add	r3, pc, #124	@ (adr r3, 8001598 <getAngle+0x148>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7fe ffda 	bl	80004d8 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7fe fe1e 	bl	800016c <__adddf3>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	a319      	add	r3, pc, #100	@ (adr r3, 80015a0 <getAngle+0x150>)
 800153a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153e:	f7fe ffcb 	bl	80004d8 <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4614      	mov	r4, r2
 8001548:	461d      	mov	r5, r3
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <getAngle+0x168>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe ff6a 	bl	8000428 <__aeabi_f2d>
 8001554:	a314      	add	r3, pc, #80	@ (adr r3, 80015a8 <getAngle+0x158>)
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f7fe ffbd 	bl	80004d8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7fe fe01 	bl	800016c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fa89 	bl	8000a88 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <getAngle+0x174>)
 800157a:	6013      	str	r3, [r2, #0]
	previousAngle = X_angle;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <getAngle+0x174>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0f      	ldr	r2, [pc, #60]	@ (80015c0 <getAngle+0x170>)
 8001582:	6013      	str	r3, [r2, #0]
	return X_angle;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <getAngle+0x174>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800158e:	bf00      	nop
 8001590:	61d59ae7 	.word	0x61d59ae7
 8001594:	404ca994 	.word	0x404ca994
 8001598:	d2f1a9fc 	.word	0xd2f1a9fc
 800159c:	3f50624d 	.word	0x3f50624d
 80015a0:	66666666 	.word	0x66666666
 80015a4:	3fee6666 	.word	0x3fee6666
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fa99999 	.word	0x3fa99999
 80015b0:	20000298 	.word	0x20000298
 80015b4:	2000023c 	.word	0x2000023c
 80015b8:	200002d8 	.word	0x200002d8
 80015bc:	200002dc 	.word	0x200002dc
 80015c0:	200002e4 	.word	0x200002e4
 80015c4:	200002e0 	.word	0x200002e0

080015c8 <go>:

void go() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	480a      	ldr	r0, [pc, #40]	@ (80015fc <go+0x34>)
 80015d2:	f002 f929 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	@ 0x80
 80015da:	4808      	ldr	r0, [pc, #32]	@ (80015fc <go+0x34>)
 80015dc:	f002 f924 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <go+0x34>)
 80015e8:	f002 f91e 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015f2:	4802      	ldr	r0, [pc, #8]	@ (80015fc <go+0x34>)
 80015f4:	f002 f918 	bl	8003828 <HAL_GPIO_WritePin>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40011000 	.word	0x40011000

08001600 <back>:

void back() {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2140      	movs	r1, #64	@ 0x40
 8001608:	480a      	ldr	r0, [pc, #40]	@ (8001634 <back+0x34>)
 800160a:	f002 f90d 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 800160e:	2201      	movs	r2, #1
 8001610:	2180      	movs	r1, #128	@ 0x80
 8001612:	4808      	ldr	r0, [pc, #32]	@ (8001634 <back+0x34>)
 8001614:	f002 f908 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001618:	2201      	movs	r2, #1
 800161a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161e:	4805      	ldr	r0, [pc, #20]	@ (8001634 <back+0x34>)
 8001620:	f002 f902 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800162a:	4802      	ldr	r0, [pc, #8]	@ (8001634 <back+0x34>)
 800162c:	f002 f8fc 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40011000 	.word	0x40011000

08001638 <stop>:

void stop() {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2140      	movs	r1, #64	@ 0x40
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <stop+0x34>)
 8001642:	f002 f8f1 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <stop+0x34>)
 800164c:	f002 f8ec 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001656:	4805      	ldr	r0, [pc, #20]	@ (800166c <stop+0x34>)
 8001658:	f002 f8e6 	bl	8003828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001662:	4802      	ldr	r0, [pc, #8]	@ (800166c <stop+0x34>)
 8001664:	f002 f8e0 	bl	8003828 <HAL_GPIO_WritePin>
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40011000 	.word	0x40011000

08001670 <pid>:

void pid() {
 8001670:	b5b0      	push	{r4, r5, r7, lr}
 8001672:	af00      	add	r7, sp, #0
	 error = angle - setPoint;
 8001674:	4b8c      	ldr	r3, [pc, #560]	@ (80018a8 <pid+0x238>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a8c      	ldr	r2, [pc, #560]	@ (80018ac <pid+0x23c>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fa56 	bl	8000b30 <__aeabi_fsub>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <pid+0x240>)
 800168a:	601a      	str	r2, [r3, #0]

	 p = kp * error;
 800168c:	4b89      	ldr	r3, [pc, #548]	@ (80018b4 <pid+0x244>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a87      	ldr	r2, [pc, #540]	@ (80018b0 <pid+0x240>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fb54 	bl	8000d44 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b85      	ldr	r3, [pc, #532]	@ (80018b8 <pid+0x248>)
 80016a2:	601a      	str	r2, [r3, #0]
	 i = i + (ki * error * 0.001);
 80016a4:	4b85      	ldr	r3, [pc, #532]	@ (80018bc <pid+0x24c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe febd 	bl	8000428 <__aeabi_f2d>
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	4b83      	ldr	r3, [pc, #524]	@ (80018c0 <pid+0x250>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a7e      	ldr	r2, [pc, #504]	@ (80018b0 <pid+0x240>)
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff fb41 	bl	8000d44 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feaf 	bl	8000428 <__aeabi_f2d>
 80016ca:	a375      	add	r3, pc, #468	@ (adr r3, 80018a0 <pid+0x230>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff02 	bl	80004d8 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7fe fd46 	bl	800016c <__adddf3>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9ce 	bl	8000a88 <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a73      	ldr	r2, [pc, #460]	@ (80018bc <pid+0x24c>)
 80016f0:	6013      	str	r3, [r2, #0]
	 d = kd * ((error - previousError) / 0.001);
 80016f2:	4b74      	ldr	r3, [pc, #464]	@ (80018c4 <pid+0x254>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7fe fe96 	bl	8000428 <__aeabi_f2d>
 80016fc:	4604      	mov	r4, r0
 80016fe:	460d      	mov	r5, r1
 8001700:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <pid+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a70      	ldr	r2, [pc, #448]	@ (80018c8 <pid+0x258>)
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fa10 	bl	8000b30 <__aeabi_fsub>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe fe88 	bl	8000428 <__aeabi_f2d>
 8001718:	a361      	add	r3, pc, #388	@ (adr r3, 80018a0 <pid+0x230>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7ff f805 	bl	800072c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe fed5 	bl	80004d8 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff f9a7 	bl	8000a88 <__aeabi_d2f>
 800173a:	4603      	mov	r3, r0
 800173c:	4a63      	ldr	r2, [pc, #396]	@ (80018cc <pid+0x25c>)
 800173e:	6013      	str	r3, [r2, #0]
	 previousError = error;
 8001740:	4b5b      	ldr	r3, [pc, #364]	@ (80018b0 <pid+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a60      	ldr	r2, [pc, #384]	@ (80018c8 <pid+0x258>)
 8001746:	6013      	str	r3, [r2, #0]
	 pidOutput = p + i + d;
 8001748:	4b5b      	ldr	r3, [pc, #364]	@ (80018b8 <pid+0x248>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a5b      	ldr	r2, [pc, #364]	@ (80018bc <pid+0x24c>)
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff f9ee 	bl	8000b34 <__addsf3>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b5b      	ldr	r3, [pc, #364]	@ (80018cc <pid+0x25c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f7ff f9e6 	bl	8000b34 <__addsf3>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fcb0 	bl	80010d0 <__aeabi_f2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	4a57      	ldr	r2, [pc, #348]	@ (80018d0 <pid+0x260>)
 8001774:	6013      	str	r3, [r2, #0]

	 if (pidOutput > 0)
 8001776:	4b56      	ldr	r3, [pc, #344]	@ (80018d0 <pid+0x260>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	dd13      	ble.n	80017a6 <pid+0x136>
		 pidOutput += deadzone;
 800177e:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <pid+0x260>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fa8a 	bl	8000c9c <__aeabi_i2f>
 8001788:	4602      	mov	r2, r0
 800178a:	4b52      	ldr	r3, [pc, #328]	@ (80018d4 <pid+0x264>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4610      	mov	r0, r2
 8001792:	f7ff f9cf 	bl	8000b34 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fc99 	bl	80010d0 <__aeabi_f2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <pid+0x260>)
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	e016      	b.n	80017d4 <pid+0x164>
	 else if (pidOutput < 0)
 80017a6:	4b4a      	ldr	r3, [pc, #296]	@ (80018d0 <pid+0x260>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	da12      	bge.n	80017d4 <pid+0x164>
		 pidOutput -= deadzone;
 80017ae:	4b48      	ldr	r3, [pc, #288]	@ (80018d0 <pid+0x260>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa72 	bl	8000c9c <__aeabi_i2f>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b46      	ldr	r3, [pc, #280]	@ (80018d4 <pid+0x264>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4619      	mov	r1, r3
 80017c0:	4610      	mov	r0, r2
 80017c2:	f7ff f9b5 	bl	8000b30 <__aeabi_fsub>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc81 	bl	80010d0 <__aeabi_f2iz>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a3f      	ldr	r2, [pc, #252]	@ (80018d0 <pid+0x260>)
 80017d2:	6013      	str	r3, [r2, #0]

	 if (pidOutput > MAX_SPEED)
 80017d4:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <pid+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fa5f 	bl	8000c9c <__aeabi_i2f>
 80017de:	4602      	mov	r2, r0
 80017e0:	4b3d      	ldr	r3, [pc, #244]	@ (80018d8 <pid+0x268>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4610      	mov	r0, r2
 80017e8:	f7ff fc68 	bl	80010bc <__aeabi_fcmpgt>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d008      	beq.n	8001804 <pid+0x194>
		 pidOutput = MAX_SPEED;
 80017f2:	4b39      	ldr	r3, [pc, #228]	@ (80018d8 <pid+0x268>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc6a 	bl	80010d0 <__aeabi_f2iz>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <pid+0x260>)
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	e01a      	b.n	800183a <pid+0x1ca>
	 else if (pidOutput < -MAX_SPEED)
 8001804:	4b32      	ldr	r3, [pc, #200]	@ (80018d0 <pid+0x260>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fa47 	bl	8000c9c <__aeabi_i2f>
 800180e:	4602      	mov	r2, r0
 8001810:	4b31      	ldr	r3, [pc, #196]	@ (80018d8 <pid+0x268>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fc30 	bl	8001080 <__aeabi_fcmplt>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d009      	beq.n	800183a <pid+0x1ca>
		 pidOutput = -MAX_SPEED;
 8001826:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <pid+0x268>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fc4e 	bl	80010d0 <__aeabi_f2iz>
 8001834:	4603      	mov	r3, r0
 8001836:	4a26      	ldr	r2, [pc, #152]	@ (80018d0 <pid+0x260>)
 8001838:	6013      	str	r3, [r2, #0]
//	 if (pidOutput > 0 && pidOutput < MIN_SPEED)
//		 pidOutput = MIN_SPEED;
//	 else if  (pidOutput < 0 && pidOutput > -MIN_SPEED)
//		 pidOutput = -MIN_SPEED;

	 if(error > 0)
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <pid+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc3a 	bl	80010bc <__aeabi_fcmpgt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <pid+0x1e4>
		 go();
 800184e:	f7ff febb 	bl	80015c8 <go>
 8001852:	e00e      	b.n	8001872 <pid+0x202>
	 else if(error < 0)
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <pid+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 0100 	mov.w	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc0f 	bl	8001080 <__aeabi_fcmplt>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <pid+0x1fe>
		 back();
 8001868:	f7ff feca 	bl	8001600 <back>
 800186c:	e001      	b.n	8001872 <pid+0x202>
	 else //(error == 0)
		 stop();
 800186e:	f7ff fee3 	bl	8001638 <stop>

	 if (pidOutput < 0)
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <pid+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	da04      	bge.n	8001884 <pid+0x214>
	     pidOutput *= -1;
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <pid+0x260>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	425b      	negs	r3, r3
 8001880:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <pid+0x260>)
 8001882:	6013      	str	r3, [r2, #0]

	htim3.Instance->CCR1 = pidOutput;
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <pid+0x260>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <pid+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
	htim3.Instance->CCR2 = pidOutput;
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <pid+0x260>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <pid+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001898:	bf00      	nop
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80018a4:	3f50624d 	.word	0x3f50624d
 80018a8:	200002e8 	.word	0x200002e8
 80018ac:	200002ec 	.word	0x200002ec
 80018b0:	20000304 	.word	0x20000304
 80018b4:	20000008 	.word	0x20000008
 80018b8:	200002f0 	.word	0x200002f0
 80018bc:	200002f4 	.word	0x200002f4
 80018c0:	200002fc 	.word	0x200002fc
 80018c4:	20000300 	.word	0x20000300
 80018c8:	20000308 	.word	0x20000308
 80018cc:	200002f8 	.word	0x200002f8
 80018d0:	2000030c 	.word	0x2000030c
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000000 	.word	0x20000000
 80018dc:	200003ac 	.word	0x200003ac

080018e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	// 1ms (1kHz)
	if (htim->Instance == TIM2) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018f0:	d106      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x20>
		angle = getAngle();
 80018f2:	f7ff fdad 	bl	8001450 <getAngle>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018fa:	6013      	str	r3, [r2, #0]
		pid();
 80018fc:	f7ff feb8 	bl	8001670 <pid>
//		bat = getVoltage();
//		sprintf(message, "{\"bat\": %.2f, \"angle\": %.2f, \"setPoint\": %.2f}\r\n", bat, angle, setPoint);
//		sendUart(message);
//		test_count_tim++;
//	}
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200002e8 	.word	0x200002e8

0800190c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f001 f84b 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f88f 	bl	8001a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f7ff fc9f 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 800191e:	f7ff fc77 	bl	8001210 <MX_DMA_Init>
  MX_ADC2_Init();
 8001922:	f7ff fbfb 	bl	800111c <MX_ADC2_Init>
  MX_USB_PCD_Init();
 8001926:	f000 ffdb 	bl	80028e0 <MX_USB_PCD_Init>
  MX_I2C1_Init();
 800192a:	f7ff fd11 	bl	8001350 <MX_I2C1_Init>
  MX_TIM2_Init();
 800192e:	f000 fc97 	bl	8002260 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001932:	f000 fd63 	bl	80023fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8001936:	f000 fcdf 	bl	80022f8 <MX_TIM3_Init>
  MX_TIM1_Init();
 800193a:	f000 fc3f 	bl	80021bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800193e:	f000 fe8f 	bl	8002660 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001942:	f000 feb7 	bl	80026b4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //ENA
 8001946:	2100      	movs	r1, #0
 8001948:	4831      	ldr	r0, [pc, #196]	@ (8001a10 <main+0x104>)
 800194a:	f003 fea1 	bl	8005690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //ENB
 800194e:	2104      	movs	r1, #4
 8001950:	482f      	ldr	r0, [pc, #188]	@ (8001a10 <main+0x104>)
 8001952:	f003 fe9d 	bl	8005690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); //Buzzer
 8001956:	2100      	movs	r1, #0
 8001958:	482e      	ldr	r0, [pc, #184]	@ (8001a14 <main+0x108>)
 800195a:	f003 fe99 	bl	8005690 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2120      	movs	r1, #32
 8001962:	482d      	ldr	r0, [pc, #180]	@ (8001a18 <main+0x10c>)
 8001964:	f001 ff60 	bl	8003828 <HAL_GPIO_WritePin>
  config_MPU6050_DEFAULT(&config);
 8001968:	482c      	ldr	r0, [pc, #176]	@ (8001a1c <main+0x110>)
 800196a:	f000 f8c8 	bl	8001afe <config_MPU6050_DEFAULT>

  TIM4->PSC = 2000;
 800196e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a20 <main+0x114>)
 8001970:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001976:	2064      	movs	r0, #100	@ 0x64
 8001978:	f001 f87a 	bl	8002a70 <HAL_Delay>
  TIM4->PSC = 1500;
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <main+0x114>)
 800197e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001984:	2064      	movs	r0, #100	@ 0x64
 8001986:	f001 f873 	bl	8002a70 <HAL_Delay>
  TIM4->PSC = 1000;
 800198a:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <main+0x114>)
 800198c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001990:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(100);
 8001992:	2064      	movs	r0, #100	@ 0x64
 8001994:	f001 f86c 	bl	8002a70 <HAL_Delay>

  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1); //Buzzer
 8001998:	2100      	movs	r1, #0
 800199a:	481e      	ldr	r0, [pc, #120]	@ (8001a14 <main+0x108>)
 800199c:	f003 ff1a 	bl	80057d4 <HAL_TIM_PWM_Stop>

  while(1){
	  if (init_MPU6050(&hi2c1, &config) == MPU6050_OK){
 80019a0:	491e      	ldr	r1, [pc, #120]	@ (8001a1c <main+0x110>)
 80019a2:	4820      	ldr	r0, [pc, #128]	@ (8001a24 <main+0x118>)
 80019a4:	f000 f8c0 	bl	8001b28 <init_MPU6050>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f8      	bne.n	80019a0 <main+0x94>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2120      	movs	r1, #32
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <main+0x10c>)
 80019b4:	f001 ff38 	bl	8003828 <HAL_GPIO_WritePin>
		  break;
 80019b8:	bf00      	nop
	  }
  }

  for (int i = 0; i< 100; i ++) {
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	e00f      	b.n	80019e0 <main+0xd4>
	  setPoint += getAngle();
 80019c0:	f7ff fd46 	bl	8001450 <getAngle>
 80019c4:	4602      	mov	r2, r0
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <main+0x11c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4619      	mov	r1, r3
 80019cc:	4610      	mov	r0, r2
 80019ce:	f7ff f8b1 	bl	8000b34 <__addsf3>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <main+0x11c>)
 80019d8:	601a      	str	r2, [r3, #0]
  for (int i = 0; i< 100; i ++) {
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b63      	cmp	r3, #99	@ 0x63
 80019e4:	ddec      	ble.n	80019c0 <main+0xb4>
  }
  setPoint = setPoint / 100;
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <main+0x11c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4910      	ldr	r1, [pc, #64]	@ (8001a2c <main+0x120>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fa5d 	bl	8000eac <__aeabi_fdiv>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <main+0x11c>)
 80019f8:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2); //timer interrupt 1ms
 80019fa:	480d      	ldr	r0, [pc, #52]	@ (8001a30 <main+0x124>)
 80019fc:	f003 fd9e 	bl	800553c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1); //timer interrupt 1s
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <main+0x128>)
 8001a02:	f003 fd9b 	bl	800553c <HAL_TIM_Base_Start_IT>
  go();
 8001a06:	f7ff fddf 	bl	80015c8 <go>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <main+0xfe>
 8001a0e:	bf00      	nop
 8001a10:	200003ac 	.word	0x200003ac
 8001a14:	200003f4 	.word	0x200003f4
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	20000290 	.word	0x20000290
 8001a20:	40000800 	.word	0x40000800
 8001a24:	2000023c 	.word	0x2000023c
 8001a28:	200002ec 	.word	0x200002ec
 8001a2c:	42c80000 	.word	0x42c80000
 8001a30:	20000364 	.word	0x20000364
 8001a34:	2000031c 	.word	0x2000031c

08001a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	@ 0x50
 8001a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a42:	2228      	movs	r2, #40	@ 0x28
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f005 ffd3 	bl	80079f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a76:	2301      	movs	r3, #1
 8001a78:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a84:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f83e 	bl	8004b10 <HAL_RCC_OscConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a9a:	f000 f82a 	bl	8001af2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2102      	movs	r1, #2
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 faaa 	bl	8005014 <HAL_RCC_ClockConfig>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ac6:	f000 f814 	bl	8001af2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001aca:	2312      	movs	r3, #18
 8001acc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ace:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ad2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4618      	mov	r0, r3
 8001adc:	f003 fc28 	bl	8005330 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001ae6:	f000 f804 	bl	8001af2 <Error_Handler>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3750      	adds	r7, #80	@ 0x50
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af6:	b672      	cpsid	i
}
 8001af8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afa:	bf00      	nop
 8001afc:	e7fd      	b.n	8001afa <Error_Handler+0x8>

08001afe <config_MPU6050_DEFAULT>:
 *	use Internal 8MHz clock
 *	250 Full Scale Range for Gyro
 *	2g Full Scale Range for Accel
 *	1000kHz
 */
void config_MPU6050_DEFAULT(MPU6050_config *config) {
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
	config->clockSource = 0x00;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
	config->accelScaleRange = 0x00;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	70da      	strb	r2, [r3, #3]
	config->gyroScaleRange = 0x00;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	709a      	strb	r2, [r3, #2]
	config->sampleRate = 0x07;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	705a      	strb	r2, [r3, #1]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <init_MPU6050>:

uint8_t init_MPU6050(I2C_HandleTypeDef *I2Cx, MPU6050_config *config){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	uint8_t check;
	uint8_t data;

	switch(config->accelScaleRange) {
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	78db      	ldrb	r3, [r3, #3]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d81e      	bhi.n	8001b78 <init_MPU6050+0x50>
 8001b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <init_MPU6050+0x18>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b5b 	.word	0x08001b5b
 8001b48:	08001b65 	.word	0x08001b65
 8001b4c:	08001b6f 	.word	0x08001b6f
	case 0:
		accelDivider = 16384;
 8001b50:	4b6d      	ldr	r3, [pc, #436]	@ (8001d08 <init_MPU6050+0x1e0>)
 8001b52:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001b56:	601a      	str	r2, [r3, #0]
		break;
 8001b58:	e010      	b.n	8001b7c <init_MPU6050+0x54>
	case 1:
		accelDivider = 8192;
 8001b5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001d08 <init_MPU6050+0x1e0>)
 8001b5c:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001b60:	601a      	str	r2, [r3, #0]
		break;
 8001b62:	e00b      	b.n	8001b7c <init_MPU6050+0x54>
	case 2:
		accelDivider = 4096;
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <init_MPU6050+0x1e0>)
 8001b66:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001b6a:	601a      	str	r2, [r3, #0]
		break;
 8001b6c:	e006      	b.n	8001b7c <init_MPU6050+0x54>
	case 3:
		accelDivider = 2048;
 8001b6e:	4b66      	ldr	r3, [pc, #408]	@ (8001d08 <init_MPU6050+0x1e0>)
 8001b70:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001b74:	601a      	str	r2, [r3, #0]
		break;
 8001b76:	e001      	b.n	8001b7c <init_MPU6050+0x54>
	default :
		return ACCEL_CONFIG_ERR;
 8001b78:	2305      	movs	r3, #5
 8001b7a:	e0c0      	b.n	8001cfe <init_MPU6050+0x1d6>
	}

	switch(config->gyroScaleRange) {
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d81b      	bhi.n	8001bbc <init_MPU6050+0x94>
 8001b84:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <init_MPU6050+0x64>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001ba5 	.word	0x08001ba5
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bb5 	.word	0x08001bb5
	case 0:
		gyroDivider = 131;
 8001b9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001d0c <init_MPU6050+0x1e4>)
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d10 <init_MPU6050+0x1e8>)
 8001ba0:	601a      	str	r2, [r3, #0]
		break;
 8001ba2:	e00d      	b.n	8001bc0 <init_MPU6050+0x98>
	case 1:
		gyroDivider = 65.5;
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <init_MPU6050+0x1e4>)
 8001ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d14 <init_MPU6050+0x1ec>)
 8001ba8:	601a      	str	r2, [r3, #0]
		break;
 8001baa:	e009      	b.n	8001bc0 <init_MPU6050+0x98>
	case 2:
		gyroDivider = 32.8;
 8001bac:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <init_MPU6050+0x1e4>)
 8001bae:	4a5a      	ldr	r2, [pc, #360]	@ (8001d18 <init_MPU6050+0x1f0>)
 8001bb0:	601a      	str	r2, [r3, #0]
		break;
 8001bb2:	e005      	b.n	8001bc0 <init_MPU6050+0x98>
	case 3:
		gyroDivider = 16.4;
 8001bb4:	4b55      	ldr	r3, [pc, #340]	@ (8001d0c <init_MPU6050+0x1e4>)
 8001bb6:	4a59      	ldr	r2, [pc, #356]	@ (8001d1c <init_MPU6050+0x1f4>)
 8001bb8:	601a      	str	r2, [r3, #0]
		break;
 8001bba:	e001      	b.n	8001bc0 <init_MPU6050+0x98>
	default :
		return GYRO_CONFIG_ERR;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e09e      	b.n	8001cfe <init_MPU6050+0x1d6>
	}


	//check WHO_AM_I reg
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 10);
 8001bc0:	230a      	movs	r3, #10
 8001bc2:	9302      	str	r3, [sp, #8]
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	f107 030f 	add.w	r3, r7, #15
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	2275      	movs	r2, #117	@ 0x75
 8001bd2:	21d0      	movs	r1, #208	@ 0xd0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f002 f87d 	bl	8003cd4 <HAL_I2C_Mem_Read>
	if (check != 104)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b68      	cmp	r3, #104	@ 0x68
 8001bde:	d001      	beq.n	8001be4 <init_MPU6050+0xbc>
		return WHO_AM_I_ERR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e08c      	b.n	8001cfe <init_MPU6050+0x1d6>

	//set PWR_MGMT reg
	data = config->clockSource;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 10);
 8001bea:	230a      	movs	r3, #10
 8001bec:	9302      	str	r3, [sp, #8]
 8001bee:	2301      	movs	r3, #1
 8001bf0:	9301      	str	r3, [sp, #4]
 8001bf2:	f107 030e 	add.w	r3, r7, #14
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	226b      	movs	r2, #107	@ 0x6b
 8001bfc:	21d0      	movs	r1, #208	@ 0xd0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f001 ff6e 	bl	8003ae0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &check, 1, 10);
 8001c04:	230a      	movs	r3, #10
 8001c06:	9302      	str	r3, [sp, #8]
 8001c08:	2301      	movs	r3, #1
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	f107 030f 	add.w	r3, r7, #15
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2301      	movs	r3, #1
 8001c14:	226b      	movs	r2, #107	@ 0x6b
 8001c16:	21d0      	movs	r1, #208	@ 0xd0
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f002 f85b 	bl	8003cd4 <HAL_I2C_Mem_Read>
	if (check != data)
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	7bbb      	ldrb	r3, [r7, #14]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d001      	beq.n	8001c2a <init_MPU6050+0x102>
		return PWR_MGMT_1_ERR;
 8001c26:	2302      	movs	r3, #2
 8001c28:	e069      	b.n	8001cfe <init_MPU6050+0x1d6>

	//set SMPRT_DIV_REG reg
	data = config->sampleRate;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	785b      	ldrb	r3, [r3, #1]
 8001c2e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPRT_DIV_REG, 1, &data, 1, 10);
 8001c30:	230a      	movs	r3, #10
 8001c32:	9302      	str	r3, [sp, #8]
 8001c34:	2301      	movs	r3, #1
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	f107 030e 	add.w	r3, r7, #14
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	2219      	movs	r2, #25
 8001c42:	21d0      	movs	r1, #208	@ 0xd0
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f001 ff4b 	bl	8003ae0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, SMPRT_DIV_REG, 1, &check, 1, 10);
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f107 030f 	add.w	r3, r7, #15
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2219      	movs	r2, #25
 8001c5c:	21d0      	movs	r1, #208	@ 0xd0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f002 f838 	bl	8003cd4 <HAL_I2C_Mem_Read>
	if (check != data)
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	7bbb      	ldrb	r3, [r7, #14]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <init_MPU6050+0x148>
		return SMPRT_DIV_ERR;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e046      	b.n	8001cfe <init_MPU6050+0x1d6>

	//set ACCEL_CONFIG reg
	data = config->accelScaleRange;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	78db      	ldrb	r3, [r3, #3]
 8001c74:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 10);
 8001c76:	230a      	movs	r3, #10
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	f107 030e 	add.w	r3, r7, #14
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2301      	movs	r3, #1
 8001c86:	221b      	movs	r2, #27
 8001c88:	21d0      	movs	r1, #208	@ 0xd0
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f001 ff28 	bl	8003ae0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &check, 1, 10);
 8001c90:	230a      	movs	r3, #10
 8001c92:	9302      	str	r3, [sp, #8]
 8001c94:	2301      	movs	r3, #1
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	f107 030f 	add.w	r3, r7, #15
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	221b      	movs	r2, #27
 8001ca2:	21d0      	movs	r1, #208	@ 0xd0
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f002 f815 	bl	8003cd4 <HAL_I2C_Mem_Read>
	if (check != data)
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d001      	beq.n	8001cb6 <init_MPU6050+0x18e>
		return GYRO_CONFIG_ERR;
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e023      	b.n	8001cfe <init_MPU6050+0x1d6>

	//set ACCEL_CONFIG reg
	data = config->gyroScaleRange;
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	789b      	ldrb	r3, [r3, #2]
 8001cba:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 10);
 8001cbc:	230a      	movs	r3, #10
 8001cbe:	9302      	str	r3, [sp, #8]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	f107 030e 	add.w	r3, r7, #14
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	221c      	movs	r2, #28
 8001cce:	21d0      	movs	r1, #208	@ 0xd0
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 ff05 	bl	8003ae0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &check, 1, 10);
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	2301      	movs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f107 030f 	add.w	r3, r7, #15
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	221c      	movs	r2, #28
 8001ce8:	21d0      	movs	r1, #208	@ 0xd0
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f001 fff2 	bl	8003cd4 <HAL_I2C_Mem_Read>
	if (check != data)
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	7bbb      	ldrb	r3, [r7, #14]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d001      	beq.n	8001cfc <init_MPU6050+0x1d4>
		return ACCEL_CONFIG_ERR;
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e000      	b.n	8001cfe <init_MPU6050+0x1d6>

	//return 0 if everything goes well
	return MPU6050_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000310 	.word	0x20000310
 8001d0c:	20000314 	.word	0x20000314
 8001d10:	43030000 	.word	0x43030000
 8001d14:	42830000 	.word	0x42830000
 8001d18:	42033333 	.word	0x42033333
 8001d1c:	41833333 	.word	0x41833333

08001d20 <readAccel_MPU6050>:

void readAccel_MPU6050(I2C_HandleTypeDef *I2Cx, MPU6050* data) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af04      	add	r7, sp, #16
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

	uint8_t RAW_data[6];

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, RAW_data, 6, 10);
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2306      	movs	r3, #6
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	223b      	movs	r2, #59	@ 0x3b
 8001d3c:	21d0      	movs	r1, #208	@ 0xd0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f001 ffc8 	bl	8003cd4 <HAL_I2C_Mem_Read>

    data->Accel_X_RAW = (int16_t)(RAW_data[0] << 8 | RAW_data[1]);
 8001d44:	7a3b      	ldrb	r3, [r7, #8]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	b21a      	sxth	r2, r3
 8001d4a:	7a7b      	ldrb	r3, [r7, #9]
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	801a      	strh	r2, [r3, #0]
    data->Accel_Y_RAW = (int16_t)(RAW_data[2] << 8 | RAW_data[3]);
 8001d56:	7abb      	ldrb	r3, [r7, #10]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
 8001d5e:	b21b      	sxth	r3, r3
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	805a      	strh	r2, [r3, #2]
    data->Accel_Z_RAW = (int16_t)(RAW_data[4] << 8 | RAW_data[5]);
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21a      	sxth	r2, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	809a      	strh	r2, [r3, #4]

    data->Ax = data->Accel_X_RAW / accelDivider;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe ff8b 	bl	8000c9c <__aeabi_i2f>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <readAccel_MPU6050+0xe8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7ff f88c 	bl	8000eac <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb46 	bl	8000428 <__aeabi_f2d>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	6839      	ldr	r1, [r7, #0]
 8001da2:	e9c1 2302 	strd	r2, r3, [r1, #8]
    data->Ay = data->Accel_Y_RAW / accelDivider;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff75 	bl	8000c9c <__aeabi_i2f>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <readAccel_MPU6050+0xe8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4610      	mov	r0, r2
 8001dbc:	f7ff f876 	bl	8000eac <__aeabi_fdiv>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fb30 	bl	8000428 <__aeabi_f2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	6839      	ldr	r1, [r7, #0]
 8001dce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    data->Az = data->Accel_Z_RAW / accelDivider;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ff5f 	bl	8000c9c <__aeabi_i2f>
 8001dde:	4602      	mov	r2, r0
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <readAccel_MPU6050+0xe8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7ff f860 	bl	8000eac <__aeabi_fdiv>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb1a 	bl	8000428 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	6839      	ldr	r1, [r7, #0]
 8001dfa:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000310 	.word	0x20000310

08001e0c <readGyro_MPU6050>:
void readGyro_MPU6050(I2C_HandleTypeDef *I2Cx, MPU6050* data) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	uint8_t RAW_data[6];

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, RAW_data, 6, 10);
 8001e16:	230a      	movs	r3, #10
 8001e18:	9302      	str	r3, [sp, #8]
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	2301      	movs	r3, #1
 8001e26:	2243      	movs	r2, #67	@ 0x43
 8001e28:	21d0      	movs	r1, #208	@ 0xd0
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f001 ff52 	bl	8003cd4 <HAL_I2C_Mem_Read>

	data->Gyro_X_RAW = (int16_t)(RAW_data[0] << 8 | RAW_data[1]);
 8001e30:	7a3b      	ldrb	r3, [r7, #8]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	b21a      	sxth	r2, r3
 8001e36:	7a7b      	ldrb	r3, [r7, #9]
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	b21a      	sxth	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	841a      	strh	r2, [r3, #32]
	data->Gyro_Y_RAW = (int16_t)(RAW_data[2] << 8 | RAW_data[3]);
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	7afb      	ldrb	r3, [r7, #11]
 8001e4a:	b21b      	sxth	r3, r3
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b21a      	sxth	r2, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	845a      	strh	r2, [r3, #34]	@ 0x22
	data->Gyro_Z_RAW = (int16_t)(RAW_data[4] << 8 | RAW_data[5]);
 8001e54:	7b3b      	ldrb	r3, [r7, #12]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	7b7b      	ldrb	r3, [r7, #13]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	849a      	strh	r2, [r3, #36]	@ 0x24

    data->Gx = data->Gyro_X_RAW / gyroDivider;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe ff15 	bl	8000c9c <__aeabi_i2f>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <readGyro_MPU6050+0xe8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7ff f816 	bl	8000eac <__aeabi_fdiv>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fad0 	bl	8000428 <__aeabi_f2d>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    data->Gy = data->Gyro_Y_RAW / gyroDivider;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe feff 	bl	8000c9c <__aeabi_i2f>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	4b14      	ldr	r3, [pc, #80]	@ (8001ef4 <readGyro_MPU6050+0xe8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7ff f800 	bl	8000eac <__aeabi_fdiv>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe faba 	bl	8000428 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    data->Gz = data->Gyro_Z_RAW / gyroDivider;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe fee9 	bl	8000c9c <__aeabi_i2f>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	4b09      	ldr	r3, [pc, #36]	@ (8001ef4 <readGyro_MPU6050+0xe8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f7fe ffea 	bl	8000eac <__aeabi_fdiv>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe faa4 	bl	8000428 <__aeabi_f2d>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000314 	.word	0x20000314

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a14      	ldr	r2, [pc, #80]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_MspInit+0x60>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <HAL_MspInit+0x60>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40010000 	.word	0x40010000

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 fd44 	bl	8002a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DMA1_Channel2_IRQHandler+0x10>)
 8001fba:	f001 f9ab 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000510 	.word	0x20000510

08001fc8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <DMA1_Channel7_IRQHandler+0x10>)
 8001fce:	f001 f9a1 	bl	8003314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200004cc 	.word	0x200004cc

08001fdc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <TIM1_UP_IRQHandler+0x10>)
 8001fe2:	f003 fc5b 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000031c 	.word	0x2000031c

08001ff0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <TIM2_IRQHandler+0x10>)
 8001ff6:	f003 fc51 	bl	800589c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000364 	.word	0x20000364

08002004 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <USART2_IRQHandler+0x10>)
 800200a:	f004 fa55 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	2000043c 	.word	0x2000043c

08002018 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <USART3_IRQHandler+0x10>)
 800201e:	f004 fa4b 	bl	80064b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000484 	.word	0x20000484

0800202c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return 1;
 8002030:	2301      	movs	r3, #1
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <_kill>:

int _kill(int pid, int sig)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002044:	f005 fd28 	bl	8007a98 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	2216      	movs	r2, #22
 800204c:	601a      	str	r2, [r3, #0]
  return -1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_exit>:

void _exit (int status)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002062:	f04f 31ff 	mov.w	r1, #4294967295
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff ffe7 	bl	800203a <_kill>
  while (1) {}    /* Make sure we hang here */
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <_exit+0x12>

08002070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e00a      	b.n	8002098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002082:	f3af 8000 	nop.w
 8002086:	4601      	mov	r1, r0
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60ba      	str	r2, [r7, #8]
 800208e:	b2ca      	uxtb	r2, r1
 8002090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	dbf0      	blt.n	8002082 <_read+0x12>
  }

  return len;
 80020a0:	687b      	ldr	r3, [r7, #4]
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e009      	b.n	80020d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	60ba      	str	r2, [r7, #8]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	dbf1      	blt.n	80020bc <_write+0x12>
  }
  return len;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <_close>:

int _close(int file)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002108:	605a      	str	r2, [r3, #4]
  return 0;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <_isatty>:

int _isatty(int file)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800211e:	2301      	movs	r3, #1
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr

0800212a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f005 fc90 	bl	8007a98 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20005000 	.word	0x20005000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	20000318 	.word	0x20000318
 80021ac:	20000980 	.word	0x20000980

080021b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d0:	463b      	mov	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021da:	4a20      	ldr	r2, [pc, #128]	@ (800225c <MX_TIM1_Init+0xa0>)
 80021dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200 - 1;
 80021de:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021e0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80021e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000 - 1;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80021f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <MX_TIM1_Init+0x9c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <MX_TIM1_Init+0x9c>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002206:	4814      	ldr	r0, [pc, #80]	@ (8002258 <MX_TIM1_Init+0x9c>)
 8002208:	f003 f948 	bl	800549c <HAL_TIM_Base_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002212:	f7ff fc6e 	bl	8001af2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800221a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	4619      	mov	r1, r3
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_TIM1_Init+0x9c>)
 8002224:	f003 fcec 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800222e:	f7ff fc60 	bl	8001af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800223a:	463b      	mov	r3, r7
 800223c:	4619      	mov	r1, r3
 800223e:	4806      	ldr	r0, [pc, #24]	@ (8002258 <MX_TIM1_Init+0x9c>)
 8002240:	f004 f87a 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800224a:	f7ff fc52 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000031c 	.word	0x2000031c
 800225c:	40012c00 	.word	0x40012c00

08002260 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002266:	f107 0308 	add.w	r3, r7, #8
 800226a:	2200      	movs	r2, #0
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	605a      	str	r2, [r3, #4]
 8002270:	609a      	str	r2, [r3, #8]
 8002272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002274:	463b      	mov	r3, r7
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <MX_TIM2_Init+0x94>)
 800227e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200 - 1;
 8002284:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <MX_TIM2_Init+0x94>)
 8002286:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800228a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228c:	4b19      	ldr	r3, [pc, #100]	@ (80022f4 <MX_TIM2_Init+0x94>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 8002292:	4b18      	ldr	r3, [pc, #96]	@ (80022f4 <MX_TIM2_Init+0x94>)
 8002294:	2209      	movs	r2, #9
 8002296:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002298:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <MX_TIM2_Init+0x94>)
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <MX_TIM2_Init+0x94>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a4:	4813      	ldr	r0, [pc, #76]	@ (80022f4 <MX_TIM2_Init+0x94>)
 80022a6:	f003 f8f9 	bl	800549c <HAL_TIM_Base_Init>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022b0:	f7ff fc1f 	bl	8001af2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ba:	f107 0308 	add.w	r3, r7, #8
 80022be:	4619      	mov	r1, r3
 80022c0:	480c      	ldr	r0, [pc, #48]	@ (80022f4 <MX_TIM2_Init+0x94>)
 80022c2:	f003 fc9d 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022cc:	f7ff fc11 	bl	8001af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d4:	2300      	movs	r3, #0
 80022d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <MX_TIM2_Init+0x94>)
 80022de:	f004 f82b 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022e8:	f7ff fc03 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000364 	.word	0x20000364

080022f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08e      	sub	sp, #56	@ 0x38
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	f107 0320 	add.w	r3, r7, #32
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002328:	4b32      	ldr	r3, [pc, #200]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800232a:	4a33      	ldr	r2, [pc, #204]	@ (80023f8 <MX_TIM3_Init+0x100>)
 800232c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72- 1;
 800232e:	4b31      	ldr	r3, [pc, #196]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 8002330:	2247      	movs	r2, #71	@ 0x47
 8002332:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b2f      	ldr	r3, [pc, #188]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 800233a:	4b2e      	ldr	r3, [pc, #184]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800233c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002340:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b2c      	ldr	r3, [pc, #176]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b2a      	ldr	r3, [pc, #168]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800234e:	4829      	ldr	r0, [pc, #164]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 8002350:	f003 f8a4 	bl	800549c <HAL_TIM_Base_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800235a:	f7ff fbca 	bl	8001af2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002362:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002364:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002368:	4619      	mov	r1, r3
 800236a:	4822      	ldr	r0, [pc, #136]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800236c:	f003 fc48 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002376:	f7ff fbbc 	bl	8001af2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800237a:	481e      	ldr	r0, [pc, #120]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800237c:	f003 f930 	bl	80055e0 <HAL_TIM_PWM_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002386:	f7ff fbb4 	bl	8001af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	4619      	mov	r1, r3
 8002398:	4816      	ldr	r0, [pc, #88]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 800239a:	f003 ffcd 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80023a4:	f7ff fba5 	bl	8001af2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a8:	2360      	movs	r3, #96	@ 0x60
 80023aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 80023c0:	f003 fb5c 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80023ca:	f7ff fb92 	bl	8001af2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2204      	movs	r2, #4
 80023d2:	4619      	mov	r1, r3
 80023d4:	4807      	ldr	r0, [pc, #28]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 80023d6:	f003 fb51 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80023e0:	f7ff fb87 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023e4:	4803      	ldr	r0, [pc, #12]	@ (80023f4 <MX_TIM3_Init+0xfc>)
 80023e6:	f000 f8e7 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 80023ea:	bf00      	nop
 80023ec:	3738      	adds	r7, #56	@ 0x38
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200003ac 	.word	0x200003ac
 80023f8:	40000400 	.word	0x40000400

080023fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08e      	sub	sp, #56	@ 0x38
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
 8002426:	611a      	str	r2, [r3, #16]
 8002428:	615a      	str	r2, [r3, #20]
 800242a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800242c:	4b2c      	ldr	r3, [pc, #176]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 800242e:	4a2d      	ldr	r2, [pc, #180]	@ (80024e4 <MX_TIM4_Init+0xe8>)
 8002430:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1000 - 1;
 8002432:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002434:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002438:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 800243c:	2200      	movs	r2, #0
 800243e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16;
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002442:	2210      	movs	r2, #16
 8002444:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002446:	4b26      	ldr	r3, [pc, #152]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002448:	2200      	movs	r2, #0
 800244a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002452:	4823      	ldr	r0, [pc, #140]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002454:	f003 f822 	bl	800549c <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800245e:	f7ff fb48 	bl	8001af2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002466:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002468:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800246c:	4619      	mov	r1, r3
 800246e:	481c      	ldr	r0, [pc, #112]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002470:	f003 fbc6 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800247a:	f7ff fb3a 	bl	8001af2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800247e:	4818      	ldr	r0, [pc, #96]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 8002480:	f003 f8ae 	bl	80055e0 <HAL_TIM_PWM_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800248a:	f7ff fb32 	bl	8001af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002496:	f107 0320 	add.w	r3, r7, #32
 800249a:	4619      	mov	r1, r3
 800249c:	4810      	ldr	r0, [pc, #64]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 800249e:	f003 ff4b 	bl	8006338 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80024a8:	f7ff fb23 	bl	8001af2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ac:	2360      	movs	r3, #96	@ 0x60
 80024ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80024b0:	230a      	movs	r3, #10
 80024b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2200      	movs	r2, #0
 80024c0:	4619      	mov	r1, r3
 80024c2:	4807      	ldr	r0, [pc, #28]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 80024c4:	f003 fada 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80024ce:	f7ff fb10 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024d2:	4803      	ldr	r0, [pc, #12]	@ (80024e0 <MX_TIM4_Init+0xe4>)
 80024d4:	f000 f870 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 80024d8:	bf00      	nop
 80024da:	3738      	adds	r7, #56	@ 0x38
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200003f4 	.word	0x200003f4
 80024e4:	40000800 	.word	0x40000800

080024e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2c      	ldr	r2, [pc, #176]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d114      	bne.n	8002524 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024fa:	4b2c      	ldr	r3, [pc, #176]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	4a2b      	ldr	r2, [pc, #172]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002500:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002504:	6193      	str	r3, [r2, #24]
 8002506:	4b29      	ldr	r3, [pc, #164]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	2019      	movs	r0, #25
 8002518:	f000 fdb7 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800251c:	2019      	movs	r0, #25
 800251e:	f000 fdd0 	bl	80030c2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002522:	e03c      	b.n	800259e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800252c:	d114      	bne.n	8002558 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800252e:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4a1e      	ldr	r2, [pc, #120]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	61d3      	str	r3, [r2, #28]
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	201c      	movs	r0, #28
 800254c:	f000 fd9d 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002550:	201c      	movs	r0, #28
 8002552:	f000 fdb6 	bl	80030c2 <HAL_NVIC_EnableIRQ>
}
 8002556:	e022      	b.n	800259e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM3)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a14      	ldr	r2, [pc, #80]	@ (80025b0 <HAL_TIM_Base_MspInit+0xc8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10c      	bne.n	800257c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002562:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a11      	ldr	r2, [pc, #68]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
}
 800257a:	e010      	b.n	800259e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM4)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a0c      	ldr	r2, [pc, #48]	@ (80025b4 <HAL_TIM_Base_MspInit+0xcc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d10b      	bne.n	800259e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a08      	ldr	r2, [pc, #32]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 800258c:	f043 0304 	orr.w	r3, r3, #4
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_TIM_Base_MspInit+0xc4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40000400 	.word	0x40000400
 80025b4:	40000800 	.word	0x40000800

080025b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	@ (800264c <HAL_TIM_MspPostInit+0x94>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d118      	bne.n	800260a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 80025de:	f043 0304 	orr.w	r3, r3, #4
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f0:	23c0      	movs	r3, #192	@ 0xc0
 80025f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	4619      	mov	r1, r3
 8002602:	4814      	ldr	r0, [pc, #80]	@ (8002654 <HAL_TIM_MspPostInit+0x9c>)
 8002604:	f000 ff8c 	bl	8003520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002608:	e01c      	b.n	8002644 <HAL_TIM_MspPostInit+0x8c>
  else if(timHandle->Instance==TIM4)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <HAL_TIM_MspPostInit+0xa0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d117      	bne.n	8002644 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002614:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	4a0d      	ldr	r2, [pc, #52]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6193      	str	r3, [r2, #24]
 8002620:	4b0b      	ldr	r3, [pc, #44]	@ (8002650 <HAL_TIM_MspPostInit+0x98>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800262c:	2340      	movs	r3, #64	@ 0x40
 800262e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002634:	2302      	movs	r3, #2
 8002636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4619      	mov	r1, r3
 800263e:	4807      	ldr	r0, [pc, #28]	@ (800265c <HAL_TIM_MspPostInit+0xa4>)
 8002640:	f000 ff6e 	bl	8003520 <HAL_GPIO_Init>
}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40000400 	.word	0x40000400
 8002650:	40021000 	.word	0x40021000
 8002654:	40010800 	.word	0x40010800
 8002658:	40000800 	.word	0x40000800
 800265c:	40010c00 	.word	0x40010c00

08002660 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002664:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002666:	4a12      	ldr	r2, [pc, #72]	@ (80026b0 <MX_USART2_UART_Init+0x50>)
 8002668:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800266a:	4b10      	ldr	r3, [pc, #64]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800266c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002670:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002672:	4b0e      	ldr	r3, [pc, #56]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002678:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800267e:	4b0b      	ldr	r3, [pc, #44]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002686:	220c      	movs	r2, #12
 8002688:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002696:	4805      	ldr	r0, [pc, #20]	@ (80026ac <MX_USART2_UART_Init+0x4c>)
 8002698:	f003 febe 	bl	8006418 <HAL_UART_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026a2:	f7ff fa26 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000043c 	.word	0x2000043c
 80026b0:	40004400 	.word	0x40004400

080026b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <MX_USART3_UART_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80026be:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <MX_USART3_UART_Init+0x4c>)
 80026ec:	f003 fe94 	bl	8006418 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026f6:	f7ff f9fc 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000484 	.word	0x20000484
 8002704:	40004800 	.word	0x40004800

08002708 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b08a      	sub	sp, #40	@ 0x28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002710:	f107 0318 	add.w	r3, r7, #24
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a66      	ldr	r2, [pc, #408]	@ (80028bc <HAL_UART_MspInit+0x1b4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d15f      	bne.n	80027e8 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002728:	4b65      	ldr	r3, [pc, #404]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	4a64      	ldr	r2, [pc, #400]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 800272e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002732:	61d3      	str	r3, [r2, #28]
 8002734:	4b62      	ldr	r3, [pc, #392]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273c:	617b      	str	r3, [r7, #20]
 800273e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b5f      	ldr	r3, [pc, #380]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	4a5e      	ldr	r2, [pc, #376]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6193      	str	r3, [r2, #24]
 800274c:	4b5c      	ldr	r3, [pc, #368]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002758:	2304      	movs	r3, #4
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002760:	2303      	movs	r3, #3
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	4619      	mov	r1, r3
 800276a:	4856      	ldr	r0, [pc, #344]	@ (80028c4 <HAL_UART_MspInit+0x1bc>)
 800276c:	f000 fed8 	bl	8003520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002770:	2308      	movs	r3, #8
 8002772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	f107 0318 	add.w	r3, r7, #24
 8002780:	4619      	mov	r1, r3
 8002782:	4850      	ldr	r0, [pc, #320]	@ (80028c4 <HAL_UART_MspInit+0x1bc>)
 8002784:	f000 fecc 	bl	8003520 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002788:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 800278a:	4a50      	ldr	r2, [pc, #320]	@ (80028cc <HAL_UART_MspInit+0x1c4>)
 800278c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800278e:	4b4e      	ldr	r3, [pc, #312]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 8002790:	2210      	movs	r2, #16
 8002792:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002794:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279a:	4b4b      	ldr	r3, [pc, #300]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 800279c:	2280      	movs	r2, #128	@ 0x80
 800279e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a0:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027a6:	4b48      	ldr	r3, [pc, #288]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027ac:	4b46      	ldr	r3, [pc, #280]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027b2:	4b45      	ldr	r3, [pc, #276]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027ba:	4843      	ldr	r0, [pc, #268]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027bc:	f000 fc9c 	bl	80030f8 <HAL_DMA_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80027c6:	f7ff f994 	bl	8001af2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a3e      	ldr	r2, [pc, #248]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80027d0:	4a3d      	ldr	r2, [pc, #244]	@ (80028c8 <HAL_UART_MspInit+0x1c0>)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2026      	movs	r0, #38	@ 0x26
 80027dc:	f000 fc55 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027e0:	2026      	movs	r0, #38	@ 0x26
 80027e2:	f000 fc6e 	bl	80030c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80027e6:	e065      	b.n	80028b4 <HAL_UART_MspInit+0x1ac>
  else if(uartHandle->Instance==USART3)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a38      	ldr	r2, [pc, #224]	@ (80028d0 <HAL_UART_MspInit+0x1c8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d160      	bne.n	80028b4 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027f2:	4b33      	ldr	r3, [pc, #204]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a32      	ldr	r2, [pc, #200]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b30      	ldr	r3, [pc, #192]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800280a:	4b2d      	ldr	r3, [pc, #180]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6193      	str	r3, [r2, #24]
 8002816:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_UART_MspInit+0x1b8>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	4619      	mov	r1, r3
 8002836:	4827      	ldr	r0, [pc, #156]	@ (80028d4 <HAL_UART_MspInit+0x1cc>)
 8002838:	f000 fe72 	bl	8003520 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800283c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	4619      	mov	r1, r3
 8002850:	4820      	ldr	r0, [pc, #128]	@ (80028d4 <HAL_UART_MspInit+0x1cc>)
 8002852:	f000 fe65 	bl	8003520 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 8002858:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_UART_MspInit+0x1d4>)
 800285a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800285c:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 800285e:	2210      	movs	r2, #16
 8002860:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002862:	4b1d      	ldr	r3, [pc, #116]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002868:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 800286a:	2280      	movs	r2, #128	@ 0x80
 800286c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800286e:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 8002870:	2200      	movs	r2, #0
 8002872:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002874:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 8002876:	2200      	movs	r2, #0
 8002878:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800287a:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 800287c:	2200      	movs	r2, #0
 800287e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 8002882:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002886:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002888:	4813      	ldr	r0, [pc, #76]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 800288a:	f000 fc35 	bl	80030f8 <HAL_DMA_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8002894:	f7ff f92d 	bl	8001af2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
 800289e:	4a0e      	ldr	r2, [pc, #56]	@ (80028d8 <HAL_UART_MspInit+0x1d0>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2027      	movs	r0, #39	@ 0x27
 80028aa:	f000 fbee 	bl	800308a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ae:	2027      	movs	r0, #39	@ 0x27
 80028b0:	f000 fc07 	bl	80030c2 <HAL_NVIC_EnableIRQ>
}
 80028b4:	bf00      	nop
 80028b6:	3728      	adds	r7, #40	@ 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40004400 	.word	0x40004400
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010800 	.word	0x40010800
 80028c8:	200004cc 	.word	0x200004cc
 80028cc:	40020080 	.word	0x40020080
 80028d0:	40004800 	.word	0x40004800
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	20000510 	.word	0x20000510
 80028dc:	4002001c 	.word	0x4002001c

080028e0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 80028e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <MX_USB_PCD_Init+0x40>)
 80028e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80028ea:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 80028ec:	2208      	movs	r2, #8
 80028ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80028fc:	4b07      	ldr	r3, [pc, #28]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002902:	4b06      	ldr	r3, [pc, #24]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 8002904:	2200      	movs	r2, #0
 8002906:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002908:	4804      	ldr	r0, [pc, #16]	@ (800291c <MX_USB_PCD_Init+0x3c>)
 800290a:	f002 f80a 	bl	8004922 <HAL_PCD_Init>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8002914:	f7ff f8ed 	bl	8001af2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000554 	.word	0x20000554
 8002920:	40005c00 	.word	0x40005c00

08002924 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <HAL_PCD_MspInit+0x34>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10b      	bne.n	800294e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_PCD_MspInit+0x38>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_PCD_MspInit+0x38>)
 800293c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002940:	61d3      	str	r3, [r2, #28]
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_PCD_MspInit+0x38>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40005c00 	.word	0x40005c00
 800295c:	40021000 	.word	0x40021000

08002960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
     bl  SystemInit
 8002960:	f7ff fc26 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002964:	480b      	ldr	r0, [pc, #44]	@ (8002994 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002966:	490c      	ldr	r1, [pc, #48]	@ (8002998 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002968:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <LoopFillZerobss+0x16>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800296c:	e002      	b.n	8002974 <LoopCopyDataInit>

0800296e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002972:	3304      	adds	r3, #4

08002974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002978:	d3f9      	bcc.n	800296e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800297c:	4c09      	ldr	r4, [pc, #36]	@ (80029a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002980:	e001      	b.n	8002986 <LoopFillZerobss>

08002982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002984:	3204      	adds	r2, #4

08002986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002988:	d3fb      	bcc.n	8002982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298a:	f005 f88b 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800298e:	f7fe ffbd 	bl	800190c <main>
  bx lr
 8002992:	4770      	bx	lr
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800299c:	0800ae00 	.word	0x0800ae00
  ldr r2, =_sbss
 80029a0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80029a4:	2000097c 	.word	0x2000097c

080029a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC1_2_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b0:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_Init+0x28>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <HAL_Init+0x28>)
 80029b6:	f043 0310 	orr.w	r3, r3, #16
 80029ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029bc:	2003      	movs	r0, #3
 80029be:	f000 fb59 	bl	8003074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c2:	200f      	movs	r0, #15
 80029c4:	f000 f808 	bl	80029d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029c8:	f7ff fa96 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40022000 	.word	0x40022000

080029d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e0:	4b12      	ldr	r3, [pc, #72]	@ (8002a2c <HAL_InitTick+0x54>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b12      	ldr	r3, [pc, #72]	@ (8002a30 <HAL_InitTick+0x58>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4619      	mov	r1, r3
 80029ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80029f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 fb71 	bl	80030de <HAL_SYSTICK_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00e      	b.n	8002a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b0f      	cmp	r3, #15
 8002a0a:	d80a      	bhi.n	8002a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f000 fb39 	bl	800308a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a18:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <HAL_InitTick+0x5c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000000c 	.word	0x2000000c
 8002a30:	20000014 	.word	0x20000014
 8002a34:	20000010 	.word	0x20000010

08002a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	@ (8002a54 <HAL_IncTick+0x1c>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_IncTick+0x20>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4413      	add	r3, r2
 8002a48:	4a03      	ldr	r2, [pc, #12]	@ (8002a58 <HAL_IncTick+0x20>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000014 	.word	0x20000014
 8002a58:	2000082c 	.word	0x2000082c

08002a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a60:	4b02      	ldr	r3, [pc, #8]	@ (8002a6c <HAL_GetTick+0x10>)
 8002a62:	681b      	ldr	r3, [r3, #0]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	2000082c 	.word	0x2000082c

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff fff0 	bl	8002a5c <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d005      	beq.n	8002a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_Delay+0x44>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4413      	add	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a96:	bf00      	nop
 8002a98:	f7ff ffe0 	bl	8002a5c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d8f7      	bhi.n	8002a98 <HAL_Delay+0x28>
  {
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014

08002ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0be      	b.n	8002c58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d109      	bne.n	8002afc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fe fb4e 	bl	8001198 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f9ab 	bl	8002e58 <ADC_ConversionStop_Disable>
 8002b02:	4603      	mov	r3, r0
 8002b04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 8099 	bne.w	8002c46 <HAL_ADC_Init+0x18e>
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f040 8095 	bne.w	8002c46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b24:	f023 0302 	bic.w	r3, r3, #2
 8002b28:	f043 0202 	orr.w	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	7b1b      	ldrb	r3, [r3, #12]
 8002b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b50:	d003      	beq.n	8002b5a <HAL_ADC_Init+0xa2>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_ADC_Init+0xa8>
 8002b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_Init+0xaa>
 8002b60:	2300      	movs	r3, #0
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7d1b      	ldrb	r3, [r3, #20]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d119      	bne.n	8002ba4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	7b1b      	ldrb	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	035a      	lsls	r2, r3, #13
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e00b      	b.n	8002ba4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	f043 0201 	orr.w	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <HAL_ADC_Init+0x1a8>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	68b9      	ldr	r1, [r7, #8]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bd4:	d003      	beq.n	8002bde <HAL_ADC_Init+0x126>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d104      	bne.n	8002be8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <HAL_ADC_Init+0x1ac>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d10b      	bne.n	8002c24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c16:	f023 0303 	bic.w	r3, r3, #3
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c22:	e018      	b.n	8002c56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	f023 0312 	bic.w	r3, r3, #18
 8002c2c:	f043 0210 	orr.w	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002c44:	e007      	b.n	8002c56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	f043 0210 	orr.w	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	ffe1f7fd 	.word	0xffe1f7fd
 8002c64:	ff1f0efe 	.word	0xff1f0efe

08002c68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x20>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e0dc      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x1da>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d81c      	bhi.n	8002cd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	4019      	ands	r1, r3
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6818      	ldr	r0, [r3, #0]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b05      	subs	r3, #5
 8002cc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cd0:	e03c      	b.n	8002d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d81c      	bhi.n	8002d14 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b23      	subs	r3, #35	@ 0x23
 8002cec:	221f      	movs	r2, #31
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	4019      	ands	r1, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	3b23      	subs	r3, #35	@ 0x23
 8002d06:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d12:	e01b      	b.n	8002d4c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b41      	subs	r3, #65	@ 0x41
 8002d26:	221f      	movs	r2, #31
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	4019      	ands	r1, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b41      	subs	r3, #65	@ 0x41
 8002d40:	fa00 f203 	lsl.w	r2, r0, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	d91c      	bls.n	8002d8e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68d9      	ldr	r1, [r3, #12]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	3b1e      	subs	r3, #30
 8002d66:	2207      	movs	r2, #7
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	4019      	ands	r1, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6898      	ldr	r0, [r3, #8]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3b1e      	subs	r3, #30
 8002d80:	fa00 f203 	lsl.w	r2, r0, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	e019      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6919      	ldr	r1, [r3, #16]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	2207      	movs	r2, #7
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	4019      	ands	r1, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	6898      	ldr	r0, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b10      	cmp	r3, #16
 8002dc8:	d003      	beq.n	8002dd2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002dce:	2b11      	cmp	r3, #17
 8002dd0:	d132      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_ADC_ConfigChannel+0x1e4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d125      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d126      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002df8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d11a      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e02:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_ADC_ConfigChannel+0x1e8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a13      	ldr	r2, [pc, #76]	@ (8002e54 <HAL_ADC_ConfigChannel+0x1ec>)
 8002e08:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0c:	0c9a      	lsrs	r2, r3, #18
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e18:	e002      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f9      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x1b2>
 8002e26:	e007      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2c:	f043 0220 	orr.w	r2, r3, #32
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	40012400 	.word	0x40012400
 8002e50:	2000000c 	.word	0x2000000c
 8002e54:	431bde83 	.word	0x431bde83

08002e58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d12e      	bne.n	8002ed0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e82:	f7ff fdeb 	bl	8002a5c <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e88:	e01b      	b.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e8a:	f7ff fde7 	bl	8002a5c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d914      	bls.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10d      	bne.n	8002ec2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e007      	b.n	8002ed2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d0dc      	beq.n	8002e8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eec:	4b0c      	ldr	r3, [pc, #48]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <__NVIC_SetPriorityGrouping+0x44>)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	60d3      	str	r3, [r2, #12]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f28:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <__NVIC_GetPriorityGrouping+0x18>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	0a1b      	lsrs	r3, r3, #8
 8002f2e:	f003 0307 	and.w	r3, r3, #7
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	db0b      	blt.n	8002f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4906      	ldr	r1, [pc, #24]	@ (8002f74 <__NVIC_EnableIRQ+0x34>)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	095b      	lsrs	r3, r3, #5
 8002f60:	2001      	movs	r0, #1
 8002f62:	fa00 f202 	lsl.w	r2, r0, r2
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100

08002f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	6039      	str	r1, [r7, #0]
 8002f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	db0a      	blt.n	8002fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	490c      	ldr	r1, [pc, #48]	@ (8002fc4 <__NVIC_SetPriority+0x4c>)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa0:	e00a      	b.n	8002fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	4908      	ldr	r1, [pc, #32]	@ (8002fc8 <__NVIC_SetPriority+0x50>)
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	3b04      	subs	r3, #4
 8002fb0:	0112      	lsls	r2, r2, #4
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	761a      	strb	r2, [r3, #24]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	@ 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0307 	and.w	r3, r3, #7
 8002fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f1c3 0307 	rsb	r3, r3, #7
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	bf28      	it	cs
 8002fea:	2304      	movcs	r3, #4
 8002fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2b06      	cmp	r3, #6
 8002ff4:	d902      	bls.n	8002ffc <NVIC_EncodePriority+0x30>
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3b03      	subs	r3, #3
 8002ffa:	e000      	b.n	8002ffe <NVIC_EncodePriority+0x32>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	f04f 32ff 	mov.w	r2, #4294967295
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	401a      	ands	r2, r3
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	43d9      	mvns	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	4313      	orrs	r3, r2
         );
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	@ 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003040:	d301      	bcc.n	8003046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003042:	2301      	movs	r3, #1
 8003044:	e00f      	b.n	8003066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003046:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <SysTick_Config+0x40>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304e:	210f      	movs	r1, #15
 8003050:	f04f 30ff 	mov.w	r0, #4294967295
 8003054:	f7ff ff90 	bl	8002f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <SysTick_Config+0x40>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <SysTick_Config+0x40>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff ff2d 	bl	8002edc <__NVIC_SetPriorityGrouping>
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	4603      	mov	r3, r0
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003098:	2300      	movs	r3, #0
 800309a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800309c:	f7ff ff42 	bl	8002f24 <__NVIC_GetPriorityGrouping>
 80030a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	6978      	ldr	r0, [r7, #20]
 80030a8:	f7ff ff90 	bl	8002fcc <NVIC_EncodePriority>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	4611      	mov	r1, r2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff5f 	bl	8002f78 <__NVIC_SetPriority>
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	4603      	mov	r3, r0
 80030ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff35 	bl	8002f40 <__NVIC_EnableIRQ>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff ffa2 	bl	8003030 <SysTick_Config>
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e043      	b.n	8003196 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	4b22      	ldr	r3, [pc, #136]	@ (80031a0 <HAL_DMA_Init+0xa8>)
 8003116:	4413      	add	r3, r2
 8003118:	4a22      	ldr	r2, [pc, #136]	@ (80031a4 <HAL_DMA_Init+0xac>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	091b      	lsrs	r3, r3, #4
 8003120:	009a      	lsls	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_DMA_Init+0xb0>)
 800312a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003142:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003146:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	bffdfff8 	.word	0xbffdfff8
 80031a4:	cccccccd 	.word	0xcccccccd
 80031a8:	40020000 	.word	0x40020000

080031ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d008      	beq.n	80031d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2204      	movs	r2, #4
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e020      	b.n	8003218 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020e 	bic.w	r2, r2, #14
 80031e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003216:	7bfb      	ldrb	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr
	...

08003224 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d005      	beq.n	8003248 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2204      	movs	r2, #4
 8003240:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	e051      	b.n	80032ec <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 020e 	bic.w	r2, r2, #14
 8003256:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_DMA_Abort_IT+0xd4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d029      	beq.n	80032c6 <HAL_DMA_Abort_IT+0xa2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a21      	ldr	r2, [pc, #132]	@ (80032fc <HAL_DMA_Abort_IT+0xd8>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d022      	beq.n	80032c2 <HAL_DMA_Abort_IT+0x9e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1f      	ldr	r2, [pc, #124]	@ (8003300 <HAL_DMA_Abort_IT+0xdc>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d01a      	beq.n	80032bc <HAL_DMA_Abort_IT+0x98>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1e      	ldr	r2, [pc, #120]	@ (8003304 <HAL_DMA_Abort_IT+0xe0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d012      	beq.n	80032b6 <HAL_DMA_Abort_IT+0x92>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1c      	ldr	r2, [pc, #112]	@ (8003308 <HAL_DMA_Abort_IT+0xe4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d00a      	beq.n	80032b0 <HAL_DMA_Abort_IT+0x8c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1b      	ldr	r2, [pc, #108]	@ (800330c <HAL_DMA_Abort_IT+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d102      	bne.n	80032aa <HAL_DMA_Abort_IT+0x86>
 80032a4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80032a8:	e00e      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032ae:	e00b      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80032b4:	e008      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ba:	e005      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c0:	e002      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032c2:	2310      	movs	r3, #16
 80032c4:	e000      	b.n	80032c8 <HAL_DMA_Abort_IT+0xa4>
 80032c6:	2301      	movs	r3, #1
 80032c8:	4a11      	ldr	r2, [pc, #68]	@ (8003310 <HAL_DMA_Abort_IT+0xec>)
 80032ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4798      	blx	r3
    } 
  }
  return status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40020008 	.word	0x40020008
 80032fc:	4002001c 	.word	0x4002001c
 8003300:	40020030 	.word	0x40020030
 8003304:	40020044 	.word	0x40020044
 8003308:	40020058 	.word	0x40020058
 800330c:	4002006c 	.word	0x4002006c
 8003310:	40020000 	.word	0x40020000

08003314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2204      	movs	r2, #4
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d04f      	beq.n	80033dc <HAL_DMA_IRQHandler+0xc8>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d04a      	beq.n	80033dc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0320 	and.w	r3, r3, #32
 8003350:	2b00      	cmp	r3, #0
 8003352:	d107      	bne.n	8003364 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0204 	bic.w	r2, r2, #4
 8003362:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a66      	ldr	r2, [pc, #408]	@ (8003504 <HAL_DMA_IRQHandler+0x1f0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d029      	beq.n	80033c2 <HAL_DMA_IRQHandler+0xae>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a65      	ldr	r2, [pc, #404]	@ (8003508 <HAL_DMA_IRQHandler+0x1f4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_DMA_IRQHandler+0xaa>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a63      	ldr	r2, [pc, #396]	@ (800350c <HAL_DMA_IRQHandler+0x1f8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01a      	beq.n	80033b8 <HAL_DMA_IRQHandler+0xa4>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a62      	ldr	r2, [pc, #392]	@ (8003510 <HAL_DMA_IRQHandler+0x1fc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d012      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x9e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a60      	ldr	r2, [pc, #384]	@ (8003514 <HAL_DMA_IRQHandler+0x200>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00a      	beq.n	80033ac <HAL_DMA_IRQHandler+0x98>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a5f      	ldr	r2, [pc, #380]	@ (8003518 <HAL_DMA_IRQHandler+0x204>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d102      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x92>
 80033a0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80033a4:	e00e      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033a6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80033aa:	e00b      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033b0:	e008      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033b2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80033b6:	e005      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033bc:	e002      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033be:	2340      	movs	r3, #64	@ 0x40
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_IRQHandler+0xb0>
 80033c2:	2304      	movs	r3, #4
 80033c4:	4a55      	ldr	r2, [pc, #340]	@ (800351c <HAL_DMA_IRQHandler+0x208>)
 80033c6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 8094 	beq.w	80034fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80033da:	e08e      	b.n	80034fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2202      	movs	r2, #2
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d056      	beq.n	800349a <HAL_DMA_IRQHandler+0x186>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d051      	beq.n	800349a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 020a 	bic.w	r2, r2, #10
 8003412:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a38      	ldr	r2, [pc, #224]	@ (8003504 <HAL_DMA_IRQHandler+0x1f0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d029      	beq.n	800347a <HAL_DMA_IRQHandler+0x166>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a37      	ldr	r2, [pc, #220]	@ (8003508 <HAL_DMA_IRQHandler+0x1f4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d022      	beq.n	8003476 <HAL_DMA_IRQHandler+0x162>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a35      	ldr	r2, [pc, #212]	@ (800350c <HAL_DMA_IRQHandler+0x1f8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01a      	beq.n	8003470 <HAL_DMA_IRQHandler+0x15c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a34      	ldr	r2, [pc, #208]	@ (8003510 <HAL_DMA_IRQHandler+0x1fc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d012      	beq.n	800346a <HAL_DMA_IRQHandler+0x156>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <HAL_DMA_IRQHandler+0x200>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00a      	beq.n	8003464 <HAL_DMA_IRQHandler+0x150>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a31      	ldr	r2, [pc, #196]	@ (8003518 <HAL_DMA_IRQHandler+0x204>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d102      	bne.n	800345e <HAL_DMA_IRQHandler+0x14a>
 8003458:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800345c:	e00e      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 800345e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003462:	e00b      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 8003464:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003468:	e008      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 800346a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800346e:	e005      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 8003470:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003474:	e002      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 8003476:	2320      	movs	r3, #32
 8003478:	e000      	b.n	800347c <HAL_DMA_IRQHandler+0x168>
 800347a:	2302      	movs	r3, #2
 800347c:	4a27      	ldr	r2, [pc, #156]	@ (800351c <HAL_DMA_IRQHandler+0x208>)
 800347e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	2b00      	cmp	r3, #0
 800348e:	d034      	beq.n	80034fa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003498:	e02f      	b.n	80034fa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	2208      	movs	r2, #8
 80034a0:	409a      	lsls	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d028      	beq.n	80034fc <HAL_DMA_IRQHandler+0x1e8>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d023      	beq.n	80034fc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 020e 	bic.w	r2, r2, #14
 80034c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034cc:	2101      	movs	r1, #1
 80034ce:	fa01 f202 	lsl.w	r2, r1, r2
 80034d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d004      	beq.n	80034fc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
    }
  }
  return;
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
}
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40020008 	.word	0x40020008
 8003508:	4002001c 	.word	0x4002001c
 800350c:	40020030 	.word	0x40020030
 8003510:	40020044 	.word	0x40020044
 8003514:	40020058 	.word	0x40020058
 8003518:	4002006c 	.word	0x4002006c
 800351c:	40020000 	.word	0x40020000

08003520 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003520:	b480      	push	{r7}
 8003522:	b08b      	sub	sp, #44	@ 0x2c
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800352e:	2300      	movs	r3, #0
 8003530:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003532:	e169      	b.n	8003808 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003534:	2201      	movs	r2, #1
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69fa      	ldr	r2, [r7, #28]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 8158 	bne.w	8003802 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	4a9a      	ldr	r2, [pc, #616]	@ (80037c0 <HAL_GPIO_Init+0x2a0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d05e      	beq.n	800361a <HAL_GPIO_Init+0xfa>
 800355c:	4a98      	ldr	r2, [pc, #608]	@ (80037c0 <HAL_GPIO_Init+0x2a0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d875      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 8003562:	4a98      	ldr	r2, [pc, #608]	@ (80037c4 <HAL_GPIO_Init+0x2a4>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d058      	beq.n	800361a <HAL_GPIO_Init+0xfa>
 8003568:	4a96      	ldr	r2, [pc, #600]	@ (80037c4 <HAL_GPIO_Init+0x2a4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d86f      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 800356e:	4a96      	ldr	r2, [pc, #600]	@ (80037c8 <HAL_GPIO_Init+0x2a8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d052      	beq.n	800361a <HAL_GPIO_Init+0xfa>
 8003574:	4a94      	ldr	r2, [pc, #592]	@ (80037c8 <HAL_GPIO_Init+0x2a8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d869      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 800357a:	4a94      	ldr	r2, [pc, #592]	@ (80037cc <HAL_GPIO_Init+0x2ac>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d04c      	beq.n	800361a <HAL_GPIO_Init+0xfa>
 8003580:	4a92      	ldr	r2, [pc, #584]	@ (80037cc <HAL_GPIO_Init+0x2ac>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d863      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 8003586:	4a92      	ldr	r2, [pc, #584]	@ (80037d0 <HAL_GPIO_Init+0x2b0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d046      	beq.n	800361a <HAL_GPIO_Init+0xfa>
 800358c:	4a90      	ldr	r2, [pc, #576]	@ (80037d0 <HAL_GPIO_Init+0x2b0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d85d      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 8003592:	2b12      	cmp	r3, #18
 8003594:	d82a      	bhi.n	80035ec <HAL_GPIO_Init+0xcc>
 8003596:	2b12      	cmp	r3, #18
 8003598:	d859      	bhi.n	800364e <HAL_GPIO_Init+0x12e>
 800359a:	a201      	add	r2, pc, #4	@ (adr r2, 80035a0 <HAL_GPIO_Init+0x80>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	0800361b 	.word	0x0800361b
 80035a4:	080035f5 	.word	0x080035f5
 80035a8:	08003607 	.word	0x08003607
 80035ac:	08003649 	.word	0x08003649
 80035b0:	0800364f 	.word	0x0800364f
 80035b4:	0800364f 	.word	0x0800364f
 80035b8:	0800364f 	.word	0x0800364f
 80035bc:	0800364f 	.word	0x0800364f
 80035c0:	0800364f 	.word	0x0800364f
 80035c4:	0800364f 	.word	0x0800364f
 80035c8:	0800364f 	.word	0x0800364f
 80035cc:	0800364f 	.word	0x0800364f
 80035d0:	0800364f 	.word	0x0800364f
 80035d4:	0800364f 	.word	0x0800364f
 80035d8:	0800364f 	.word	0x0800364f
 80035dc:	0800364f 	.word	0x0800364f
 80035e0:	0800364f 	.word	0x0800364f
 80035e4:	080035fd 	.word	0x080035fd
 80035e8:	08003611 	.word	0x08003611
 80035ec:	4a79      	ldr	r2, [pc, #484]	@ (80037d4 <HAL_GPIO_Init+0x2b4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035f2:	e02c      	b.n	800364e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e029      	b.n	8003650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	3304      	adds	r3, #4
 8003602:	623b      	str	r3, [r7, #32]
          break;
 8003604:	e024      	b.n	8003650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	3308      	adds	r3, #8
 800360c:	623b      	str	r3, [r7, #32]
          break;
 800360e:	e01f      	b.n	8003650 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	330c      	adds	r3, #12
 8003616:	623b      	str	r3, [r7, #32]
          break;
 8003618:	e01a      	b.n	8003650 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d102      	bne.n	8003628 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003622:	2304      	movs	r3, #4
 8003624:	623b      	str	r3, [r7, #32]
          break;
 8003626:	e013      	b.n	8003650 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d105      	bne.n	800363c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003630:	2308      	movs	r3, #8
 8003632:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	611a      	str	r2, [r3, #16]
          break;
 800363a:	e009      	b.n	8003650 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800363c:	2308      	movs	r3, #8
 800363e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	615a      	str	r2, [r3, #20]
          break;
 8003646:	e003      	b.n	8003650 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003648:	2300      	movs	r3, #0
 800364a:	623b      	str	r3, [r7, #32]
          break;
 800364c:	e000      	b.n	8003650 <HAL_GPIO_Init+0x130>
          break;
 800364e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2bff      	cmp	r3, #255	@ 0xff
 8003654:	d801      	bhi.n	800365a <HAL_GPIO_Init+0x13a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	e001      	b.n	800365e <HAL_GPIO_Init+0x13e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3304      	adds	r3, #4
 800365e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	2bff      	cmp	r3, #255	@ 0xff
 8003664:	d802      	bhi.n	800366c <HAL_GPIO_Init+0x14c>
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	e002      	b.n	8003672 <HAL_GPIO_Init+0x152>
 800366c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366e:	3b08      	subs	r3, #8
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	210f      	movs	r1, #15
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	fa01 f303 	lsl.w	r3, r1, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	401a      	ands	r2, r3
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	fa01 f303 	lsl.w	r3, r1, r3
 800368c:	431a      	orrs	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 80b1 	beq.w	8003802 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036a0:	4b4d      	ldr	r3, [pc, #308]	@ (80037d8 <HAL_GPIO_Init+0x2b8>)
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	4a4c      	ldr	r2, [pc, #304]	@ (80037d8 <HAL_GPIO_Init+0x2b8>)
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	4b4a      	ldr	r3, [pc, #296]	@ (80037d8 <HAL_GPIO_Init+0x2b8>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036b8:	4a48      	ldr	r2, [pc, #288]	@ (80037dc <HAL_GPIO_Init+0x2bc>)
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	089b      	lsrs	r3, r3, #2
 80036be:	3302      	adds	r3, #2
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a40      	ldr	r2, [pc, #256]	@ (80037e0 <HAL_GPIO_Init+0x2c0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d013      	beq.n	800370c <HAL_GPIO_Init+0x1ec>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a3f      	ldr	r2, [pc, #252]	@ (80037e4 <HAL_GPIO_Init+0x2c4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00d      	beq.n	8003708 <HAL_GPIO_Init+0x1e8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a3e      	ldr	r2, [pc, #248]	@ (80037e8 <HAL_GPIO_Init+0x2c8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d007      	beq.n	8003704 <HAL_GPIO_Init+0x1e4>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a3d      	ldr	r2, [pc, #244]	@ (80037ec <HAL_GPIO_Init+0x2cc>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_GPIO_Init+0x1e0>
 80036fc:	2303      	movs	r3, #3
 80036fe:	e006      	b.n	800370e <HAL_GPIO_Init+0x1ee>
 8003700:	2304      	movs	r3, #4
 8003702:	e004      	b.n	800370e <HAL_GPIO_Init+0x1ee>
 8003704:	2302      	movs	r3, #2
 8003706:	e002      	b.n	800370e <HAL_GPIO_Init+0x1ee>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_GPIO_Init+0x1ee>
 800370c:	2300      	movs	r3, #0
 800370e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003710:	f002 0203 	and.w	r2, r2, #3
 8003714:	0092      	lsls	r2, r2, #2
 8003716:	4093      	lsls	r3, r2
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800371e:	492f      	ldr	r1, [pc, #188]	@ (80037dc <HAL_GPIO_Init+0x2bc>)
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d006      	beq.n	8003746 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003738:	4b2d      	ldr	r3, [pc, #180]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	492c      	ldr	r1, [pc, #176]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	608b      	str	r3, [r1, #8]
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003746:	4b2a      	ldr	r3, [pc, #168]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	43db      	mvns	r3, r3
 800374e:	4928      	ldr	r1, [pc, #160]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003750:	4013      	ands	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003760:	4b23      	ldr	r3, [pc, #140]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	4922      	ldr	r1, [pc, #136]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
 800376c:	e006      	b.n	800377c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800376e:	4b20      	ldr	r3, [pc, #128]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	43db      	mvns	r3, r3
 8003776:	491e      	ldr	r1, [pc, #120]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003778:	4013      	ands	r3, r2
 800377a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d006      	beq.n	8003796 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003788:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4918      	ldr	r1, [pc, #96]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
 8003794:	e006      	b.n	80037a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003796:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	43db      	mvns	r3, r3
 800379e:	4914      	ldr	r1, [pc, #80]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d021      	beq.n	80037f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80037b0:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	490e      	ldr	r1, [pc, #56]	@ (80037f0 <HAL_GPIO_Init+0x2d0>)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]
 80037bc:	e021      	b.n	8003802 <HAL_GPIO_Init+0x2e2>
 80037be:	bf00      	nop
 80037c0:	10320000 	.word	0x10320000
 80037c4:	10310000 	.word	0x10310000
 80037c8:	10220000 	.word	0x10220000
 80037cc:	10210000 	.word	0x10210000
 80037d0:	10120000 	.word	0x10120000
 80037d4:	10110000 	.word	0x10110000
 80037d8:	40021000 	.word	0x40021000
 80037dc:	40010000 	.word	0x40010000
 80037e0:	40010800 	.word	0x40010800
 80037e4:	40010c00 	.word	0x40010c00
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40011400 	.word	0x40011400
 80037f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003824 <HAL_GPIO_Init+0x304>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4909      	ldr	r1, [pc, #36]	@ (8003824 <HAL_GPIO_Init+0x304>)
 80037fe:	4013      	ands	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	3301      	adds	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	f47f ae8e 	bne.w	8003534 <HAL_GPIO_Init+0x14>
  }
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	372c      	adds	r7, #44	@ 0x2c
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr
 8003824:	40010400 	.word	0x40010400

08003828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
 8003834:	4613      	mov	r3, r2
 8003836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003838:	787b      	ldrb	r3, [r7, #1]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800383e:	887a      	ldrh	r2, [r7, #2]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003844:	e003      	b.n	800384e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003846:	887b      	ldrh	r3, [r7, #2]
 8003848:	041a      	lsls	r2, r3, #16
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr

08003858 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e12b      	b.n	8003ac2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fd fd94 	bl	80013ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2224      	movs	r2, #36	@ 0x24
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038bc:	f001 fcf2 	bl	80052a4 <HAL_RCC_GetPCLK1Freq>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	4a81      	ldr	r2, [pc, #516]	@ (8003acc <HAL_I2C_Init+0x274>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d807      	bhi.n	80038dc <HAL_I2C_Init+0x84>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a80      	ldr	r2, [pc, #512]	@ (8003ad0 <HAL_I2C_Init+0x278>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e006      	b.n	80038ea <HAL_I2C_Init+0x92>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad4 <HAL_I2C_Init+0x27c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf94      	ite	ls
 80038e4:	2301      	movls	r3, #1
 80038e6:	2300      	movhi	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0e7      	b.n	8003ac2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a78      	ldr	r2, [pc, #480]	@ (8003ad8 <HAL_I2C_Init+0x280>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	4a6a      	ldr	r2, [pc, #424]	@ (8003acc <HAL_I2C_Init+0x274>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d802      	bhi.n	800392c <HAL_I2C_Init+0xd4>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	3301      	adds	r3, #1
 800392a:	e009      	b.n	8003940 <HAL_I2C_Init+0xe8>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	4a69      	ldr	r2, [pc, #420]	@ (8003adc <HAL_I2C_Init+0x284>)
 8003938:	fba2 2303 	umull	r2, r3, r2, r3
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	3301      	adds	r3, #1
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6812      	ldr	r2, [r2, #0]
 8003944:	430b      	orrs	r3, r1
 8003946:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003952:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	495c      	ldr	r1, [pc, #368]	@ (8003acc <HAL_I2C_Init+0x274>)
 800395c:	428b      	cmp	r3, r1
 800395e:	d819      	bhi.n	8003994 <HAL_I2C_Init+0x13c>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	1e59      	subs	r1, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fbb1 f3f3 	udiv	r3, r1, r3
 800396e:	1c59      	adds	r1, r3, #1
 8003970:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003974:	400b      	ands	r3, r1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_I2C_Init+0x138>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e59      	subs	r1, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fbb1 f3f3 	udiv	r3, r1, r3
 8003988:	3301      	adds	r3, #1
 800398a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398e:	e051      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003990:	2304      	movs	r3, #4
 8003992:	e04f      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <HAL_I2C_Init+0x168>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	e012      	b.n	80039e6 <HAL_I2C_Init+0x18e>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1e58      	subs	r0, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039dc:	2b00      	cmp	r3, #0
 80039de:	bf0c      	ite	eq
 80039e0:	2301      	moveq	r3, #1
 80039e2:	2300      	movne	r3, #0
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Init+0x196>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e022      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10e      	bne.n	8003a14 <HAL_I2C_Init+0x1bc>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1e58      	subs	r0, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	440b      	add	r3, r1
 8003a04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a08:	3301      	adds	r3, #1
 8003a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a12:	e00f      	b.n	8003a34 <HAL_I2C_Init+0x1dc>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1e58      	subs	r0, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	0099      	lsls	r1, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	6809      	ldr	r1, [r1, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6911      	ldr	r1, [r2, #16]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68d2      	ldr	r2, [r2, #12]
 8003a6e:	4311      	orrs	r1, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	430b      	orrs	r3, r1
 8003a76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f042 0201 	orr.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2220      	movs	r2, #32
 8003aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	000186a0 	.word	0x000186a0
 8003ad0:	001e847f 	.word	0x001e847f
 8003ad4:	003d08ff 	.word	0x003d08ff
 8003ad8:	431bde83 	.word	0x431bde83
 8003adc:	10624dd3 	.word	0x10624dd3

08003ae0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	4608      	mov	r0, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	461a      	mov	r2, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	817b      	strh	r3, [r7, #10]
 8003af2:	460b      	mov	r3, r1
 8003af4:	813b      	strh	r3, [r7, #8]
 8003af6:	4613      	mov	r3, r2
 8003af8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003afa:	f7fe ffaf 	bl	8002a5c <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	f040 80d9 	bne.w	8003cc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	2319      	movs	r3, #25
 8003b14:	2201      	movs	r2, #1
 8003b16:	496d      	ldr	r1, [pc, #436]	@ (8003ccc <HAL_I2C_Mem_Write+0x1ec>)
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fccd 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e0cc      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_I2C_Mem_Write+0x56>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e0c5      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d007      	beq.n	8003b5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2221      	movs	r2, #33	@ 0x21
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2240      	movs	r2, #64	@ 0x40
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003cd0 <HAL_I2C_Mem_Write+0x1f0>)
 8003b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b9e:	88f8      	ldrh	r0, [r7, #6]
 8003ba0:	893a      	ldrh	r2, [r7, #8]
 8003ba2:	8979      	ldrh	r1, [r7, #10]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	4603      	mov	r3, r0
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 fb04 	bl	80041bc <I2C_RequestMemoryWrite>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d052      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e081      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fd92 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00d      	beq.n	8003bea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d107      	bne.n	8003be6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e06b      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	781a      	ldrb	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	3b01      	subs	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d11b      	bne.n	8003c60 <HAL_I2C_Mem_Write+0x180>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d017      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	1c5a      	adds	r2, r3, #1
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1aa      	bne.n	8003bbe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fd85 	bl	800477c <I2C_WaitOnBTFFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00d      	beq.n	8003c94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	2b04      	cmp	r3, #4
 8003c7e:	d107      	bne.n	8003c90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e016      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e000      	b.n	8003cc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cc0:	2302      	movs	r3, #2
  }
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	00100002 	.word	0x00100002
 8003cd0:	ffff0000 	.word	0xffff0000

08003cd4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	@ 0x30
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	4608      	mov	r0, r1
 8003cde:	4611      	mov	r1, r2
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	817b      	strh	r3, [r7, #10]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	813b      	strh	r3, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cf2:	f7fe feb3 	bl	8002a5c <HAL_GetTick>
 8003cf6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	f040 8250 	bne.w	80041a6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4982      	ldr	r1, [pc, #520]	@ (8003f18 <HAL_I2C_Mem_Read+0x244>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fbd1 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e243      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Mem_Read+0x5a>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e23c      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d007      	beq.n	8003d54 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2222      	movs	r2, #34	@ 0x22
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2240      	movs	r2, #64	@ 0x40
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a62      	ldr	r2, [pc, #392]	@ (8003f1c <HAL_I2C_Mem_Read+0x248>)
 8003d94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d96:	88f8      	ldrh	r0, [r7, #6]
 8003d98:	893a      	ldrh	r2, [r7, #8]
 8003d9a:	8979      	ldrh	r1, [r7, #10]
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	9301      	str	r3, [sp, #4]
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	4603      	mov	r3, r0
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa9e 	bl	80042e8 <I2C_RequestMemoryRead>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1f8      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e1cc      	b.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11e      	bne.n	8003e2c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003dfe:	b672      	cpsid	i
}
 8003e00:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e28:	b662      	cpsie	i
}
 8003e2a:	e035      	b.n	8003e98 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d11e      	bne.n	8003e72 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e42:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e6e:	b662      	cpsie	i
}
 8003e70:	e012      	b.n	8003e98 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e80:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003e98:	e172      	b.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	f200 811f 	bhi.w	80040e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d123      	bne.n	8003ef4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 fcab 	bl	800480c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e173      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ef2:	e145      	b.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d152      	bne.n	8003fa2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	2200      	movs	r2, #0
 8003f04:	4906      	ldr	r1, [pc, #24]	@ (8003f20 <HAL_I2C_Mem_Read+0x24c>)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 fad6 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e148      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
 8003f16:	bf00      	nop
 8003f18:	00100002 	.word	0x00100002
 8003f1c:	ffff0000 	.word	0xffff0000
 8003f20:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f24:	b672      	cpsid	i
}
 8003f26:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f54:	3b01      	subs	r3, #1
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f6a:	b662      	cpsie	i
}
 8003f6c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691a      	ldr	r2, [r3, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fa0:	e0ee      	b.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4981      	ldr	r1, [pc, #516]	@ (80041b0 <HAL_I2C_Mem_Read+0x4dc>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fa83 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0f5      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fcc:	b672      	cpsid	i
}
 8003fce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691a      	ldr	r2, [r3, #16]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004002:	4b6c      	ldr	r3, [pc, #432]	@ (80041b4 <HAL_I2C_Mem_Read+0x4e0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	08db      	lsrs	r3, r3, #3
 8004008:	4a6b      	ldr	r2, [pc, #428]	@ (80041b8 <HAL_I2C_Mem_Read+0x4e4>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0a1a      	lsrs	r2, r3, #8
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00da      	lsls	r2, r3, #3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	3b01      	subs	r3, #1
 8004020:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d118      	bne.n	800405a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800404a:	b662      	cpsie	i
}
 800404c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0a6      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d1d9      	bne.n	800401c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040aa:	b662      	cpsie	i
}
 80040ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040e0:	e04e      	b.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fb90 	bl	800480c <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e058      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004100:	b2d2      	uxtb	r2, r2
 8004102:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d124      	bne.n	8004180 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800414c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691a      	ldr	r2, [r3, #16]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	f47f ae88 	bne.w	8003e9a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041a2:	2300      	movs	r3, #0
 80041a4:	e000      	b.n	80041a8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
  }
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3728      	adds	r7, #40	@ 0x28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	00010004 	.word	0x00010004
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	14f8b589 	.word	0x14f8b589

080041bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af02      	add	r7, sp, #8
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	4608      	mov	r0, r1
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	817b      	strh	r3, [r7, #10]
 80041ce:	460b      	mov	r3, r1
 80041d0:	813b      	strh	r3, [r7, #8]
 80041d2:	4613      	mov	r3, r2
 80041d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f960 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00d      	beq.n	800421a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004208:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420c:	d103      	bne.n	8004216 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004214:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e05f      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004228:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	6a3a      	ldr	r2, [r7, #32]
 800422e:	492d      	ldr	r1, [pc, #180]	@ (80042e4 <I2C_RequestMemoryWrite+0x128>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f9bb 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04c      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004240:	2300      	movs	r3, #0
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	6a39      	ldr	r1, [r7, #32]
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa46 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b04      	cmp	r3, #4
 800426c:	d107      	bne.n	800427e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800427c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e02b      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d105      	bne.n	8004294 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004288:	893b      	ldrh	r3, [r7, #8]
 800428a:	b2da      	uxtb	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
 8004292:	e021      	b.n	80042d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	b29b      	uxth	r3, r3
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a4:	6a39      	ldr	r1, [r7, #32]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 fa20 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00d      	beq.n	80042ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d107      	bne.n	80042ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e005      	b.n	80042da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ce:	893b      	ldrh	r3, [r7, #8]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	00010002 	.word	0x00010002

080042e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	817b      	strh	r3, [r7, #10]
 80042fa:	460b      	mov	r3, r1
 80042fc:	813b      	strh	r3, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004310:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004320:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	2200      	movs	r2, #0
 800432a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f8c2 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004348:	d103      	bne.n	8004352 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004350:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e0aa      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004356:	897b      	ldrh	r3, [r7, #10]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004364:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	6a3a      	ldr	r2, [r7, #32]
 800436a:	4952      	ldr	r1, [pc, #328]	@ (80044b4 <I2C_RequestMemoryRead+0x1cc>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f91d 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e097      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004394:	6a39      	ldr	r1, [r7, #32]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f9a8 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00d      	beq.n	80043be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d107      	bne.n	80043ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e076      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043c4:	893b      	ldrh	r3, [r7, #8]
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	e021      	b.n	8004414 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043d0:	893b      	ldrh	r3, [r7, #8]
 80043d2:	0a1b      	lsrs	r3, r3, #8
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e0:	6a39      	ldr	r1, [r7, #32]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f982 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d107      	bne.n	8004406 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004404:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e050      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800440a:	893b      	ldrh	r3, [r7, #8]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004416:	6a39      	ldr	r1, [r7, #32]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f967 	bl	80046ec <I2C_WaitOnTXEFlagUntilTimeout>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00d      	beq.n	8004440 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	2b04      	cmp	r3, #4
 800442a:	d107      	bne.n	800443c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e035      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	2200      	movs	r2, #0
 8004458:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f82b 	bl	80044b8 <I2C_WaitOnFlagUntilTimeout>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00d      	beq.n	8004484 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004476:	d103      	bne.n	8004480 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e013      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004484:	897b      	ldrh	r3, [r7, #10]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	4906      	ldr	r1, [pc, #24]	@ (80044b4 <I2C_RequestMemoryRead+0x1cc>)
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f886 	bl	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3718      	adds	r7, #24
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	00010002 	.word	0x00010002

080044b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044c8:	e048      	b.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d044      	beq.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044d2:	f7fe fac3 	bl	8002a5c <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d302      	bcc.n	80044e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d139      	bne.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10d      	bne.n	800450e <I2C_WaitOnFlagUntilTimeout+0x56>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	e00c      	b.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x70>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	43da      	mvns	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	429a      	cmp	r2, r3
 800452c:	d116      	bne.n	800455c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e023      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	43da      	mvns	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	4013      	ands	r3, r2
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf0c      	ite	eq
 8004578:	2301      	moveq	r3, #1
 800457a:	2300      	movne	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	461a      	mov	r2, r3
 8004580:	e00c      	b.n	800459c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	43da      	mvns	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	461a      	mov	r2, r3
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d093      	beq.n	80044ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ba:	e071      	b.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ca:	d123      	bne.n	8004614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	f043 0204 	orr.w	r2, r3, #4
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e067      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800461a:	d041      	beq.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461c:	f7fe fa1e 	bl	8002a5c <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d302      	bcc.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d136      	bne.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	0c1b      	lsrs	r3, r3, #16
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d10c      	bne.n	8004656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4013      	ands	r3, r2
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e00b      	b.n	800466e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	43da      	mvns	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4013      	ands	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e021      	b.n	80046e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d10c      	bne.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	43da      	mvns	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4013      	ands	r3, r2
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e00b      	b.n	80046dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f47f af6d 	bne.w	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046f8:	e034      	b.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8e3 	bl	80048c6 <I2C_IsAcknowledgeFailed>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e034      	b.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d028      	beq.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe f9a3 	bl	8002a5c <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004732:	2b80      	cmp	r3, #128	@ 0x80
 8004734:	d016      	beq.n	8004764 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800476e:	2b80      	cmp	r3, #128	@ 0x80
 8004770:	d1c3      	bne.n	80046fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004788:	e034      	b.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f89b 	bl	80048c6 <I2C_IsAcknowledgeFailed>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e034      	b.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d028      	beq.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fe f95b 	bl	8002a5c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d11d      	bne.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d016      	beq.n	80047f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e007      	b.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d1c3      	bne.n	800478a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004818:	e049      	b.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b10      	cmp	r3, #16
 8004826:	d119      	bne.n	800485c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0210 	mvn.w	r2, #16
 8004830:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e030      	b.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485c:	f7fe f8fe 	bl	8002a5c <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11d      	bne.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695b      	ldr	r3, [r3, #20]
 8004878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487c:	2b40      	cmp	r3, #64	@ 0x40
 800487e:	d016      	beq.n	80048ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e007      	b.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b8:	2b40      	cmp	r3, #64	@ 0x40
 80048ba:	d1ae      	bne.n	800481a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048dc:	d11b      	bne.n	8004916 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f043 0204 	orr.w	r2, r3, #4
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	bc80      	pop	{r7}
 8004920:	4770      	bx	lr

08004922 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0e8      	b.n	8004b06 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d106      	bne.n	800494e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fd ffeb 	bl	8002924 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2203      	movs	r2, #3
 8004952:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f002 fa98 	bl	8006e96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004970:	f002 fa84 	bl	8006e7c <USB_CoreInit>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e0bf      	b.n	8004b06 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fa9c 	bl	8006eca <USB_SetCurrentMode>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0b0      	b.n	8004b06 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]
 80049a8:	e03e      	b.n	8004a28 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	3311      	adds	r3, #17
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	3310      	adds	r3, #16
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	3313      	adds	r3, #19
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	440b      	add	r3, r1
 80049f4:	3320      	adds	r3, #32
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	440b      	add	r3, r1
 8004a08:	3324      	adds	r3, #36	@ 0x24
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	440b      	add	r3, r1
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	3301      	adds	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	791b      	ldrb	r3, [r3, #4]
 8004a2c:	7bfa      	ldrb	r2, [r7, #15]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d3bb      	bcc.n	80049aa <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	e044      	b.n	8004ac2 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a64:	7bfa      	ldrb	r2, [r7, #15]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	440b      	add	r3, r1
 8004a72:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	440b      	add	r3, r1
 8004a88:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	440b      	add	r3, r1
 8004a9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	791b      	ldrb	r3, [r3, #4]
 8004ac6:	7bfa      	ldrb	r2, [r7, #15]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d3b5      	bcc.n	8004a38 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad6:	f002 fa04 	bl	8006ee2 <USB_DevInit>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e00c      	b.n	8004b06 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f002 fa0c 	bl	8006f1c <USB_DevDisconnect>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e272      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 8087 	beq.w	8004c3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b30:	4b92      	ldr	r3, [pc, #584]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 030c 	and.w	r3, r3, #12
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 030c 	and.w	r3, r3, #12
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
 8004b48:	4b8c      	ldr	r3, [pc, #560]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b54:	d10b      	bne.n	8004b6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b56:	4b89      	ldr	r3, [pc, #548]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d06c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x12c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d168      	bne.n	8004c3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e24c      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b76:	d106      	bne.n	8004b86 <HAL_RCC_OscConfig+0x76>
 8004b78:	4b80      	ldr	r3, [pc, #512]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7f      	ldr	r2, [pc, #508]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e02e      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x98>
 8004b8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a7a      	ldr	r2, [pc, #488]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	4b78      	ldr	r3, [pc, #480]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a77      	ldr	r2, [pc, #476]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e01d      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0xbc>
 8004bb2:	4b72      	ldr	r3, [pc, #456]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a71      	ldr	r2, [pc, #452]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0xd4>
 8004bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b68      	ldr	r3, [pc, #416]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a67      	ldr	r2, [pc, #412]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004be2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d013      	beq.n	8004c14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fd ff36 	bl	8002a5c <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf4:	f7fd ff32 	bl	8002a5c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b64      	cmp	r3, #100	@ 0x64
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e200      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c06:	4b5d      	ldr	r3, [pc, #372]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d0f0      	beq.n	8004bf4 <HAL_RCC_OscConfig+0xe4>
 8004c12:	e014      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd ff22 	bl	8002a5c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fd ff1e 	bl	8002a5c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	@ 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1ec      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2e:	4b53      	ldr	r3, [pc, #332]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x10c>
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d063      	beq.n	8004d12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00b      	beq.n	8004c6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c56:	4b49      	ldr	r3, [pc, #292]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f003 030c 	and.w	r3, r3, #12
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d11c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
 8004c62:	4b46      	ldr	r3, [pc, #280]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d116      	bne.n	8004c9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6e:	4b43      	ldr	r3, [pc, #268]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e1c0      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	4b3d      	ldr	r3, [pc, #244]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4939      	ldr	r1, [pc, #228]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9a:	e03a      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d020      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca4:	4b36      	ldr	r3, [pc, #216]	@ (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004caa:	f7fd fed7 	bl	8002a5c <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb2:	f7fd fed3 	bl	8002a5c <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1a1      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4927      	ldr	r1, [pc, #156]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]
 8004ce4:	e015      	b.n	8004d12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ce6:	4b26      	ldr	r3, [pc, #152]	@ (8004d80 <HAL_RCC_OscConfig+0x270>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fd feb6 	bl	8002a5c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cf4:	f7fd feb2 	bl	8002a5c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e180      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d06:	4b1d      	ldr	r3, [pc, #116]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d03a      	beq.n	8004d94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d019      	beq.n	8004d5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d26:	4b17      	ldr	r3, [pc, #92]	@ (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2c:	f7fd fe96 	bl	8002a5c <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d34:	f7fd fe92 	bl	8002a5c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e160      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <HAL_RCC_OscConfig+0x26c>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d52:	2001      	movs	r0, #1
 8004d54:	f000 face 	bl	80052f4 <RCC_Delay>
 8004d58:	e01c      	b.n	8004d94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d84 <HAL_RCC_OscConfig+0x274>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d60:	f7fd fe7c 	bl	8002a5c <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d66:	e00f      	b.n	8004d88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d68:	f7fd fe78 	bl	8002a5c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d908      	bls.n	8004d88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e146      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	42420000 	.word	0x42420000
 8004d84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d88:	4b92      	ldr	r3, [pc, #584]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e9      	bne.n	8004d68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 80a6 	beq.w	8004eee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da2:	2300      	movs	r3, #0
 8004da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004da6:	4b8b      	ldr	r3, [pc, #556]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	4b88      	ldr	r3, [pc, #544]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	4a87      	ldr	r2, [pc, #540]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dbc:	61d3      	str	r3, [r2, #28]
 8004dbe:	4b85      	ldr	r3, [pc, #532]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dc6:	60bb      	str	r3, [r7, #8]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b82      	ldr	r3, [pc, #520]	@ (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d118      	bne.n	8004e0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dda:	4b7f      	ldr	r3, [pc, #508]	@ (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004de6:	f7fd fe39 	bl	8002a5c <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	e008      	b.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dee:	f7fd fe35 	bl	8002a5c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b64      	cmp	r3, #100	@ 0x64
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e103      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	4b75      	ldr	r3, [pc, #468]	@ (8004fd8 <HAL_RCC_OscConfig+0x4c8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f0      	beq.n	8004dee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d106      	bne.n	8004e22 <HAL_RCC_OscConfig+0x312>
 8004e14:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e1a:	f043 0301 	orr.w	r3, r3, #1
 8004e1e:	6213      	str	r3, [r2, #32]
 8004e20:	e02d      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x334>
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4a69      	ldr	r2, [pc, #420]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6213      	str	r3, [r2, #32]
 8004e36:	4b67      	ldr	r3, [pc, #412]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	4a66      	ldr	r2, [pc, #408]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	6213      	str	r3, [r2, #32]
 8004e42:	e01c      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b05      	cmp	r3, #5
 8004e4a:	d10c      	bne.n	8004e66 <HAL_RCC_OscConfig+0x356>
 8004e4c:	4b61      	ldr	r3, [pc, #388]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a60      	ldr	r2, [pc, #384]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e52:	f043 0304 	orr.w	r3, r3, #4
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	6213      	str	r3, [r2, #32]
 8004e64:	e00b      	b.n	8004e7e <HAL_RCC_OscConfig+0x36e>
 8004e66:	4b5b      	ldr	r3, [pc, #364]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	4a5a      	ldr	r2, [pc, #360]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	6213      	str	r3, [r2, #32]
 8004e72:	4b58      	ldr	r3, [pc, #352]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	4a57      	ldr	r2, [pc, #348]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	f023 0304 	bic.w	r3, r3, #4
 8004e7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d015      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e86:	f7fd fde9 	bl	8002a5c <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8e:	f7fd fde5 	bl	8002a5c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e0b1      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ee      	beq.n	8004e8e <HAL_RCC_OscConfig+0x37e>
 8004eb0:	e014      	b.n	8004edc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fd fdd3 	bl	8002a5c <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eba:	f7fd fdcf 	bl	8002a5c <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e09b      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	4b40      	ldr	r3, [pc, #256]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ee      	bne.n	8004eba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8087 	beq.w	8005006 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef8:	4b36      	ldr	r3, [pc, #216]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 030c 	and.w	r3, r3, #12
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d061      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d146      	bne.n	8004f9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0c:	4b33      	ldr	r3, [pc, #204]	@ (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7fd fda3 	bl	8002a5c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fd fd9f 	bl	8002a5c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e06d      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2c:	4b29      	ldr	r3, [pc, #164]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f40:	d108      	bne.n	8004f54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f42:	4b24      	ldr	r3, [pc, #144]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	4921      	ldr	r1, [pc, #132]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a19      	ldr	r1, [r3, #32]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f64:	430b      	orrs	r3, r1
 8004f66:	491b      	ldr	r1, [pc, #108]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f6e:	2201      	movs	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f72:	f7fd fd73 	bl	8002a5c <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fd fd6f 	bl	8002a5c <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e03d      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f8c:	4b11      	ldr	r3, [pc, #68]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0f0      	beq.n	8004f7a <HAL_RCC_OscConfig+0x46a>
 8004f98:	e035      	b.n	8005006 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9a:	4b10      	ldr	r3, [pc, #64]	@ (8004fdc <HAL_RCC_OscConfig+0x4cc>)
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd fd5c 	bl	8002a5c <HAL_GetTick>
 8004fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fa6:	e008      	b.n	8004fba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fa8:	f7fd fd58 	bl	8002a5c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d901      	bls.n	8004fba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e026      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <HAL_RCC_OscConfig+0x4c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d1f0      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x498>
 8004fc6:	e01e      	b.n	8005006 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e019      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	40007000 	.word	0x40007000
 8004fdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_RCC_OscConfig+0x500>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d106      	bne.n	8005002 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d001      	beq.n	8005006 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000

08005014 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0d0      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b6a      	ldr	r3, [pc, #424]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d910      	bls.n	8005058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b67      	ldr	r3, [pc, #412]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f023 0207 	bic.w	r2, r3, #7
 800503e:	4965      	ldr	r1, [pc, #404]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b63      	ldr	r3, [pc, #396]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0b8      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d020      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005070:	4b59      	ldr	r3, [pc, #356]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4a58      	ldr	r2, [pc, #352]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005076:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800507a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005088:	4b53      	ldr	r3, [pc, #332]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a52      	ldr	r2, [pc, #328]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005092:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005094:	4b50      	ldr	r3, [pc, #320]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	494d      	ldr	r1, [pc, #308]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d040      	beq.n	8005134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d107      	bne.n	80050ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ba:	4b47      	ldr	r3, [pc, #284]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d115      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07f      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b41      	ldr	r3, [pc, #260]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e073      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e2:	4b3d      	ldr	r3, [pc, #244]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e06b      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b39      	ldr	r3, [pc, #228]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4936      	ldr	r1, [pc, #216]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005100:	4313      	orrs	r3, r2
 8005102:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7fd fcaa 	bl	8002a5c <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fd fca6 	bl	8002a5c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e053      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005134:	4b27      	ldr	r3, [pc, #156]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d210      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f023 0207 	bic.w	r2, r3, #7
 800514a:	4922      	ldr	r1, [pc, #136]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	4313      	orrs	r3, r2
 8005150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005152:	4b20      	ldr	r3, [pc, #128]	@ (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d001      	beq.n	8005164 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d008      	beq.n	8005182 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b19      	ldr	r3, [pc, #100]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4916      	ldr	r1, [pc, #88]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800517e:	4313      	orrs	r3, r2
 8005180:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800518e:	4b12      	ldr	r3, [pc, #72]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	490e      	ldr	r1, [pc, #56]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a2:	f000 f821 	bl	80051e8 <HAL_RCC_GetSysClockFreq>
 80051a6:	4602      	mov	r2, r0
 80051a8:	4b0b      	ldr	r3, [pc, #44]	@ (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	490a      	ldr	r1, [pc, #40]	@ (80051dc <HAL_RCC_ClockConfig+0x1c8>)
 80051b4:	5ccb      	ldrb	r3, [r1, r3]
 80051b6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ba:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <HAL_RCC_ClockConfig+0x1cc>)
 80051bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051be:	4b09      	ldr	r3, [pc, #36]	@ (80051e4 <HAL_RCC_ClockConfig+0x1d0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fd fc08 	bl	80029d8 <HAL_InitTick>

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	40022000 	.word	0x40022000
 80051d8:	40021000 	.word	0x40021000
 80051dc:	0800a9e8 	.word	0x0800a9e8
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	20000010 	.word	0x20000010

080051e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005202:	4b1e      	ldr	r3, [pc, #120]	@ (800527c <HAL_RCC_GetSysClockFreq+0x94>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 030c 	and.w	r3, r3, #12
 800520e:	2b04      	cmp	r3, #4
 8005210:	d002      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0x30>
 8005212:	2b08      	cmp	r3, #8
 8005214:	d003      	beq.n	800521e <HAL_RCC_GetSysClockFreq+0x36>
 8005216:	e027      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005218:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x98>)
 800521a:	613b      	str	r3, [r7, #16]
      break;
 800521c:	e027      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	0c9b      	lsrs	r3, r3, #18
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	4a17      	ldr	r2, [pc, #92]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005228:	5cd3      	ldrb	r3, [r2, r3]
 800522a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d010      	beq.n	8005258 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005236:	4b11      	ldr	r3, [pc, #68]	@ (800527c <HAL_RCC_GetSysClockFreq+0x94>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	0c5b      	lsrs	r3, r3, #17
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	4a11      	ldr	r2, [pc, #68]	@ (8005288 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a0d      	ldr	r2, [pc, #52]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x98>)
 800524a:	fb03 f202 	mul.w	r2, r3, r2
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	fbb2 f3f3 	udiv	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	e004      	b.n	8005262 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a0c      	ldr	r2, [pc, #48]	@ (800528c <HAL_RCC_GetSysClockFreq+0xa4>)
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	613b      	str	r3, [r7, #16]
      break;
 8005266:	e002      	b.n	800526e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x98>)
 800526a:	613b      	str	r3, [r7, #16]
      break;
 800526c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800526e:	693b      	ldr	r3, [r7, #16]
}
 8005270:	4618      	mov	r0, r3
 8005272:	371c      	adds	r7, #28
 8005274:	46bd      	mov	sp, r7
 8005276:	bc80      	pop	{r7}
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40021000 	.word	0x40021000
 8005280:	007a1200 	.word	0x007a1200
 8005284:	0800aa00 	.word	0x0800aa00
 8005288:	0800aa10 	.word	0x0800aa10
 800528c:	003d0900 	.word	0x003d0900

08005290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005294:	4b02      	ldr	r3, [pc, #8]	@ (80052a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005296:	681b      	ldr	r3, [r3, #0]
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052a8:	f7ff fff2 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	@ (80052c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	@ (80052c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	40021000 	.word	0x40021000
 80052c8:	0800a9f8 	.word	0x0800a9f8

080052cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052d0:	f7ff ffde 	bl	8005290 <HAL_RCC_GetHCLKFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b05      	ldr	r3, [pc, #20]	@ (80052ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	0adb      	lsrs	r3, r3, #11
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	4903      	ldr	r1, [pc, #12]	@ (80052f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e2:	5ccb      	ldrb	r3, [r1, r3]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40021000 	.word	0x40021000
 80052f0:	0800a9f8 	.word	0x0800a9f8

080052f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005328 <RCC_Delay+0x34>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0a      	ldr	r2, [pc, #40]	@ (800532c <RCC_Delay+0x38>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	0a5b      	lsrs	r3, r3, #9
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005310:	bf00      	nop
  }
  while (Delay --);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1e5a      	subs	r2, r3, #1
 8005316:	60fa      	str	r2, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1f9      	bne.n	8005310 <RCC_Delay+0x1c>
}
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr
 8005328:	2000000c 	.word	0x2000000c
 800532c:	10624dd3 	.word	0x10624dd3

08005330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	2300      	movs	r3, #0
 800533e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d07d      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800534c:	2300      	movs	r3, #0
 800534e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005350:	4b4f      	ldr	r3, [pc, #316]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10d      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800535c:	4b4c      	ldr	r3, [pc, #304]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4a4b      	ldr	r2, [pc, #300]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005366:	61d3      	str	r3, [r2, #28]
 8005368:	4b49      	ldr	r3, [pc, #292]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005374:	2301      	movs	r3, #1
 8005376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005378:	4b46      	ldr	r3, [pc, #280]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d118      	bne.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005384:	4b43      	ldr	r3, [pc, #268]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a42      	ldr	r2, [pc, #264]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800538a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800538e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005390:	f7fd fb64 	bl	8002a5c <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005396:	e008      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005398:	f7fd fb60 	bl	8002a5c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b64      	cmp	r3, #100	@ 0x64
 80053a4:	d901      	bls.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e06d      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d02e      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d027      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053d4:	4b2e      	ldr	r3, [pc, #184]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053de:	4b2e      	ldr	r3, [pc, #184]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053ea:	4a29      	ldr	r2, [pc, #164]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fd fb2f 	bl	8002a5c <HAL_GetTick>
 80053fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005400:	e00a      	b.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005402:	f7fd fb2b 	bl	8002a5c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e036      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005418:	4b1d      	ldr	r3, [pc, #116]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0ee      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005424:	4b1a      	ldr	r3, [pc, #104]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	4917      	ldr	r1, [pc, #92]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005432:	4313      	orrs	r3, r2
 8005434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005436:	7dfb      	ldrb	r3, [r7, #23]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d105      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800543c:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	4a13      	ldr	r2, [pc, #76]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005454:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	490b      	ldr	r1, [pc, #44]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005462:	4313      	orrs	r3, r2
 8005464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0310 	and.w	r3, r3, #16
 800546e:	2b00      	cmp	r3, #0
 8005470:	d008      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005472:	4b07      	ldr	r3, [pc, #28]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	4904      	ldr	r1, [pc, #16]	@ (8005490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005480:	4313      	orrs	r3, r2
 8005482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40021000 	.word	0x40021000
 8005494:	40007000 	.word	0x40007000
 8005498:	42420440 	.word	0x42420440

0800549c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e041      	b.n	8005532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd f810 	bl	80024e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 fc7c 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b01      	cmp	r3, #1
 800554e:	d001      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e03a      	b.n	80055ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a18      	ldr	r2, [pc, #96]	@ (80055d4 <HAL_TIM_Base_Start_IT+0x98>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x58>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557e:	d009      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x58>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a14      	ldr	r2, [pc, #80]	@ (80055d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0x58>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <HAL_TIM_Base_Start_IT+0xa0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d111      	bne.n	80055b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b06      	cmp	r3, #6
 80055a4:	d010      	beq.n	80055c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f042 0201 	orr.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b6:	e007      	b.n	80055c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f042 0201 	orr.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800

080055e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e041      	b.n	8005676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f839 	bl	800567e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2202      	movs	r2, #2
 8005610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f000 fbda 	bl	8005dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3708      	adds	r7, #8
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800567e:	b480      	push	{r7}
 8005680:	b083      	sub	sp, #12
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	bc80      	pop	{r7}
 800568e:	4770      	bx	lr

08005690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_TIM_PWM_Start+0x24>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e022      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d109      	bne.n	80056ce <HAL_TIM_PWM_Start+0x3e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e015      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start+0x58>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e008      	b.n	80056fa <HAL_TIM_PWM_Start+0x6a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e05e      	b.n	80057c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d104      	bne.n	8005712 <HAL_TIM_PWM_Start+0x82>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005710:	e013      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b04      	cmp	r3, #4
 8005716:	d104      	bne.n	8005722 <HAL_TIM_PWM_Start+0x92>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005720:	e00b      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b08      	cmp	r3, #8
 8005726:	d104      	bne.n	8005732 <HAL_TIM_PWM_Start+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005730:	e003      	b.n	800573a <HAL_TIM_PWM_Start+0xaa>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2201      	movs	r2, #1
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fdd4 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <HAL_TIM_PWM_Start+0x138>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d107      	bne.n	8005762 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a18      	ldr	r2, [pc, #96]	@ (80057c8 <HAL_TIM_PWM_Start+0x138>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_TIM_PWM_Start+0xfa>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d009      	beq.n	800578a <HAL_TIM_PWM_Start+0xfa>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <HAL_TIM_PWM_Start+0x13c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_TIM_PWM_Start+0xfa>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a12      	ldr	r2, [pc, #72]	@ (80057d0 <HAL_TIM_PWM_Start+0x140>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d111      	bne.n	80057ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b06      	cmp	r3, #6
 800579a:	d010      	beq.n	80057be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	e007      	b.n	80057be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800

080057d4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2200      	movs	r2, #0
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fd82 	bl	80062f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a29      	ldr	r2, [pc, #164]	@ (8005898 <HAL_TIM_PWM_Stop+0xc4>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d117      	bne.n	8005826 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a1a      	ldr	r2, [r3, #32]
 80057fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <HAL_TIM_PWM_Stop+0x52>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a1a      	ldr	r2, [r3, #32]
 800580c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005810:	4013      	ands	r3, r2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_TIM_PWM_Stop+0x52>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005830:	4013      	ands	r3, r2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10f      	bne.n	8005856 <HAL_TIM_PWM_Stop+0x82>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a1a      	ldr	r2, [r3, #32]
 800583c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <HAL_TIM_PWM_Stop+0x82>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Stop+0x92>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005864:	e013      	b.n	800588e <HAL_TIM_PWM_Stop+0xba>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d104      	bne.n	8005876 <HAL_TIM_PWM_Stop+0xa2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005874:	e00b      	b.n	800588e <HAL_TIM_PWM_Stop+0xba>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d104      	bne.n	8005886 <HAL_TIM_PWM_Stop+0xb2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005884:	e003      	b.n	800588e <HAL_TIM_PWM_Stop+0xba>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40012c00 	.word	0x40012c00

0800589c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d020      	beq.n	8005900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f003 0302 	and.w	r3, r3, #2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01b      	beq.n	8005900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f06f 0202 	mvn.w	r2, #2
 80058d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d003      	beq.n	80058ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fa5a 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 80058ec:	e005      	b.n	80058fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa4d 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fa5c 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d020      	beq.n	800594c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01b      	beq.n	800594c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0204 	mvn.w	r2, #4
 800591c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa34 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005938:	e005      	b.n	8005946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fa27 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fa36 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	f003 0308 	and.w	r3, r3, #8
 8005952:	2b00      	cmp	r3, #0
 8005954:	d020      	beq.n	8005998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01b      	beq.n	8005998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0208 	mvn.w	r2, #8
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2204      	movs	r2, #4
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0303 	and.w	r3, r3, #3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa0e 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa01 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fa10 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	f003 0310 	and.w	r3, r3, #16
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d020      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01b      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2208      	movs	r2, #8
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9e8 	bl	8005da0 <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9db 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f9ea 	bl	8005db2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f06f 0201 	mvn.w	r2, #1
 8005a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fb ff6c 	bl	80018e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00c      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fced 	bl	8006406 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00c      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f9ba 	bl	8005dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00c      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0220 	mvn.w	r2, #32
 8005a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fcc0 	bl	80063f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e0ae      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	f200 809f 	bhi.w	8005be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005be9 	.word	0x08005be9
 8005ab8:	08005be9 	.word	0x08005be9
 8005abc:	08005be9 	.word	0x08005be9
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005be9 	.word	0x08005be9
 8005ac8:	08005be9 	.word	0x08005be9
 8005acc:	08005be9 	.word	0x08005be9
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005be9 	.word	0x08005be9
 8005ad8:	08005be9 	.word	0x08005be9
 8005adc:	08005be9 	.word	0x08005be9
 8005ae0:	08005ba7 	.word	0x08005ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f9e2 	bl	8005eb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	619a      	str	r2, [r3, #24]
      break;
 8005b22:	e064      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fa28 	bl	8005f80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6999      	ldr	r1, [r3, #24]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	619a      	str	r2, [r3, #24]
      break;
 8005b64:	e043      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fa71 	bl	8006054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0208 	orr.w	r2, r2, #8
 8005b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0204 	bic.w	r2, r2, #4
 8005b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69d9      	ldr	r1, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	61da      	str	r2, [r3, #28]
      break;
 8005ba4:	e023      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fabb 	bl	8006128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	61da      	str	r2, [r3, #28]
      break;
 8005be6:	e002      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
      break;
 8005bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b4      	b.n	8005d86 <HAL_TIM_ConfigClockSource+0x186>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c54:	d03e      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5a:	f200 8087 	bhi.w	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c62:	f000 8086 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x172>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	d87f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b70      	cmp	r3, #112	@ 0x70
 8005c6e:	d01a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c70:	2b70      	cmp	r3, #112	@ 0x70
 8005c72:	d87b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b60      	cmp	r3, #96	@ 0x60
 8005c76:	d050      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x11a>
 8005c78:	2b60      	cmp	r3, #96	@ 0x60
 8005c7a:	d877      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b50      	cmp	r3, #80	@ 0x50
 8005c7e:	d03c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xfa>
 8005c80:	2b50      	cmp	r3, #80	@ 0x50
 8005c82:	d873      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d058      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x13a>
 8005c88:	2b40      	cmp	r3, #64	@ 0x40
 8005c8a:	d86f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d064      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	2b30      	cmp	r3, #48	@ 0x30
 8005c92:	d86b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d060      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d867      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d05a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	e062      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	f000 fafc 	bl	80062b2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	609a      	str	r2, [r3, #8]
      break;
 8005cd2:	e04f      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	f000 fae5 	bl	80062b2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cf6:	609a      	str	r2, [r3, #8]
      break;
 8005cf8:	e03c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 fa5c 	bl	80061c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2150      	movs	r1, #80	@ 0x50
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fab3 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005d18:	e02c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 fa7a 	bl	8006220 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2160      	movs	r1, #96	@ 0x60
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 faa3 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005d38:	e01c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 fa3c 	bl	80061c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2140      	movs	r1, #64	@ 0x40
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fa93 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005d58:	e00c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 fa8a 	bl	800627e <TIM_ITRx_SetConfig>
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bc80      	pop	{r7}
 8005dd4:	4770      	bx	lr
	...

08005dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea8 <TIM_Base_SetConfig+0xd0>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0x30>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0x30>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <TIM_Base_SetConfig+0xd4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0x30>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb0 <TIM_Base_SetConfig+0xd8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d108      	bne.n	8005e1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ea8 <TIM_Base_SetConfig+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00b      	beq.n	8005e3a <TIM_Base_SetConfig+0x62>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e28:	d007      	beq.n	8005e3a <TIM_Base_SetConfig+0x62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <TIM_Base_SetConfig+0xd4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d003      	beq.n	8005e3a <TIM_Base_SetConfig+0x62>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb0 <TIM_Base_SetConfig+0xd8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d108      	bne.n	8005e4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	689a      	ldr	r2, [r3, #8]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ea8 <TIM_Base_SetConfig+0xd0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d103      	bne.n	8005e80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	611a      	str	r2, [r3, #16]
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800

08005eb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0201 	bic.w	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0302 	bic.w	r3, r3, #2
 8005efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <TIM_OC1_SetConfig+0xc8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0308 	bic.w	r3, r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	@ (8005f7c <TIM_OC1_SetConfig+0xc8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d111      	bne.n	8005f56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	621a      	str	r2, [r3, #32]
}
 8005f70:	bf00      	nop
 8005f72:	371c      	adds	r7, #28
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	40012c00 	.word	0x40012c00

08005f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	f023 0210 	bic.w	r2, r3, #16
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	021b      	lsls	r3, r3, #8
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0320 	bic.w	r3, r3, #32
 8005fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <TIM_OC2_SetConfig+0xd0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10d      	bne.n	8005ffc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ffa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a14      	ldr	r2, [pc, #80]	@ (8006050 <TIM_OC2_SetConfig+0xd0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d113      	bne.n	800602c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800600a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006012:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	621a      	str	r2, [r3, #32]
}
 8006046:	bf00      	nop
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00

08006054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800609c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006124 <TIM_OC3_SetConfig+0xd0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d10d      	bne.n	80060ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a14      	ldr	r2, [pc, #80]	@ (8006124 <TIM_OC3_SetConfig+0xd0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d113      	bne.n	80060fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00

08006128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a1b      	ldr	r3, [r3, #32]
 800613c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	031b      	lsls	r3, r3, #12
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a0f      	ldr	r2, [pc, #60]	@ (80061c0 <TIM_OC4_SetConfig+0x98>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d109      	bne.n	800619c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800618e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	bf00      	nop
 80061b8:	371c      	adds	r7, #28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc80      	pop	{r7}
 80061be:	4770      	bx	lr
 80061c0:	40012c00 	.word	0x40012c00

080061c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f023 0201 	bic.w	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	011b      	lsls	r3, r3, #4
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f023 030a 	bic.w	r3, r3, #10
 8006200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	bc80      	pop	{r7}
 800621e:	4770      	bx	lr

08006220 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006220:	b480      	push	{r7}
 8006222:	b087      	sub	sp, #28
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	f023 0210 	bic.w	r2, r3, #16
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800624a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	031b      	lsls	r3, r3, #12
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800625c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	621a      	str	r2, [r3, #32]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	bc80      	pop	{r7}
 800627c:	4770      	bx	lr

0800627e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	f043 0307 	orr.w	r3, r3, #7
 80062a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	609a      	str	r2, [r3, #8]
}
 80062a8:	bf00      	nop
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bc80      	pop	{r7}
 80062b0:	4770      	bx	lr

080062b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b087      	sub	sp, #28
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80062cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	021a      	lsls	r2, r3, #8
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	4313      	orrs	r3, r2
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	609a      	str	r2, [r3, #8]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 031f 	and.w	r3, r3, #31
 8006302:	2201      	movs	r2, #1
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1a      	ldr	r2, [r3, #32]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	43db      	mvns	r3, r3
 8006312:	401a      	ands	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f003 031f 	and.w	r3, r3, #31
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	fa01 f303 	lsl.w	r3, r1, r3
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	bc80      	pop	{r7}
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800634c:	2302      	movs	r3, #2
 800634e:	e046      	b.n	80063de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a16      	ldr	r2, [pc, #88]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00e      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800639c:	d009      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a12      	ldr	r2, [pc, #72]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d004      	beq.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a10      	ldr	r2, [pc, #64]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d10c      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr
 80063e8:	40012c00 	.word	0x40012c00
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800

080063f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800640e:	bf00      	nop
 8006410:	370c      	adds	r7, #12
 8006412:	46bd      	mov	sp, r7
 8006414:	bc80      	pop	{r7}
 8006416:	4770      	bx	lr

08006418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e042      	b.n	80064b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fc f962 	bl	8002708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2224      	movs	r2, #36	@ 0x24
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800645a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fc7f 	bl	8006d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b0ba      	sub	sp, #232	@ 0xe8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
 80064da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80064de:	2300      	movs	r3, #0
 80064e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80064f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10f      	bne.n	800651e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <HAL_UART_IRQHandler+0x66>
 800650a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fb63 	bl	8006be2 <UART_Receive_IT>
      return;
 800651c:	e25b      	b.n	80069d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800651e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80de 	beq.w	80066e4 <HAL_UART_IRQHandler+0x22c>
 8006528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80d1 	beq.w	80066e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00b      	beq.n	8006566 <HAL_UART_IRQHandler+0xae>
 800654e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d005      	beq.n	8006566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	f043 0201 	orr.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00b      	beq.n	800658a <HAL_UART_IRQHandler+0xd2>
 8006572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	f043 0202 	orr.w	r2, r3, #2
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <HAL_UART_IRQHandler+0xf6>
 8006596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a6:	f043 0204 	orr.w	r2, r3, #4
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b2:	f003 0308 	and.w	r3, r3, #8
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <HAL_UART_IRQHandler+0x126>
 80065ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d005      	beq.n	80065de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d6:	f043 0208 	orr.w	r2, r3, #8
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 81f2 	beq.w	80069cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d008      	beq.n	8006606 <HAL_UART_IRQHandler+0x14e>
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 faee 	bl	8006be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006610:	2b00      	cmp	r3, #0
 8006612:	bf14      	ite	ne
 8006614:	2301      	movne	r3, #1
 8006616:	2300      	moveq	r3, #0
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d103      	bne.n	8006632 <HAL_UART_IRQHandler+0x17a>
 800662a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04f      	beq.n	80066d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f9f8 	bl	8006a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d041      	beq.n	80066ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006654:	e853 3f00 	ldrex	r3, [r3]
 8006658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800665c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800667e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800668a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1d9      	bne.n	8006646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d013      	beq.n	80066c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669e:	4a7e      	ldr	r2, [pc, #504]	@ (8006898 <HAL_UART_IRQHandler+0x3e0>)
 80066a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fc fdbc 	bl	8003224 <HAL_DMA_Abort_IT>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d016      	beq.n	80066e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80066bc:	4610      	mov	r0, r2
 80066be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	e00e      	b.n	80066e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f99c 	bl	8006a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c8:	e00a      	b.n	80066e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f998 	bl	8006a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d0:	e006      	b.n	80066e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f994 	bl	8006a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80066de:	e175      	b.n	80069cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e0:	bf00      	nop
    return;
 80066e2:	e173      	b.n	80069cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 814f 	bne.w	800698c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8148 	beq.w	800698c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8141 	beq.w	800698c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800670a:	2300      	movs	r3, #0
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80b6 	beq.w	800689c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800673c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8145 	beq.w	80069d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800674a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800674e:	429a      	cmp	r2, r3
 8006750:	f080 813e 	bcs.w	80069d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800675a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	2b20      	cmp	r3, #32
 8006764:	f000 8088 	beq.w	8006878 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	330c      	adds	r3, #12
 800676e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006776:	e853 3f00 	ldrex	r3, [r3]
 800677a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800677e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006782:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006786:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006794:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006798:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80067a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1d9      	bne.n	8006768 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	3314      	adds	r3, #20
 80067ba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067c6:	f023 0301 	bic.w	r3, r3, #1
 80067ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3314      	adds	r3, #20
 80067d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067d8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e1      	bne.n	80067b4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3314      	adds	r3, #20
 80067f6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006806:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3314      	adds	r3, #20
 8006810:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006814:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006816:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800681a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e3      	bne.n	80067f0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2220      	movs	r2, #32
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	330c      	adds	r3, #12
 800683c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006840:	e853 3f00 	ldrex	r3, [r3]
 8006844:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006848:	f023 0310 	bic.w	r3, r3, #16
 800684c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800685a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800685c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006862:	e841 2300 	strex	r3, r2, [r1]
 8006866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1e3      	bne.n	8006836 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006872:	4618      	mov	r0, r3
 8006874:	f7fc fc9a 	bl	80031ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2202      	movs	r2, #2
 800687c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006886:	b29b      	uxth	r3, r3
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	b29b      	uxth	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f8bf 	bl	8006a12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006894:	e09c      	b.n	80069d0 <HAL_UART_IRQHandler+0x518>
 8006896:	bf00      	nop
 8006898:	08006aed 	.word	0x08006aed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 808e 	beq.w	80069d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80068b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8089 	beq.w	80069d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	330c      	adds	r3, #12
 80068c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80068e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80068e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80068f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e3      	bne.n	80068c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3314      	adds	r3, #20
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	623b      	str	r3, [r7, #32]
   return(result);
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	3314      	adds	r3, #20
 800691a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800691e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	330c      	adds	r3, #12
 8006946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 0310 	bic.w	r3, r3, #16
 8006956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	330c      	adds	r3, #12
 8006960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006964:	61fa      	str	r2, [r7, #28]
 8006966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	69b9      	ldr	r1, [r7, #24]
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	617b      	str	r3, [r7, #20]
   return(result);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e3      	bne.n	8006940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800697e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 f844 	bl	8006a12 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800698a:	e023      	b.n	80069d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006994:	2b00      	cmp	r3, #0
 8006996:	d009      	beq.n	80069ac <HAL_UART_IRQHandler+0x4f4>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d003      	beq.n	80069ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f8b5 	bl	8006b14 <UART_Transmit_IT>
    return;
 80069aa:	e014      	b.n	80069d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <HAL_UART_IRQHandler+0x51e>
 80069b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f8f4 	bl	8006bb2 <UART_EndTransmit_IT>
    return;
 80069ca:	e004      	b.n	80069d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80069d4:	bf00      	nop
  }
}
 80069d6:	37e8      	adds	r7, #232	@ 0xe8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b083      	sub	sp, #12
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bc80      	pop	{r7}
 8006a26:	4770      	bx	lr

08006a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b095      	sub	sp, #84	@ 0x54
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a50:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e5      	bne.n	8006a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f023 0301 	bic.w	r3, r3, #1
 8006a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3314      	adds	r3, #20
 8006a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e5      	bne.n	8006a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d119      	bne.n	8006ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	330c      	adds	r3, #12
 8006aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f023 0310 	bic.w	r3, r3, #16
 8006ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ac0:	61ba      	str	r2, [r7, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e5      	bne.n	8006aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ae2:	bf00      	nop
 8006ae4:	3754      	adds	r7, #84	@ 0x54
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff ff7a 	bl	8006a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b21      	cmp	r3, #33	@ 0x21
 8006b26:	d13e      	bne.n	8006ba6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b30:	d114      	bne.n	8006b5c <UART_Transmit_IT+0x48>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d110      	bne.n	8006b5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	881b      	ldrh	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	1c9a      	adds	r2, r3, #2
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	621a      	str	r2, [r3, #32]
 8006b5a:	e008      	b.n	8006b6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a1b      	ldr	r3, [r3, #32]
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6211      	str	r1, [r2, #32]
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10f      	bne.n	8006ba2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
  }
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ff02 	bl	80069dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b08c      	sub	sp, #48	@ 0x30
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b22      	cmp	r3, #34	@ 0x22
 8006bf4:	f040 80ae 	bne.w	8006d54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c00:	d117      	bne.n	8006c32 <UART_Receive_IT+0x50>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d113      	bne.n	8006c32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c30:	e026      	b.n	8006c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c44:	d007      	beq.n	8006c56 <UART_Receive_IT+0x74>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <UART_Receive_IT+0x82>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	701a      	strb	r2, [r3, #0]
 8006c62:	e008      	b.n	8006c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d15d      	bne.n	8006d50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0220 	bic.w	r2, r2, #32
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d135      	bne.n	8006d46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	e853 3f00 	ldrex	r3, [r3]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f023 0310 	bic.w	r3, r3, #16
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d00:	623a      	str	r2, [r7, #32]
 8006d02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d04:	69f9      	ldr	r1, [r7, #28]
 8006d06:	6a3a      	ldr	r2, [r7, #32]
 8006d08:	e841 2300 	strex	r3, r2, [r1]
 8006d0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1e5      	bne.n	8006ce0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0310 	and.w	r3, r3, #16
 8006d1e:	2b10      	cmp	r3, #16
 8006d20:	d10a      	bne.n	8006d38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe67 	bl	8006a12 <HAL_UARTEx_RxEventCallback>
 8006d44:	e002      	b.n	8006d4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7ff fe51 	bl	80069ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e002      	b.n	8006d56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	e000      	b.n	8006d56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
  }
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3730      	adds	r7, #48	@ 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68da      	ldr	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	431a      	orrs	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006d9a:	f023 030c 	bic.w	r3, r3, #12
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	430b      	orrs	r3, r1
 8006da6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006e74 <UART_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d103      	bne.n	8006dd0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fe fa80 	bl	80052cc <HAL_RCC_GetPCLK2Freq>
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	e002      	b.n	8006dd6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006dd0:	f7fe fa68 	bl	80052a4 <HAL_RCC_GetPCLK1Freq>
 8006dd4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009a      	lsls	r2, r3, #2
 8006de0:	441a      	add	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	4a22      	ldr	r2, [pc, #136]	@ (8006e78 <UART_SetConfig+0x118>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	0119      	lsls	r1, r3, #4
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009a      	lsls	r2, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006e78 <UART_SetConfig+0x118>)
 8006e0e:	fba3 0302 	umull	r0, r3, r3, r2
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	2064      	movs	r0, #100	@ 0x64
 8006e16:	fb00 f303 	mul.w	r3, r0, r3
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	3332      	adds	r3, #50	@ 0x32
 8006e20:	4a15      	ldr	r2, [pc, #84]	@ (8006e78 <UART_SetConfig+0x118>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e2c:	4419      	add	r1, r3
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009a      	lsls	r2, r3, #2
 8006e38:	441a      	add	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e44:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <UART_SetConfig+0x118>)
 8006e46:	fba3 0302 	umull	r0, r3, r3, r2
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	2064      	movs	r0, #100	@ 0x64
 8006e4e:	fb00 f303 	mul.w	r3, r0, r3
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	3332      	adds	r3, #50	@ 0x32
 8006e58:	4a07      	ldr	r2, [pc, #28]	@ (8006e78 <UART_SetConfig+0x118>)
 8006e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5e:	095b      	lsrs	r3, r3, #5
 8006e60:	f003 020f 	and.w	r2, r3, #15
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	440a      	add	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40013800 	.word	0x40013800
 8006e78:	51eb851f 	.word	0x51eb851f

08006e7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	4638      	mov	r0, r7
 8006e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bc80      	pop	{r7}
 8006e94:	4770      	bx	lr

08006e96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006e96:	b480      	push	{r7}
 8006e98:	b085      	sub	sp, #20
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006e9e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006ea2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bc80      	pop	{r7}
 8006ec8:	4770      	bx	lr

08006eca <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bc80      	pop	{r7}
 8006ee0:	4770      	bx	lr

08006ee2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b085      	sub	sp, #20
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	4638      	mov	r0, r7
 8006eec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr

08006f1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr

08006f30 <__cvt>:
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f36:	461d      	mov	r5, r3
 8006f38:	bfbb      	ittet	lt
 8006f3a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006f3e:	461d      	movlt	r5, r3
 8006f40:	2300      	movge	r3, #0
 8006f42:	232d      	movlt	r3, #45	@ 0x2d
 8006f44:	b088      	sub	sp, #32
 8006f46:	4614      	mov	r4, r2
 8006f48:	bfb8      	it	lt
 8006f4a:	4614      	movlt	r4, r2
 8006f4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006f4e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006f50:	7013      	strb	r3, [r2, #0]
 8006f52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006f54:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006f58:	f023 0820 	bic.w	r8, r3, #32
 8006f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f60:	d005      	beq.n	8006f6e <__cvt+0x3e>
 8006f62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f66:	d100      	bne.n	8006f6a <__cvt+0x3a>
 8006f68:	3601      	adds	r6, #1
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e000      	b.n	8006f70 <__cvt+0x40>
 8006f6e:	2303      	movs	r3, #3
 8006f70:	aa07      	add	r2, sp, #28
 8006f72:	9204      	str	r2, [sp, #16]
 8006f74:	aa06      	add	r2, sp, #24
 8006f76:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f7a:	e9cd 3600 	strd	r3, r6, [sp]
 8006f7e:	4622      	mov	r2, r4
 8006f80:	462b      	mov	r3, r5
 8006f82:	f000 fe4d 	bl	8007c20 <_dtoa_r>
 8006f86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f8a:	4607      	mov	r7, r0
 8006f8c:	d119      	bne.n	8006fc2 <__cvt+0x92>
 8006f8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f90:	07db      	lsls	r3, r3, #31
 8006f92:	d50e      	bpl.n	8006fb2 <__cvt+0x82>
 8006f94:	eb00 0906 	add.w	r9, r0, r6
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8006fa4:	b108      	cbz	r0, 8006faa <__cvt+0x7a>
 8006fa6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006faa:	2230      	movs	r2, #48	@ 0x30
 8006fac:	9b07      	ldr	r3, [sp, #28]
 8006fae:	454b      	cmp	r3, r9
 8006fb0:	d31e      	bcc.n	8006ff0 <__cvt+0xc0>
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	9b07      	ldr	r3, [sp, #28]
 8006fb6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006fb8:	1bdb      	subs	r3, r3, r7
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	b008      	add	sp, #32
 8006fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fc6:	eb00 0906 	add.w	r9, r0, r6
 8006fca:	d1e5      	bne.n	8006f98 <__cvt+0x68>
 8006fcc:	7803      	ldrb	r3, [r0, #0]
 8006fce:	2b30      	cmp	r3, #48	@ 0x30
 8006fd0:	d10a      	bne.n	8006fe8 <__cvt+0xb8>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	4620      	mov	r0, r4
 8006fd8:	4629      	mov	r1, r5
 8006fda:	f7f9 fce5 	bl	80009a8 <__aeabi_dcmpeq>
 8006fde:	b918      	cbnz	r0, 8006fe8 <__cvt+0xb8>
 8006fe0:	f1c6 0601 	rsb	r6, r6, #1
 8006fe4:	f8ca 6000 	str.w	r6, [sl]
 8006fe8:	f8da 3000 	ldr.w	r3, [sl]
 8006fec:	4499      	add	r9, r3
 8006fee:	e7d3      	b.n	8006f98 <__cvt+0x68>
 8006ff0:	1c59      	adds	r1, r3, #1
 8006ff2:	9107      	str	r1, [sp, #28]
 8006ff4:	701a      	strb	r2, [r3, #0]
 8006ff6:	e7d9      	b.n	8006fac <__cvt+0x7c>

08006ff8 <__exponent>:
 8006ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffa:	2900      	cmp	r1, #0
 8006ffc:	bfb6      	itet	lt
 8006ffe:	232d      	movlt	r3, #45	@ 0x2d
 8007000:	232b      	movge	r3, #43	@ 0x2b
 8007002:	4249      	neglt	r1, r1
 8007004:	2909      	cmp	r1, #9
 8007006:	7002      	strb	r2, [r0, #0]
 8007008:	7043      	strb	r3, [r0, #1]
 800700a:	dd29      	ble.n	8007060 <__exponent+0x68>
 800700c:	f10d 0307 	add.w	r3, sp, #7
 8007010:	461d      	mov	r5, r3
 8007012:	270a      	movs	r7, #10
 8007014:	fbb1 f6f7 	udiv	r6, r1, r7
 8007018:	461a      	mov	r2, r3
 800701a:	fb07 1416 	mls	r4, r7, r6, r1
 800701e:	3430      	adds	r4, #48	@ 0x30
 8007020:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007024:	460c      	mov	r4, r1
 8007026:	2c63      	cmp	r4, #99	@ 0x63
 8007028:	4631      	mov	r1, r6
 800702a:	f103 33ff 	add.w	r3, r3, #4294967295
 800702e:	dcf1      	bgt.n	8007014 <__exponent+0x1c>
 8007030:	3130      	adds	r1, #48	@ 0x30
 8007032:	1e94      	subs	r4, r2, #2
 8007034:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007038:	4623      	mov	r3, r4
 800703a:	1c41      	adds	r1, r0, #1
 800703c:	42ab      	cmp	r3, r5
 800703e:	d30a      	bcc.n	8007056 <__exponent+0x5e>
 8007040:	f10d 0309 	add.w	r3, sp, #9
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	42ac      	cmp	r4, r5
 8007048:	bf88      	it	hi
 800704a:	2300      	movhi	r3, #0
 800704c:	3302      	adds	r3, #2
 800704e:	4403      	add	r3, r0
 8007050:	1a18      	subs	r0, r3, r0
 8007052:	b003      	add	sp, #12
 8007054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007056:	f813 6b01 	ldrb.w	r6, [r3], #1
 800705a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800705e:	e7ed      	b.n	800703c <__exponent+0x44>
 8007060:	2330      	movs	r3, #48	@ 0x30
 8007062:	3130      	adds	r1, #48	@ 0x30
 8007064:	7083      	strb	r3, [r0, #2]
 8007066:	70c1      	strb	r1, [r0, #3]
 8007068:	1d03      	adds	r3, r0, #4
 800706a:	e7f1      	b.n	8007050 <__exponent+0x58>

0800706c <_printf_float>:
 800706c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	b091      	sub	sp, #68	@ 0x44
 8007072:	460c      	mov	r4, r1
 8007074:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007078:	4616      	mov	r6, r2
 800707a:	461f      	mov	r7, r3
 800707c:	4605      	mov	r5, r0
 800707e:	f000 fcc1 	bl	8007a04 <_localeconv_r>
 8007082:	6803      	ldr	r3, [r0, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	f7f9 f862 	bl	8000150 <strlen>
 800708c:	2300      	movs	r3, #0
 800708e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007090:	f8d8 3000 	ldr.w	r3, [r8]
 8007094:	9009      	str	r0, [sp, #36]	@ 0x24
 8007096:	3307      	adds	r3, #7
 8007098:	f023 0307 	bic.w	r3, r3, #7
 800709c:	f103 0208 	add.w	r2, r3, #8
 80070a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070a4:	f8d4 b000 	ldr.w	fp, [r4]
 80070a8:	f8c8 2000 	str.w	r2, [r8]
 80070ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80070ba:	f04f 32ff 	mov.w	r2, #4294967295
 80070be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007338 <_printf_float+0x2cc>)
 80070c8:	f7f9 fca0 	bl	8000a0c <__aeabi_dcmpun>
 80070cc:	bb70      	cbnz	r0, 800712c <_printf_float+0xc0>
 80070ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295
 80070d6:	4b98      	ldr	r3, [pc, #608]	@ (8007338 <_printf_float+0x2cc>)
 80070d8:	f7f9 fc7a 	bl	80009d0 <__aeabi_dcmple>
 80070dc:	bb30      	cbnz	r0, 800712c <_printf_float+0xc0>
 80070de:	2200      	movs	r2, #0
 80070e0:	2300      	movs	r3, #0
 80070e2:	4640      	mov	r0, r8
 80070e4:	4649      	mov	r1, r9
 80070e6:	f7f9 fc69 	bl	80009bc <__aeabi_dcmplt>
 80070ea:	b110      	cbz	r0, 80070f2 <_printf_float+0x86>
 80070ec:	232d      	movs	r3, #45	@ 0x2d
 80070ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f2:	4a92      	ldr	r2, [pc, #584]	@ (800733c <_printf_float+0x2d0>)
 80070f4:	4b92      	ldr	r3, [pc, #584]	@ (8007340 <_printf_float+0x2d4>)
 80070f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070fa:	bf94      	ite	ls
 80070fc:	4690      	movls	r8, r2
 80070fe:	4698      	movhi	r8, r3
 8007100:	2303      	movs	r3, #3
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f02b 0304 	bic.w	r3, fp, #4
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	4633      	mov	r3, r6
 8007110:	4621      	mov	r1, r4
 8007112:	4628      	mov	r0, r5
 8007114:	9700      	str	r7, [sp, #0]
 8007116:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007118:	f000 f9d4 	bl	80074c4 <_printf_common>
 800711c:	3001      	adds	r0, #1
 800711e:	f040 8090 	bne.w	8007242 <_printf_float+0x1d6>
 8007122:	f04f 30ff 	mov.w	r0, #4294967295
 8007126:	b011      	add	sp, #68	@ 0x44
 8007128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800712c:	4642      	mov	r2, r8
 800712e:	464b      	mov	r3, r9
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	f7f9 fc6a 	bl	8000a0c <__aeabi_dcmpun>
 8007138:	b148      	cbz	r0, 800714e <_printf_float+0xe2>
 800713a:	464b      	mov	r3, r9
 800713c:	2b00      	cmp	r3, #0
 800713e:	bfb8      	it	lt
 8007140:	232d      	movlt	r3, #45	@ 0x2d
 8007142:	4a80      	ldr	r2, [pc, #512]	@ (8007344 <_printf_float+0x2d8>)
 8007144:	bfb8      	it	lt
 8007146:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800714a:	4b7f      	ldr	r3, [pc, #508]	@ (8007348 <_printf_float+0x2dc>)
 800714c:	e7d3      	b.n	80070f6 <_printf_float+0x8a>
 800714e:	6863      	ldr	r3, [r4, #4]
 8007150:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	d13f      	bne.n	80071d8 <_printf_float+0x16c>
 8007158:	2306      	movs	r3, #6
 800715a:	6063      	str	r3, [r4, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	9206      	str	r2, [sp, #24]
 8007166:	aa0e      	add	r2, sp, #56	@ 0x38
 8007168:	e9cd a204 	strd	sl, r2, [sp, #16]
 800716c:	aa0d      	add	r2, sp, #52	@ 0x34
 800716e:	9203      	str	r2, [sp, #12]
 8007170:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007174:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	4642      	mov	r2, r8
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4628      	mov	r0, r5
 8007180:	464b      	mov	r3, r9
 8007182:	910a      	str	r1, [sp, #40]	@ 0x28
 8007184:	f7ff fed4 	bl	8006f30 <__cvt>
 8007188:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800718a:	4680      	mov	r8, r0
 800718c:	2947      	cmp	r1, #71	@ 0x47
 800718e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007190:	d128      	bne.n	80071e4 <_printf_float+0x178>
 8007192:	1cc8      	adds	r0, r1, #3
 8007194:	db02      	blt.n	800719c <_printf_float+0x130>
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	4299      	cmp	r1, r3
 800719a:	dd40      	ble.n	800721e <_printf_float+0x1b2>
 800719c:	f1aa 0a02 	sub.w	sl, sl, #2
 80071a0:	fa5f fa8a 	uxtb.w	sl, sl
 80071a4:	4652      	mov	r2, sl
 80071a6:	3901      	subs	r1, #1
 80071a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071ac:	910d      	str	r1, [sp, #52]	@ 0x34
 80071ae:	f7ff ff23 	bl	8006ff8 <__exponent>
 80071b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071b4:	4681      	mov	r9, r0
 80071b6:	1813      	adds	r3, r2, r0
 80071b8:	2a01      	cmp	r2, #1
 80071ba:	6123      	str	r3, [r4, #16]
 80071bc:	dc02      	bgt.n	80071c4 <_printf_float+0x158>
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	07d2      	lsls	r2, r2, #31
 80071c2:	d501      	bpl.n	80071c8 <_printf_float+0x15c>
 80071c4:	3301      	adds	r3, #1
 80071c6:	6123      	str	r3, [r4, #16]
 80071c8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d09e      	beq.n	800710e <_printf_float+0xa2>
 80071d0:	232d      	movs	r3, #45	@ 0x2d
 80071d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d6:	e79a      	b.n	800710e <_printf_float+0xa2>
 80071d8:	2947      	cmp	r1, #71	@ 0x47
 80071da:	d1bf      	bne.n	800715c <_printf_float+0xf0>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1bd      	bne.n	800715c <_printf_float+0xf0>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7ba      	b.n	800715a <_printf_float+0xee>
 80071e4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071e8:	d9dc      	bls.n	80071a4 <_printf_float+0x138>
 80071ea:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071ee:	d118      	bne.n	8007222 <_printf_float+0x1b6>
 80071f0:	2900      	cmp	r1, #0
 80071f2:	6863      	ldr	r3, [r4, #4]
 80071f4:	dd0b      	ble.n	800720e <_printf_float+0x1a2>
 80071f6:	6121      	str	r1, [r4, #16]
 80071f8:	b913      	cbnz	r3, 8007200 <_printf_float+0x194>
 80071fa:	6822      	ldr	r2, [r4, #0]
 80071fc:	07d0      	lsls	r0, r2, #31
 80071fe:	d502      	bpl.n	8007206 <_printf_float+0x19a>
 8007200:	3301      	adds	r3, #1
 8007202:	440b      	add	r3, r1
 8007204:	6123      	str	r3, [r4, #16]
 8007206:	f04f 0900 	mov.w	r9, #0
 800720a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800720c:	e7dc      	b.n	80071c8 <_printf_float+0x15c>
 800720e:	b913      	cbnz	r3, 8007216 <_printf_float+0x1aa>
 8007210:	6822      	ldr	r2, [r4, #0]
 8007212:	07d2      	lsls	r2, r2, #31
 8007214:	d501      	bpl.n	800721a <_printf_float+0x1ae>
 8007216:	3302      	adds	r3, #2
 8007218:	e7f4      	b.n	8007204 <_printf_float+0x198>
 800721a:	2301      	movs	r3, #1
 800721c:	e7f2      	b.n	8007204 <_printf_float+0x198>
 800721e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007224:	4299      	cmp	r1, r3
 8007226:	db05      	blt.n	8007234 <_printf_float+0x1c8>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	6121      	str	r1, [r4, #16]
 800722c:	07d8      	lsls	r0, r3, #31
 800722e:	d5ea      	bpl.n	8007206 <_printf_float+0x19a>
 8007230:	1c4b      	adds	r3, r1, #1
 8007232:	e7e7      	b.n	8007204 <_printf_float+0x198>
 8007234:	2900      	cmp	r1, #0
 8007236:	bfcc      	ite	gt
 8007238:	2201      	movgt	r2, #1
 800723a:	f1c1 0202 	rsble	r2, r1, #2
 800723e:	4413      	add	r3, r2
 8007240:	e7e0      	b.n	8007204 <_printf_float+0x198>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	055a      	lsls	r2, r3, #21
 8007246:	d407      	bmi.n	8007258 <_printf_float+0x1ec>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	4642      	mov	r2, r8
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	d12b      	bne.n	80072ae <_printf_float+0x242>
 8007256:	e764      	b.n	8007122 <_printf_float+0xb6>
 8007258:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800725c:	f240 80dc 	bls.w	8007418 <_printf_float+0x3ac>
 8007260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007264:	2200      	movs	r2, #0
 8007266:	2300      	movs	r3, #0
 8007268:	f7f9 fb9e 	bl	80009a8 <__aeabi_dcmpeq>
 800726c:	2800      	cmp	r0, #0
 800726e:	d033      	beq.n	80072d8 <_printf_float+0x26c>
 8007270:	2301      	movs	r3, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	4a35      	ldr	r2, [pc, #212]	@ (800734c <_printf_float+0x2e0>)
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	f43f af51 	beq.w	8007122 <_printf_float+0xb6>
 8007280:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007284:	4543      	cmp	r3, r8
 8007286:	db02      	blt.n	800728e <_printf_float+0x222>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	07d8      	lsls	r0, r3, #31
 800728c:	d50f      	bpl.n	80072ae <_printf_float+0x242>
 800728e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007292:	4631      	mov	r1, r6
 8007294:	4628      	mov	r0, r5
 8007296:	47b8      	blx	r7
 8007298:	3001      	adds	r0, #1
 800729a:	f43f af42 	beq.w	8007122 <_printf_float+0xb6>
 800729e:	f04f 0900 	mov.w	r9, #0
 80072a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80072a6:	f104 0a1a 	add.w	sl, r4, #26
 80072aa:	45c8      	cmp	r8, r9
 80072ac:	dc09      	bgt.n	80072c2 <_printf_float+0x256>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	079b      	lsls	r3, r3, #30
 80072b2:	f100 8102 	bmi.w	80074ba <_printf_float+0x44e>
 80072b6:	68e0      	ldr	r0, [r4, #12]
 80072b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ba:	4298      	cmp	r0, r3
 80072bc:	bfb8      	it	lt
 80072be:	4618      	movlt	r0, r3
 80072c0:	e731      	b.n	8007126 <_printf_float+0xba>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4652      	mov	r2, sl
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	47b8      	blx	r7
 80072cc:	3001      	adds	r0, #1
 80072ce:	f43f af28 	beq.w	8007122 <_printf_float+0xb6>
 80072d2:	f109 0901 	add.w	r9, r9, #1
 80072d6:	e7e8      	b.n	80072aa <_printf_float+0x23e>
 80072d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072da:	2b00      	cmp	r3, #0
 80072dc:	dc38      	bgt.n	8007350 <_printf_float+0x2e4>
 80072de:	2301      	movs	r3, #1
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	4a19      	ldr	r2, [pc, #100]	@ (800734c <_printf_float+0x2e0>)
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f af1a 	beq.w	8007122 <_printf_float+0xb6>
 80072ee:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80072f2:	ea59 0303 	orrs.w	r3, r9, r3
 80072f6:	d102      	bne.n	80072fe <_printf_float+0x292>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07d9      	lsls	r1, r3, #31
 80072fc:	d5d7      	bpl.n	80072ae <_printf_float+0x242>
 80072fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007302:	4631      	mov	r1, r6
 8007304:	4628      	mov	r0, r5
 8007306:	47b8      	blx	r7
 8007308:	3001      	adds	r0, #1
 800730a:	f43f af0a 	beq.w	8007122 <_printf_float+0xb6>
 800730e:	f04f 0a00 	mov.w	sl, #0
 8007312:	f104 0b1a 	add.w	fp, r4, #26
 8007316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007318:	425b      	negs	r3, r3
 800731a:	4553      	cmp	r3, sl
 800731c:	dc01      	bgt.n	8007322 <_printf_float+0x2b6>
 800731e:	464b      	mov	r3, r9
 8007320:	e793      	b.n	800724a <_printf_float+0x1de>
 8007322:	2301      	movs	r3, #1
 8007324:	465a      	mov	r2, fp
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f aef8 	beq.w	8007122 <_printf_float+0xb6>
 8007332:	f10a 0a01 	add.w	sl, sl, #1
 8007336:	e7ee      	b.n	8007316 <_printf_float+0x2aa>
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	0800aa12 	.word	0x0800aa12
 8007340:	0800aa16 	.word	0x0800aa16
 8007344:	0800aa1a 	.word	0x0800aa1a
 8007348:	0800aa1e 	.word	0x0800aa1e
 800734c:	0800aa22 	.word	0x0800aa22
 8007350:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007352:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007356:	4553      	cmp	r3, sl
 8007358:	bfa8      	it	ge
 800735a:	4653      	movge	r3, sl
 800735c:	2b00      	cmp	r3, #0
 800735e:	4699      	mov	r9, r3
 8007360:	dc36      	bgt.n	80073d0 <_printf_float+0x364>
 8007362:	f04f 0b00 	mov.w	fp, #0
 8007366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736a:	f104 021a 	add.w	r2, r4, #26
 800736e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007370:	930a      	str	r3, [sp, #40]	@ 0x28
 8007372:	eba3 0309 	sub.w	r3, r3, r9
 8007376:	455b      	cmp	r3, fp
 8007378:	dc31      	bgt.n	80073de <_printf_float+0x372>
 800737a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800737c:	459a      	cmp	sl, r3
 800737e:	dc3a      	bgt.n	80073f6 <_printf_float+0x38a>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07da      	lsls	r2, r3, #31
 8007384:	d437      	bmi.n	80073f6 <_printf_float+0x38a>
 8007386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007388:	ebaa 0903 	sub.w	r9, sl, r3
 800738c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800738e:	ebaa 0303 	sub.w	r3, sl, r3
 8007392:	4599      	cmp	r9, r3
 8007394:	bfa8      	it	ge
 8007396:	4699      	movge	r9, r3
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	dc33      	bgt.n	8007406 <_printf_float+0x39a>
 800739e:	f04f 0800 	mov.w	r8, #0
 80073a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a6:	f104 0b1a 	add.w	fp, r4, #26
 80073aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073ac:	ebaa 0303 	sub.w	r3, sl, r3
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	4543      	cmp	r3, r8
 80073b6:	f77f af7a 	ble.w	80072ae <_printf_float+0x242>
 80073ba:	2301      	movs	r3, #1
 80073bc:	465a      	mov	r2, fp
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f aeac 	beq.w	8007122 <_printf_float+0xb6>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	e7ec      	b.n	80073aa <_printf_float+0x33e>
 80073d0:	4642      	mov	r2, r8
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d1c2      	bne.n	8007362 <_printf_float+0x2f6>
 80073dc:	e6a1      	b.n	8007122 <_printf_float+0xb6>
 80073de:	2301      	movs	r3, #1
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	920a      	str	r2, [sp, #40]	@ 0x28
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae9a 	beq.w	8007122 <_printf_float+0xb6>
 80073ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073f0:	f10b 0b01 	add.w	fp, fp, #1
 80073f4:	e7bb      	b.n	800736e <_printf_float+0x302>
 80073f6:	4631      	mov	r1, r6
 80073f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b8      	blx	r7
 8007400:	3001      	adds	r0, #1
 8007402:	d1c0      	bne.n	8007386 <_printf_float+0x31a>
 8007404:	e68d      	b.n	8007122 <_printf_float+0xb6>
 8007406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007408:	464b      	mov	r3, r9
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	4442      	add	r2, r8
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	d1c3      	bne.n	800739e <_printf_float+0x332>
 8007416:	e684      	b.n	8007122 <_printf_float+0xb6>
 8007418:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800741c:	f1ba 0f01 	cmp.w	sl, #1
 8007420:	dc01      	bgt.n	8007426 <_printf_float+0x3ba>
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d536      	bpl.n	8007494 <_printf_float+0x428>
 8007426:	2301      	movs	r3, #1
 8007428:	4642      	mov	r2, r8
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae76 	beq.w	8007122 <_printf_float+0xb6>
 8007436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f ae6e 	beq.w	8007122 <_printf_float+0xb6>
 8007446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007452:	f7f9 faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8007456:	b9c0      	cbnz	r0, 800748a <_printf_float+0x41e>
 8007458:	4653      	mov	r3, sl
 800745a:	f108 0201 	add.w	r2, r8, #1
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	d10c      	bne.n	8007482 <_printf_float+0x416>
 8007468:	e65b      	b.n	8007122 <_printf_float+0xb6>
 800746a:	2301      	movs	r3, #1
 800746c:	465a      	mov	r2, fp
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f ae54 	beq.w	8007122 <_printf_float+0xb6>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	45d0      	cmp	r8, sl
 8007480:	dbf3      	blt.n	800746a <_printf_float+0x3fe>
 8007482:	464b      	mov	r3, r9
 8007484:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007488:	e6e0      	b.n	800724c <_printf_float+0x1e0>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	f104 0b1a 	add.w	fp, r4, #26
 8007492:	e7f4      	b.n	800747e <_printf_float+0x412>
 8007494:	2301      	movs	r3, #1
 8007496:	4642      	mov	r2, r8
 8007498:	e7e1      	b.n	800745e <_printf_float+0x3f2>
 800749a:	2301      	movs	r3, #1
 800749c:	464a      	mov	r2, r9
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	f43f ae3c 	beq.w	8007122 <_printf_float+0xb6>
 80074aa:	f108 0801 	add.w	r8, r8, #1
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80074b2:	1a5b      	subs	r3, r3, r1
 80074b4:	4543      	cmp	r3, r8
 80074b6:	dcf0      	bgt.n	800749a <_printf_float+0x42e>
 80074b8:	e6fd      	b.n	80072b6 <_printf_float+0x24a>
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	f104 0919 	add.w	r9, r4, #25
 80074c2:	e7f4      	b.n	80074ae <_printf_float+0x442>

080074c4 <_printf_common>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	4616      	mov	r6, r2
 80074ca:	4698      	mov	r8, r3
 80074cc:	688a      	ldr	r2, [r1, #8]
 80074ce:	690b      	ldr	r3, [r1, #16]
 80074d0:	4607      	mov	r7, r0
 80074d2:	4293      	cmp	r3, r2
 80074d4:	bfb8      	it	lt
 80074d6:	4613      	movlt	r3, r2
 80074d8:	6033      	str	r3, [r6, #0]
 80074da:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074de:	460c      	mov	r4, r1
 80074e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074e4:	b10a      	cbz	r2, 80074ea <_printf_common+0x26>
 80074e6:	3301      	adds	r3, #1
 80074e8:	6033      	str	r3, [r6, #0]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	0699      	lsls	r1, r3, #26
 80074ee:	bf42      	ittt	mi
 80074f0:	6833      	ldrmi	r3, [r6, #0]
 80074f2:	3302      	addmi	r3, #2
 80074f4:	6033      	strmi	r3, [r6, #0]
 80074f6:	6825      	ldr	r5, [r4, #0]
 80074f8:	f015 0506 	ands.w	r5, r5, #6
 80074fc:	d106      	bne.n	800750c <_printf_common+0x48>
 80074fe:	f104 0a19 	add.w	sl, r4, #25
 8007502:	68e3      	ldr	r3, [r4, #12]
 8007504:	6832      	ldr	r2, [r6, #0]
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	42ab      	cmp	r3, r5
 800750a:	dc2b      	bgt.n	8007564 <_printf_common+0xa0>
 800750c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	3b00      	subs	r3, #0
 8007514:	bf18      	it	ne
 8007516:	2301      	movne	r3, #1
 8007518:	0692      	lsls	r2, r2, #26
 800751a:	d430      	bmi.n	800757e <_printf_common+0xba>
 800751c:	4641      	mov	r1, r8
 800751e:	4638      	mov	r0, r7
 8007520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007524:	47c8      	blx	r9
 8007526:	3001      	adds	r0, #1
 8007528:	d023      	beq.n	8007572 <_printf_common+0xae>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf14      	ite	ne
 8007536:	2500      	movne	r5, #0
 8007538:	6833      	ldreq	r3, [r6, #0]
 800753a:	f04f 0600 	mov.w	r6, #0
 800753e:	bf08      	it	eq
 8007540:	68e5      	ldreq	r5, [r4, #12]
 8007542:	f104 041a 	add.w	r4, r4, #26
 8007546:	bf08      	it	eq
 8007548:	1aed      	subeq	r5, r5, r3
 800754a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800754e:	bf08      	it	eq
 8007550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007554:	4293      	cmp	r3, r2
 8007556:	bfc4      	itt	gt
 8007558:	1a9b      	subgt	r3, r3, r2
 800755a:	18ed      	addgt	r5, r5, r3
 800755c:	42b5      	cmp	r5, r6
 800755e:	d11a      	bne.n	8007596 <_printf_common+0xd2>
 8007560:	2000      	movs	r0, #0
 8007562:	e008      	b.n	8007576 <_printf_common+0xb2>
 8007564:	2301      	movs	r3, #1
 8007566:	4652      	mov	r2, sl
 8007568:	4641      	mov	r1, r8
 800756a:	4638      	mov	r0, r7
 800756c:	47c8      	blx	r9
 800756e:	3001      	adds	r0, #1
 8007570:	d103      	bne.n	800757a <_printf_common+0xb6>
 8007572:	f04f 30ff 	mov.w	r0, #4294967295
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	3501      	adds	r5, #1
 800757c:	e7c1      	b.n	8007502 <_printf_common+0x3e>
 800757e:	2030      	movs	r0, #48	@ 0x30
 8007580:	18e1      	adds	r1, r4, r3
 8007582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800758c:	4422      	add	r2, r4
 800758e:	3302      	adds	r3, #2
 8007590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007594:	e7c2      	b.n	800751c <_printf_common+0x58>
 8007596:	2301      	movs	r3, #1
 8007598:	4622      	mov	r2, r4
 800759a:	4641      	mov	r1, r8
 800759c:	4638      	mov	r0, r7
 800759e:	47c8      	blx	r9
 80075a0:	3001      	adds	r0, #1
 80075a2:	d0e6      	beq.n	8007572 <_printf_common+0xae>
 80075a4:	3601      	adds	r6, #1
 80075a6:	e7d9      	b.n	800755c <_printf_common+0x98>

080075a8 <_printf_i>:
 80075a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	7e0f      	ldrb	r7, [r1, #24]
 80075ae:	4691      	mov	r9, r2
 80075b0:	2f78      	cmp	r7, #120	@ 0x78
 80075b2:	4680      	mov	r8, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	469a      	mov	sl, r3
 80075b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075be:	d807      	bhi.n	80075d0 <_printf_i+0x28>
 80075c0:	2f62      	cmp	r7, #98	@ 0x62
 80075c2:	d80a      	bhi.n	80075da <_printf_i+0x32>
 80075c4:	2f00      	cmp	r7, #0
 80075c6:	f000 80d3 	beq.w	8007770 <_printf_i+0x1c8>
 80075ca:	2f58      	cmp	r7, #88	@ 0x58
 80075cc:	f000 80ba 	beq.w	8007744 <_printf_i+0x19c>
 80075d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075d8:	e03a      	b.n	8007650 <_printf_i+0xa8>
 80075da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075de:	2b15      	cmp	r3, #21
 80075e0:	d8f6      	bhi.n	80075d0 <_printf_i+0x28>
 80075e2:	a101      	add	r1, pc, #4	@ (adr r1, 80075e8 <_printf_i+0x40>)
 80075e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e8:	08007641 	.word	0x08007641
 80075ec:	08007655 	.word	0x08007655
 80075f0:	080075d1 	.word	0x080075d1
 80075f4:	080075d1 	.word	0x080075d1
 80075f8:	080075d1 	.word	0x080075d1
 80075fc:	080075d1 	.word	0x080075d1
 8007600:	08007655 	.word	0x08007655
 8007604:	080075d1 	.word	0x080075d1
 8007608:	080075d1 	.word	0x080075d1
 800760c:	080075d1 	.word	0x080075d1
 8007610:	080075d1 	.word	0x080075d1
 8007614:	08007757 	.word	0x08007757
 8007618:	0800767f 	.word	0x0800767f
 800761c:	08007711 	.word	0x08007711
 8007620:	080075d1 	.word	0x080075d1
 8007624:	080075d1 	.word	0x080075d1
 8007628:	08007779 	.word	0x08007779
 800762c:	080075d1 	.word	0x080075d1
 8007630:	0800767f 	.word	0x0800767f
 8007634:	080075d1 	.word	0x080075d1
 8007638:	080075d1 	.word	0x080075d1
 800763c:	08007719 	.word	0x08007719
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	1d1a      	adds	r2, r3, #4
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6032      	str	r2, [r6, #0]
 8007648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800764c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007650:	2301      	movs	r3, #1
 8007652:	e09e      	b.n	8007792 <_printf_i+0x1ea>
 8007654:	6833      	ldr	r3, [r6, #0]
 8007656:	6820      	ldr	r0, [r4, #0]
 8007658:	1d19      	adds	r1, r3, #4
 800765a:	6031      	str	r1, [r6, #0]
 800765c:	0606      	lsls	r6, r0, #24
 800765e:	d501      	bpl.n	8007664 <_printf_i+0xbc>
 8007660:	681d      	ldr	r5, [r3, #0]
 8007662:	e003      	b.n	800766c <_printf_i+0xc4>
 8007664:	0645      	lsls	r5, r0, #25
 8007666:	d5fb      	bpl.n	8007660 <_printf_i+0xb8>
 8007668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800766c:	2d00      	cmp	r5, #0
 800766e:	da03      	bge.n	8007678 <_printf_i+0xd0>
 8007670:	232d      	movs	r3, #45	@ 0x2d
 8007672:	426d      	negs	r5, r5
 8007674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007678:	230a      	movs	r3, #10
 800767a:	4859      	ldr	r0, [pc, #356]	@ (80077e0 <_printf_i+0x238>)
 800767c:	e011      	b.n	80076a2 <_printf_i+0xfa>
 800767e:	6821      	ldr	r1, [r4, #0]
 8007680:	6833      	ldr	r3, [r6, #0]
 8007682:	0608      	lsls	r0, r1, #24
 8007684:	f853 5b04 	ldr.w	r5, [r3], #4
 8007688:	d402      	bmi.n	8007690 <_printf_i+0xe8>
 800768a:	0649      	lsls	r1, r1, #25
 800768c:	bf48      	it	mi
 800768e:	b2ad      	uxthmi	r5, r5
 8007690:	2f6f      	cmp	r7, #111	@ 0x6f
 8007692:	6033      	str	r3, [r6, #0]
 8007694:	bf14      	ite	ne
 8007696:	230a      	movne	r3, #10
 8007698:	2308      	moveq	r3, #8
 800769a:	4851      	ldr	r0, [pc, #324]	@ (80077e0 <_printf_i+0x238>)
 800769c:	2100      	movs	r1, #0
 800769e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076a2:	6866      	ldr	r6, [r4, #4]
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	bfa8      	it	ge
 80076a8:	6821      	ldrge	r1, [r4, #0]
 80076aa:	60a6      	str	r6, [r4, #8]
 80076ac:	bfa4      	itt	ge
 80076ae:	f021 0104 	bicge.w	r1, r1, #4
 80076b2:	6021      	strge	r1, [r4, #0]
 80076b4:	b90d      	cbnz	r5, 80076ba <_printf_i+0x112>
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	d04b      	beq.n	8007752 <_printf_i+0x1aa>
 80076ba:	4616      	mov	r6, r2
 80076bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80076c0:	fb03 5711 	mls	r7, r3, r1, r5
 80076c4:	5dc7      	ldrb	r7, [r0, r7]
 80076c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076ca:	462f      	mov	r7, r5
 80076cc:	42bb      	cmp	r3, r7
 80076ce:	460d      	mov	r5, r1
 80076d0:	d9f4      	bls.n	80076bc <_printf_i+0x114>
 80076d2:	2b08      	cmp	r3, #8
 80076d4:	d10b      	bne.n	80076ee <_printf_i+0x146>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	07df      	lsls	r7, r3, #31
 80076da:	d508      	bpl.n	80076ee <_printf_i+0x146>
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	6861      	ldr	r1, [r4, #4]
 80076e0:	4299      	cmp	r1, r3
 80076e2:	bfde      	ittt	le
 80076e4:	2330      	movle	r3, #48	@ 0x30
 80076e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076ee:	1b92      	subs	r2, r2, r6
 80076f0:	6122      	str	r2, [r4, #16]
 80076f2:	464b      	mov	r3, r9
 80076f4:	4621      	mov	r1, r4
 80076f6:	4640      	mov	r0, r8
 80076f8:	f8cd a000 	str.w	sl, [sp]
 80076fc:	aa03      	add	r2, sp, #12
 80076fe:	f7ff fee1 	bl	80074c4 <_printf_common>
 8007702:	3001      	adds	r0, #1
 8007704:	d14a      	bne.n	800779c <_printf_i+0x1f4>
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	b004      	add	sp, #16
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	f043 0320 	orr.w	r3, r3, #32
 8007716:	6023      	str	r3, [r4, #0]
 8007718:	2778      	movs	r7, #120	@ 0x78
 800771a:	4832      	ldr	r0, [pc, #200]	@ (80077e4 <_printf_i+0x23c>)
 800771c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	6831      	ldr	r1, [r6, #0]
 8007724:	061f      	lsls	r7, r3, #24
 8007726:	f851 5b04 	ldr.w	r5, [r1], #4
 800772a:	d402      	bmi.n	8007732 <_printf_i+0x18a>
 800772c:	065f      	lsls	r7, r3, #25
 800772e:	bf48      	it	mi
 8007730:	b2ad      	uxthmi	r5, r5
 8007732:	6031      	str	r1, [r6, #0]
 8007734:	07d9      	lsls	r1, r3, #31
 8007736:	bf44      	itt	mi
 8007738:	f043 0320 	orrmi.w	r3, r3, #32
 800773c:	6023      	strmi	r3, [r4, #0]
 800773e:	b11d      	cbz	r5, 8007748 <_printf_i+0x1a0>
 8007740:	2310      	movs	r3, #16
 8007742:	e7ab      	b.n	800769c <_printf_i+0xf4>
 8007744:	4826      	ldr	r0, [pc, #152]	@ (80077e0 <_printf_i+0x238>)
 8007746:	e7e9      	b.n	800771c <_printf_i+0x174>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	f023 0320 	bic.w	r3, r3, #32
 800774e:	6023      	str	r3, [r4, #0]
 8007750:	e7f6      	b.n	8007740 <_printf_i+0x198>
 8007752:	4616      	mov	r6, r2
 8007754:	e7bd      	b.n	80076d2 <_printf_i+0x12a>
 8007756:	6833      	ldr	r3, [r6, #0]
 8007758:	6825      	ldr	r5, [r4, #0]
 800775a:	1d18      	adds	r0, r3, #4
 800775c:	6961      	ldr	r1, [r4, #20]
 800775e:	6030      	str	r0, [r6, #0]
 8007760:	062e      	lsls	r6, r5, #24
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	d501      	bpl.n	800776a <_printf_i+0x1c2>
 8007766:	6019      	str	r1, [r3, #0]
 8007768:	e002      	b.n	8007770 <_printf_i+0x1c8>
 800776a:	0668      	lsls	r0, r5, #25
 800776c:	d5fb      	bpl.n	8007766 <_printf_i+0x1be>
 800776e:	8019      	strh	r1, [r3, #0]
 8007770:	2300      	movs	r3, #0
 8007772:	4616      	mov	r6, r2
 8007774:	6123      	str	r3, [r4, #16]
 8007776:	e7bc      	b.n	80076f2 <_printf_i+0x14a>
 8007778:	6833      	ldr	r3, [r6, #0]
 800777a:	2100      	movs	r1, #0
 800777c:	1d1a      	adds	r2, r3, #4
 800777e:	6032      	str	r2, [r6, #0]
 8007780:	681e      	ldr	r6, [r3, #0]
 8007782:	6862      	ldr	r2, [r4, #4]
 8007784:	4630      	mov	r0, r6
 8007786:	f000 f9b4 	bl	8007af2 <memchr>
 800778a:	b108      	cbz	r0, 8007790 <_printf_i+0x1e8>
 800778c:	1b80      	subs	r0, r0, r6
 800778e:	6060      	str	r0, [r4, #4]
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	2300      	movs	r3, #0
 8007796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800779a:	e7aa      	b.n	80076f2 <_printf_i+0x14a>
 800779c:	4632      	mov	r2, r6
 800779e:	4649      	mov	r1, r9
 80077a0:	4640      	mov	r0, r8
 80077a2:	6923      	ldr	r3, [r4, #16]
 80077a4:	47d0      	blx	sl
 80077a6:	3001      	adds	r0, #1
 80077a8:	d0ad      	beq.n	8007706 <_printf_i+0x15e>
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	079b      	lsls	r3, r3, #30
 80077ae:	d413      	bmi.n	80077d8 <_printf_i+0x230>
 80077b0:	68e0      	ldr	r0, [r4, #12]
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	4298      	cmp	r0, r3
 80077b6:	bfb8      	it	lt
 80077b8:	4618      	movlt	r0, r3
 80077ba:	e7a6      	b.n	800770a <_printf_i+0x162>
 80077bc:	2301      	movs	r3, #1
 80077be:	4632      	mov	r2, r6
 80077c0:	4649      	mov	r1, r9
 80077c2:	4640      	mov	r0, r8
 80077c4:	47d0      	blx	sl
 80077c6:	3001      	adds	r0, #1
 80077c8:	d09d      	beq.n	8007706 <_printf_i+0x15e>
 80077ca:	3501      	adds	r5, #1
 80077cc:	68e3      	ldr	r3, [r4, #12]
 80077ce:	9903      	ldr	r1, [sp, #12]
 80077d0:	1a5b      	subs	r3, r3, r1
 80077d2:	42ab      	cmp	r3, r5
 80077d4:	dcf2      	bgt.n	80077bc <_printf_i+0x214>
 80077d6:	e7eb      	b.n	80077b0 <_printf_i+0x208>
 80077d8:	2500      	movs	r5, #0
 80077da:	f104 0619 	add.w	r6, r4, #25
 80077de:	e7f5      	b.n	80077cc <_printf_i+0x224>
 80077e0:	0800aa24 	.word	0x0800aa24
 80077e4:	0800aa35 	.word	0x0800aa35

080077e8 <std>:
 80077e8:	2300      	movs	r3, #0
 80077ea:	b510      	push	{r4, lr}
 80077ec:	4604      	mov	r4, r0
 80077ee:	e9c0 3300 	strd	r3, r3, [r0]
 80077f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077f6:	6083      	str	r3, [r0, #8]
 80077f8:	8181      	strh	r1, [r0, #12]
 80077fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80077fc:	81c2      	strh	r2, [r0, #14]
 80077fe:	6183      	str	r3, [r0, #24]
 8007800:	4619      	mov	r1, r3
 8007802:	2208      	movs	r2, #8
 8007804:	305c      	adds	r0, #92	@ 0x5c
 8007806:	f000 f8f4 	bl	80079f2 <memset>
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x58>)
 800780c:	6224      	str	r4, [r4, #32]
 800780e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007810:	4b0c      	ldr	r3, [pc, #48]	@ (8007844 <std+0x5c>)
 8007812:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007814:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <std+0x60>)
 8007816:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <std+0x64>)
 800781a:	6323      	str	r3, [r4, #48]	@ 0x30
 800781c:	4b0c      	ldr	r3, [pc, #48]	@ (8007850 <std+0x68>)
 800781e:	429c      	cmp	r4, r3
 8007820:	d006      	beq.n	8007830 <std+0x48>
 8007822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007826:	4294      	cmp	r4, r2
 8007828:	d002      	beq.n	8007830 <std+0x48>
 800782a:	33d0      	adds	r3, #208	@ 0xd0
 800782c:	429c      	cmp	r4, r3
 800782e:	d105      	bne.n	800783c <std+0x54>
 8007830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 b958 	b.w	8007aec <__retarget_lock_init_recursive>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	0800796d 	.word	0x0800796d
 8007844:	0800798f 	.word	0x0800798f
 8007848:	080079c7 	.word	0x080079c7
 800784c:	080079eb 	.word	0x080079eb
 8007850:	20000830 	.word	0x20000830

08007854 <stdio_exit_handler>:
 8007854:	4a02      	ldr	r2, [pc, #8]	@ (8007860 <stdio_exit_handler+0xc>)
 8007856:	4903      	ldr	r1, [pc, #12]	@ (8007864 <stdio_exit_handler+0x10>)
 8007858:	4803      	ldr	r0, [pc, #12]	@ (8007868 <stdio_exit_handler+0x14>)
 800785a:	f000 b869 	b.w	8007930 <_fwalk_sglue>
 800785e:	bf00      	nop
 8007860:	20000018 	.word	0x20000018
 8007864:	080091ad 	.word	0x080091ad
 8007868:	20000028 	.word	0x20000028

0800786c <cleanup_stdio>:
 800786c:	6841      	ldr	r1, [r0, #4]
 800786e:	4b0c      	ldr	r3, [pc, #48]	@ (80078a0 <cleanup_stdio+0x34>)
 8007870:	b510      	push	{r4, lr}
 8007872:	4299      	cmp	r1, r3
 8007874:	4604      	mov	r4, r0
 8007876:	d001      	beq.n	800787c <cleanup_stdio+0x10>
 8007878:	f001 fc98 	bl	80091ac <_fflush_r>
 800787c:	68a1      	ldr	r1, [r4, #8]
 800787e:	4b09      	ldr	r3, [pc, #36]	@ (80078a4 <cleanup_stdio+0x38>)
 8007880:	4299      	cmp	r1, r3
 8007882:	d002      	beq.n	800788a <cleanup_stdio+0x1e>
 8007884:	4620      	mov	r0, r4
 8007886:	f001 fc91 	bl	80091ac <_fflush_r>
 800788a:	68e1      	ldr	r1, [r4, #12]
 800788c:	4b06      	ldr	r3, [pc, #24]	@ (80078a8 <cleanup_stdio+0x3c>)
 800788e:	4299      	cmp	r1, r3
 8007890:	d004      	beq.n	800789c <cleanup_stdio+0x30>
 8007892:	4620      	mov	r0, r4
 8007894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007898:	f001 bc88 	b.w	80091ac <_fflush_r>
 800789c:	bd10      	pop	{r4, pc}
 800789e:	bf00      	nop
 80078a0:	20000830 	.word	0x20000830
 80078a4:	20000898 	.word	0x20000898
 80078a8:	20000900 	.word	0x20000900

080078ac <global_stdio_init.part.0>:
 80078ac:	b510      	push	{r4, lr}
 80078ae:	4b0b      	ldr	r3, [pc, #44]	@ (80078dc <global_stdio_init.part.0+0x30>)
 80078b0:	4c0b      	ldr	r4, [pc, #44]	@ (80078e0 <global_stdio_init.part.0+0x34>)
 80078b2:	4a0c      	ldr	r2, [pc, #48]	@ (80078e4 <global_stdio_init.part.0+0x38>)
 80078b4:	4620      	mov	r0, r4
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	2104      	movs	r1, #4
 80078ba:	2200      	movs	r2, #0
 80078bc:	f7ff ff94 	bl	80077e8 <std>
 80078c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078c4:	2201      	movs	r2, #1
 80078c6:	2109      	movs	r1, #9
 80078c8:	f7ff ff8e 	bl	80077e8 <std>
 80078cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078d0:	2202      	movs	r2, #2
 80078d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d6:	2112      	movs	r1, #18
 80078d8:	f7ff bf86 	b.w	80077e8 <std>
 80078dc:	20000968 	.word	0x20000968
 80078e0:	20000830 	.word	0x20000830
 80078e4:	08007855 	.word	0x08007855

080078e8 <__sfp_lock_acquire>:
 80078e8:	4801      	ldr	r0, [pc, #4]	@ (80078f0 <__sfp_lock_acquire+0x8>)
 80078ea:	f000 b900 	b.w	8007aee <__retarget_lock_acquire_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000971 	.word	0x20000971

080078f4 <__sfp_lock_release>:
 80078f4:	4801      	ldr	r0, [pc, #4]	@ (80078fc <__sfp_lock_release+0x8>)
 80078f6:	f000 b8fb 	b.w	8007af0 <__retarget_lock_release_recursive>
 80078fa:	bf00      	nop
 80078fc:	20000971 	.word	0x20000971

08007900 <__sinit>:
 8007900:	b510      	push	{r4, lr}
 8007902:	4604      	mov	r4, r0
 8007904:	f7ff fff0 	bl	80078e8 <__sfp_lock_acquire>
 8007908:	6a23      	ldr	r3, [r4, #32]
 800790a:	b11b      	cbz	r3, 8007914 <__sinit+0x14>
 800790c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007910:	f7ff bff0 	b.w	80078f4 <__sfp_lock_release>
 8007914:	4b04      	ldr	r3, [pc, #16]	@ (8007928 <__sinit+0x28>)
 8007916:	6223      	str	r3, [r4, #32]
 8007918:	4b04      	ldr	r3, [pc, #16]	@ (800792c <__sinit+0x2c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1f5      	bne.n	800790c <__sinit+0xc>
 8007920:	f7ff ffc4 	bl	80078ac <global_stdio_init.part.0>
 8007924:	e7f2      	b.n	800790c <__sinit+0xc>
 8007926:	bf00      	nop
 8007928:	0800786d 	.word	0x0800786d
 800792c:	20000968 	.word	0x20000968

08007930 <_fwalk_sglue>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4607      	mov	r7, r0
 8007936:	4688      	mov	r8, r1
 8007938:	4614      	mov	r4, r2
 800793a:	2600      	movs	r6, #0
 800793c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007940:	f1b9 0901 	subs.w	r9, r9, #1
 8007944:	d505      	bpl.n	8007952 <_fwalk_sglue+0x22>
 8007946:	6824      	ldr	r4, [r4, #0]
 8007948:	2c00      	cmp	r4, #0
 800794a:	d1f7      	bne.n	800793c <_fwalk_sglue+0xc>
 800794c:	4630      	mov	r0, r6
 800794e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007952:	89ab      	ldrh	r3, [r5, #12]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d907      	bls.n	8007968 <_fwalk_sglue+0x38>
 8007958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	d003      	beq.n	8007968 <_fwalk_sglue+0x38>
 8007960:	4629      	mov	r1, r5
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	4306      	orrs	r6, r0
 8007968:	3568      	adds	r5, #104	@ 0x68
 800796a:	e7e9      	b.n	8007940 <_fwalk_sglue+0x10>

0800796c <__sread>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	f000 f86c 	bl	8007a50 <_read_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	bfab      	itete	ge
 800797c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800797e:	89a3      	ldrhlt	r3, [r4, #12]
 8007980:	181b      	addge	r3, r3, r0
 8007982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007986:	bfac      	ite	ge
 8007988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800798a:	81a3      	strhlt	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__swrite>:
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	461f      	mov	r7, r3
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	4605      	mov	r5, r0
 8007998:	05db      	lsls	r3, r3, #23
 800799a:	460c      	mov	r4, r1
 800799c:	4616      	mov	r6, r2
 800799e:	d505      	bpl.n	80079ac <__swrite+0x1e>
 80079a0:	2302      	movs	r3, #2
 80079a2:	2200      	movs	r2, #0
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	f000 f840 	bl	8007a2c <_lseek_r>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	4632      	mov	r2, r6
 80079b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	4628      	mov	r0, r5
 80079b8:	463b      	mov	r3, r7
 80079ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f000 b857 	b.w	8007a74 <_write_r>

080079c6 <__sseek>:
 80079c6:	b510      	push	{r4, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ce:	f000 f82d 	bl	8007a2c <_lseek_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	bf15      	itete	ne
 80079d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079e2:	81a3      	strheq	r3, [r4, #12]
 80079e4:	bf18      	it	ne
 80079e6:	81a3      	strhne	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__sclose>:
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 b80d 	b.w	8007a0c <_close_r>

080079f2 <memset>:
 80079f2:	4603      	mov	r3, r0
 80079f4:	4402      	add	r2, r0
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d100      	bne.n	80079fc <memset+0xa>
 80079fa:	4770      	bx	lr
 80079fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007a00:	e7f9      	b.n	80079f6 <memset+0x4>
	...

08007a04 <_localeconv_r>:
 8007a04:	4800      	ldr	r0, [pc, #0]	@ (8007a08 <_localeconv_r+0x4>)
 8007a06:	4770      	bx	lr
 8007a08:	20000164 	.word	0x20000164

08007a0c <_close_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	2300      	movs	r3, #0
 8007a10:	4d05      	ldr	r5, [pc, #20]	@ (8007a28 <_close_r+0x1c>)
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7fa fb63 	bl	80020e2 <_close>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_close_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_close_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	2000096c 	.word	0x2000096c

08007a2c <_lseek_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	2200      	movs	r2, #0
 8007a36:	4d05      	ldr	r5, [pc, #20]	@ (8007a4c <_lseek_r+0x20>)
 8007a38:	602a      	str	r2, [r5, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f7fa fb75 	bl	800212a <_lseek>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_lseek_r+0x1e>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_lseek_r+0x1e>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	2000096c 	.word	0x2000096c

08007a50 <_read_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4d05      	ldr	r5, [pc, #20]	@ (8007a70 <_read_r+0x20>)
 8007a5c:	602a      	str	r2, [r5, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f7fa fb06 	bl	8002070 <_read>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_read_r+0x1e>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_read_r+0x1e>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	2000096c 	.word	0x2000096c

08007a74 <_write_r>:
 8007a74:	b538      	push	{r3, r4, r5, lr}
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	4d05      	ldr	r5, [pc, #20]	@ (8007a94 <_write_r+0x20>)
 8007a80:	602a      	str	r2, [r5, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	f7fa fb11 	bl	80020aa <_write>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_write_r+0x1e>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_write_r+0x1e>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	2000096c 	.word	0x2000096c

08007a98 <__errno>:
 8007a98:	4b01      	ldr	r3, [pc, #4]	@ (8007aa0 <__errno+0x8>)
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000024 	.word	0x20000024

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	4d0c      	ldr	r5, [pc, #48]	@ (8007adc <__libc_init_array+0x38>)
 8007aaa:	4c0d      	ldr	r4, [pc, #52]	@ (8007ae0 <__libc_init_array+0x3c>)
 8007aac:	1b64      	subs	r4, r4, r5
 8007aae:	10a4      	asrs	r4, r4, #2
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	f002 ff8a 	bl	800a9cc <_init>
 8007ab8:	2600      	movs	r6, #0
 8007aba:	4d0a      	ldr	r5, [pc, #40]	@ (8007ae4 <__libc_init_array+0x40>)
 8007abc:	4c0a      	ldr	r4, [pc, #40]	@ (8007ae8 <__libc_init_array+0x44>)
 8007abe:	1b64      	subs	r4, r4, r5
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	0800adf8 	.word	0x0800adf8
 8007ae0:	0800adf8 	.word	0x0800adf8
 8007ae4:	0800adf8 	.word	0x0800adf8
 8007ae8:	0800adfc 	.word	0x0800adfc

08007aec <__retarget_lock_init_recursive>:
 8007aec:	4770      	bx	lr

08007aee <__retarget_lock_acquire_recursive>:
 8007aee:	4770      	bx	lr

08007af0 <__retarget_lock_release_recursive>:
 8007af0:	4770      	bx	lr

08007af2 <memchr>:
 8007af2:	4603      	mov	r3, r0
 8007af4:	b510      	push	{r4, lr}
 8007af6:	b2c9      	uxtb	r1, r1
 8007af8:	4402      	add	r2, r0
 8007afa:	4293      	cmp	r3, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	d101      	bne.n	8007b04 <memchr+0x12>
 8007b00:	2000      	movs	r0, #0
 8007b02:	e003      	b.n	8007b0c <memchr+0x1a>
 8007b04:	7804      	ldrb	r4, [r0, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	428c      	cmp	r4, r1
 8007b0a:	d1f6      	bne.n	8007afa <memchr+0x8>
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <quorem>:
 8007b0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	6903      	ldr	r3, [r0, #16]
 8007b14:	690c      	ldr	r4, [r1, #16]
 8007b16:	4607      	mov	r7, r0
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	db7e      	blt.n	8007c1a <quorem+0x10c>
 8007b1c:	3c01      	subs	r4, #1
 8007b1e:	00a3      	lsls	r3, r4, #2
 8007b20:	f100 0514 	add.w	r5, r0, #20
 8007b24:	f101 0814 	add.w	r8, r1, #20
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b2e:	9301      	str	r3, [sp, #4]
 8007b30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b44:	d32e      	bcc.n	8007ba4 <quorem+0x96>
 8007b46:	f04f 0a00 	mov.w	sl, #0
 8007b4a:	46c4      	mov	ip, r8
 8007b4c:	46ae      	mov	lr, r5
 8007b4e:	46d3      	mov	fp, sl
 8007b50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b54:	b298      	uxth	r0, r3
 8007b56:	fb06 a000 	mla	r0, r6, r0, sl
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	0c02      	lsrs	r2, r0, #16
 8007b5e:	fb06 2303 	mla	r3, r6, r3, r2
 8007b62:	f8de 2000 	ldr.w	r2, [lr]
 8007b66:	b280      	uxth	r0, r0
 8007b68:	b292      	uxth	r2, r2
 8007b6a:	1a12      	subs	r2, r2, r0
 8007b6c:	445a      	add	r2, fp
 8007b6e:	f8de 0000 	ldr.w	r0, [lr]
 8007b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b80:	b292      	uxth	r2, r2
 8007b82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007b86:	45e1      	cmp	r9, ip
 8007b88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007b8c:	f84e 2b04 	str.w	r2, [lr], #4
 8007b90:	d2de      	bcs.n	8007b50 <quorem+0x42>
 8007b92:	9b00      	ldr	r3, [sp, #0]
 8007b94:	58eb      	ldr	r3, [r5, r3]
 8007b96:	b92b      	cbnz	r3, 8007ba4 <quorem+0x96>
 8007b98:	9b01      	ldr	r3, [sp, #4]
 8007b9a:	3b04      	subs	r3, #4
 8007b9c:	429d      	cmp	r5, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	d32f      	bcc.n	8007c02 <quorem+0xf4>
 8007ba2:	613c      	str	r4, [r7, #16]
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	f001 f979 	bl	8008e9c <__mcmp>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	db25      	blt.n	8007bfa <quorem+0xec>
 8007bae:	4629      	mov	r1, r5
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bb6:	f8d1 c000 	ldr.w	ip, [r1]
 8007bba:	fa1f fe82 	uxth.w	lr, r2
 8007bbe:	fa1f f38c 	uxth.w	r3, ip
 8007bc2:	eba3 030e 	sub.w	r3, r3, lr
 8007bc6:	4403      	add	r3, r0
 8007bc8:	0c12      	lsrs	r2, r2, #16
 8007bca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bd8:	45c1      	cmp	r9, r8
 8007bda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bde:	f841 3b04 	str.w	r3, [r1], #4
 8007be2:	d2e6      	bcs.n	8007bb2 <quorem+0xa4>
 8007be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bec:	b922      	cbnz	r2, 8007bf8 <quorem+0xea>
 8007bee:	3b04      	subs	r3, #4
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	d30b      	bcc.n	8007c0e <quorem+0x100>
 8007bf6:	613c      	str	r4, [r7, #16]
 8007bf8:	3601      	adds	r6, #1
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	b003      	add	sp, #12
 8007bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c02:	6812      	ldr	r2, [r2, #0]
 8007c04:	3b04      	subs	r3, #4
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	d1cb      	bne.n	8007ba2 <quorem+0x94>
 8007c0a:	3c01      	subs	r4, #1
 8007c0c:	e7c6      	b.n	8007b9c <quorem+0x8e>
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	d1ef      	bne.n	8007bf6 <quorem+0xe8>
 8007c16:	3c01      	subs	r4, #1
 8007c18:	e7ea      	b.n	8007bf0 <quorem+0xe2>
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	e7ee      	b.n	8007bfc <quorem+0xee>
	...

08007c20 <_dtoa_r>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4614      	mov	r4, r2
 8007c26:	461d      	mov	r5, r3
 8007c28:	69c7      	ldr	r7, [r0, #28]
 8007c2a:	b097      	sub	sp, #92	@ 0x5c
 8007c2c:	4683      	mov	fp, r0
 8007c2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007c32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007c34:	b97f      	cbnz	r7, 8007c56 <_dtoa_r+0x36>
 8007c36:	2010      	movs	r0, #16
 8007c38:	f000 fe02 	bl	8008840 <malloc>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c42:	b920      	cbnz	r0, 8007c4e <_dtoa_r+0x2e>
 8007c44:	21ef      	movs	r1, #239	@ 0xef
 8007c46:	4ba8      	ldr	r3, [pc, #672]	@ (8007ee8 <_dtoa_r+0x2c8>)
 8007c48:	48a8      	ldr	r0, [pc, #672]	@ (8007eec <_dtoa_r+0x2cc>)
 8007c4a:	f001 faf5 	bl	8009238 <__assert_func>
 8007c4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c52:	6007      	str	r7, [r0, #0]
 8007c54:	60c7      	str	r7, [r0, #12]
 8007c56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c5a:	6819      	ldr	r1, [r3, #0]
 8007c5c:	b159      	cbz	r1, 8007c76 <_dtoa_r+0x56>
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	2301      	movs	r3, #1
 8007c62:	4093      	lsls	r3, r2
 8007c64:	604a      	str	r2, [r1, #4]
 8007c66:	608b      	str	r3, [r1, #8]
 8007c68:	4658      	mov	r0, fp
 8007c6a:	f000 fedf 	bl	8008a2c <_Bfree>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	1e2b      	subs	r3, r5, #0
 8007c78:	bfaf      	iteee	ge
 8007c7a:	2300      	movge	r3, #0
 8007c7c:	2201      	movlt	r2, #1
 8007c7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007c82:	9303      	strlt	r3, [sp, #12]
 8007c84:	bfa8      	it	ge
 8007c86:	6033      	strge	r3, [r6, #0]
 8007c88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007c8c:	4b98      	ldr	r3, [pc, #608]	@ (8007ef0 <_dtoa_r+0x2d0>)
 8007c8e:	bfb8      	it	lt
 8007c90:	6032      	strlt	r2, [r6, #0]
 8007c92:	ea33 0308 	bics.w	r3, r3, r8
 8007c96:	d112      	bne.n	8007cbe <_dtoa_r+0x9e>
 8007c98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007c9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	f000 8550 	beq.w	800874a <_dtoa_r+0xb2a>
 8007caa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007cac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007ef4 <_dtoa_r+0x2d4>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 8552 	beq.w	800875a <_dtoa_r+0xb3a>
 8007cb6:	f10a 0303 	add.w	r3, sl, #3
 8007cba:	f000 bd4c 	b.w	8008756 <_dtoa_r+0xb36>
 8007cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cc2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007cc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f7f8 fe6b 	bl	80009a8 <__aeabi_dcmpeq>
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	b158      	cbz	r0, 8007cee <_dtoa_r+0xce>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007cde:	b113      	cbz	r3, 8007ce6 <_dtoa_r+0xc6>
 8007ce0:	4b85      	ldr	r3, [pc, #532]	@ (8007ef8 <_dtoa_r+0x2d8>)
 8007ce2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ce4:	6013      	str	r3, [r2, #0]
 8007ce6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007efc <_dtoa_r+0x2dc>
 8007cea:	f000 bd36 	b.w	800875a <_dtoa_r+0xb3a>
 8007cee:	ab14      	add	r3, sp, #80	@ 0x50
 8007cf0:	9301      	str	r3, [sp, #4]
 8007cf2:	ab15      	add	r3, sp, #84	@ 0x54
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007cfc:	f001 f97e 	bl	8008ffc <__d2b>
 8007d00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007d04:	4681      	mov	r9, r0
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	d077      	beq.n	8007dfa <_dtoa_r+0x1da>
 8007d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d20:	9712      	str	r7, [sp, #72]	@ 0x48
 8007d22:	4619      	mov	r1, r3
 8007d24:	2200      	movs	r2, #0
 8007d26:	4b76      	ldr	r3, [pc, #472]	@ (8007f00 <_dtoa_r+0x2e0>)
 8007d28:	f7f8 fa1e 	bl	8000168 <__aeabi_dsub>
 8007d2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007ed0 <_dtoa_r+0x2b0>)
 8007d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d32:	f7f8 fbd1 	bl	80004d8 <__aeabi_dmul>
 8007d36:	a368      	add	r3, pc, #416	@ (adr r3, 8007ed8 <_dtoa_r+0x2b8>)
 8007d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3c:	f7f8 fa16 	bl	800016c <__adddf3>
 8007d40:	4604      	mov	r4, r0
 8007d42:	4630      	mov	r0, r6
 8007d44:	460d      	mov	r5, r1
 8007d46:	f7f8 fb5d 	bl	8000404 <__aeabi_i2d>
 8007d4a:	a365      	add	r3, pc, #404	@ (adr r3, 8007ee0 <_dtoa_r+0x2c0>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fbc2 	bl	80004d8 <__aeabi_dmul>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4620      	mov	r0, r4
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	f7f8 fa06 	bl	800016c <__adddf3>
 8007d60:	4604      	mov	r4, r0
 8007d62:	460d      	mov	r5, r1
 8007d64:	f7f8 fe68 	bl	8000a38 <__aeabi_d2iz>
 8007d68:	2200      	movs	r2, #0
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	4629      	mov	r1, r5
 8007d72:	f7f8 fe23 	bl	80009bc <__aeabi_dcmplt>
 8007d76:	b140      	cbz	r0, 8007d8a <_dtoa_r+0x16a>
 8007d78:	4638      	mov	r0, r7
 8007d7a:	f7f8 fb43 	bl	8000404 <__aeabi_i2d>
 8007d7e:	4622      	mov	r2, r4
 8007d80:	462b      	mov	r3, r5
 8007d82:	f7f8 fe11 	bl	80009a8 <__aeabi_dcmpeq>
 8007d86:	b900      	cbnz	r0, 8007d8a <_dtoa_r+0x16a>
 8007d88:	3f01      	subs	r7, #1
 8007d8a:	2f16      	cmp	r7, #22
 8007d8c:	d853      	bhi.n	8007e36 <_dtoa_r+0x216>
 8007d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d92:	4b5c      	ldr	r3, [pc, #368]	@ (8007f04 <_dtoa_r+0x2e4>)
 8007d94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f7f8 fe0e 	bl	80009bc <__aeabi_dcmplt>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d04a      	beq.n	8007e3a <_dtoa_r+0x21a>
 8007da4:	2300      	movs	r3, #0
 8007da6:	3f01      	subs	r7, #1
 8007da8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007daa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007dac:	1b9b      	subs	r3, r3, r6
 8007dae:	1e5a      	subs	r2, r3, #1
 8007db0:	bf46      	itte	mi
 8007db2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007db6:	2300      	movmi	r3, #0
 8007db8:	f04f 0800 	movpl.w	r8, #0
 8007dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dbe:	bf48      	it	mi
 8007dc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007dc2:	2f00      	cmp	r7, #0
 8007dc4:	db3b      	blt.n	8007e3e <_dtoa_r+0x21e>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007dca:	443b      	add	r3, r7
 8007dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dce:	2300      	movs	r3, #0
 8007dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dd4:	2b09      	cmp	r3, #9
 8007dd6:	d866      	bhi.n	8007ea6 <_dtoa_r+0x286>
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	bfc4      	itt	gt
 8007ddc:	3b04      	subgt	r3, #4
 8007dde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007de0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007de2:	bfc8      	it	gt
 8007de4:	2400      	movgt	r4, #0
 8007de6:	f1a3 0302 	sub.w	r3, r3, #2
 8007dea:	bfd8      	it	le
 8007dec:	2401      	movle	r4, #1
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d864      	bhi.n	8007ebc <_dtoa_r+0x29c>
 8007df2:	e8df f003 	tbb	[pc, r3]
 8007df6:	382b      	.short	0x382b
 8007df8:	5636      	.short	0x5636
 8007dfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007dfe:	441e      	add	r6, r3
 8007e00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	bfc1      	itttt	gt
 8007e08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e18:	bfd6      	itet	le
 8007e1a:	f1c3 0320 	rsble	r3, r3, #32
 8007e1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007e22:	fa04 f003 	lslle.w	r0, r4, r3
 8007e26:	f7f8 fadd 	bl	80003e4 <__aeabi_ui2d>
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e30:	3e01      	subs	r6, #1
 8007e32:	9212      	str	r2, [sp, #72]	@ 0x48
 8007e34:	e775      	b.n	8007d22 <_dtoa_r+0x102>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e7b6      	b.n	8007da8 <_dtoa_r+0x188>
 8007e3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007e3c:	e7b5      	b.n	8007daa <_dtoa_r+0x18a>
 8007e3e:	427b      	negs	r3, r7
 8007e40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e42:	2300      	movs	r3, #0
 8007e44:	eba8 0807 	sub.w	r8, r8, r7
 8007e48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e4a:	e7c2      	b.n	8007dd2 <_dtoa_r+0x1b2>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dc35      	bgt.n	8007ec2 <_dtoa_r+0x2a2>
 8007e56:	2301      	movs	r3, #1
 8007e58:	461a      	mov	r2, r3
 8007e5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007e5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007e60:	e00b      	b.n	8007e7a <_dtoa_r+0x25a>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e7f3      	b.n	8007e4e <_dtoa_r+0x22e>
 8007e66:	2300      	movs	r3, #0
 8007e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e6c:	18fb      	adds	r3, r7, r3
 8007e6e:	9308      	str	r3, [sp, #32]
 8007e70:	3301      	adds	r3, #1
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	bfb8      	it	lt
 8007e78:	2301      	movlt	r3, #1
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	2204      	movs	r2, #4
 8007e7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e82:	f102 0514 	add.w	r5, r2, #20
 8007e86:	429d      	cmp	r5, r3
 8007e88:	d91f      	bls.n	8007eca <_dtoa_r+0x2aa>
 8007e8a:	6041      	str	r1, [r0, #4]
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f000 fd8d 	bl	80089ac <_Balloc>
 8007e92:	4682      	mov	sl, r0
 8007e94:	2800      	cmp	r0, #0
 8007e96:	d139      	bne.n	8007f0c <_dtoa_r+0x2ec>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007f08 <_dtoa_r+0x2e8>)
 8007ea0:	e6d2      	b.n	8007c48 <_dtoa_r+0x28>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e7e0      	b.n	8007e68 <_dtoa_r+0x248>
 8007ea6:	2401      	movs	r4, #1
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007eac:	9320      	str	r3, [sp, #128]	@ 0x80
 8007eae:	f04f 33ff 	mov.w	r3, #4294967295
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007eb8:	2312      	movs	r3, #18
 8007eba:	e7d0      	b.n	8007e5e <_dtoa_r+0x23e>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ec0:	e7f5      	b.n	8007eae <_dtoa_r+0x28e>
 8007ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ec4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ec8:	e7d7      	b.n	8007e7a <_dtoa_r+0x25a>
 8007eca:	3101      	adds	r1, #1
 8007ecc:	0052      	lsls	r2, r2, #1
 8007ece:	e7d8      	b.n	8007e82 <_dtoa_r+0x262>
 8007ed0:	636f4361 	.word	0x636f4361
 8007ed4:	3fd287a7 	.word	0x3fd287a7
 8007ed8:	8b60c8b3 	.word	0x8b60c8b3
 8007edc:	3fc68a28 	.word	0x3fc68a28
 8007ee0:	509f79fb 	.word	0x509f79fb
 8007ee4:	3fd34413 	.word	0x3fd34413
 8007ee8:	0800aa53 	.word	0x0800aa53
 8007eec:	0800aa6a 	.word	0x0800aa6a
 8007ef0:	7ff00000 	.word	0x7ff00000
 8007ef4:	0800aa4f 	.word	0x0800aa4f
 8007ef8:	0800aa23 	.word	0x0800aa23
 8007efc:	0800aa22 	.word	0x0800aa22
 8007f00:	3ff80000 	.word	0x3ff80000
 8007f04:	0800ab60 	.word	0x0800ab60
 8007f08:	0800aac2 	.word	0x0800aac2
 8007f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f10:	6018      	str	r0, [r3, #0]
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	2b0e      	cmp	r3, #14
 8007f16:	f200 80a4 	bhi.w	8008062 <_dtoa_r+0x442>
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	f000 80a1 	beq.w	8008062 <_dtoa_r+0x442>
 8007f20:	2f00      	cmp	r7, #0
 8007f22:	dd33      	ble.n	8007f8c <_dtoa_r+0x36c>
 8007f24:	4b86      	ldr	r3, [pc, #536]	@ (8008140 <_dtoa_r+0x520>)
 8007f26:	f007 020f 	and.w	r2, r7, #15
 8007f2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f2e:	05f8      	lsls	r0, r7, #23
 8007f30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f3c:	d516      	bpl.n	8007f6c <_dtoa_r+0x34c>
 8007f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f42:	4b80      	ldr	r3, [pc, #512]	@ (8008144 <_dtoa_r+0x524>)
 8007f44:	2603      	movs	r6, #3
 8007f46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f4a:	f7f8 fbef 	bl	800072c <__aeabi_ddiv>
 8007f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f52:	f004 040f 	and.w	r4, r4, #15
 8007f56:	4d7b      	ldr	r5, [pc, #492]	@ (8008144 <_dtoa_r+0x524>)
 8007f58:	b954      	cbnz	r4, 8007f70 <_dtoa_r+0x350>
 8007f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f62:	f7f8 fbe3 	bl	800072c <__aeabi_ddiv>
 8007f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f6a:	e028      	b.n	8007fbe <_dtoa_r+0x39e>
 8007f6c:	2602      	movs	r6, #2
 8007f6e:	e7f2      	b.n	8007f56 <_dtoa_r+0x336>
 8007f70:	07e1      	lsls	r1, r4, #31
 8007f72:	d508      	bpl.n	8007f86 <_dtoa_r+0x366>
 8007f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f7c:	f7f8 faac 	bl	80004d8 <__aeabi_dmul>
 8007f80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f84:	3601      	adds	r6, #1
 8007f86:	1064      	asrs	r4, r4, #1
 8007f88:	3508      	adds	r5, #8
 8007f8a:	e7e5      	b.n	8007f58 <_dtoa_r+0x338>
 8007f8c:	f000 80d2 	beq.w	8008134 <_dtoa_r+0x514>
 8007f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f94:	427c      	negs	r4, r7
 8007f96:	4b6a      	ldr	r3, [pc, #424]	@ (8008140 <_dtoa_r+0x520>)
 8007f98:	f004 020f 	and.w	r2, r4, #15
 8007f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fa98 	bl	80004d8 <__aeabi_dmul>
 8007fa8:	2602      	movs	r6, #2
 8007faa:	2300      	movs	r3, #0
 8007fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fb0:	4d64      	ldr	r5, [pc, #400]	@ (8008144 <_dtoa_r+0x524>)
 8007fb2:	1124      	asrs	r4, r4, #4
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	f040 80b2 	bne.w	800811e <_dtoa_r+0x4fe>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1d3      	bne.n	8007f66 <_dtoa_r+0x346>
 8007fbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 80b7 	beq.w	8008138 <_dtoa_r+0x518>
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4b5d      	ldr	r3, [pc, #372]	@ (8008148 <_dtoa_r+0x528>)
 8007fd2:	f7f8 fcf3 	bl	80009bc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f000 80ae 	beq.w	8008138 <_dtoa_r+0x518>
 8007fdc:	9b07      	ldr	r3, [sp, #28]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	f000 80aa 	beq.w	8008138 <_dtoa_r+0x518>
 8007fe4:	9b08      	ldr	r3, [sp, #32]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd37      	ble.n	800805a <_dtoa_r+0x43a>
 8007fea:	1e7b      	subs	r3, r7, #1
 8007fec:	4620      	mov	r0, r4
 8007fee:	9304      	str	r3, [sp, #16]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4629      	mov	r1, r5
 8007ff4:	4b55      	ldr	r3, [pc, #340]	@ (800814c <_dtoa_r+0x52c>)
 8007ff6:	f7f8 fa6f 	bl	80004d8 <__aeabi_dmul>
 8007ffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ffe:	9c08      	ldr	r4, [sp, #32]
 8008000:	3601      	adds	r6, #1
 8008002:	4630      	mov	r0, r6
 8008004:	f7f8 f9fe 	bl	8000404 <__aeabi_i2d>
 8008008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800800c:	f7f8 fa64 	bl	80004d8 <__aeabi_dmul>
 8008010:	2200      	movs	r2, #0
 8008012:	4b4f      	ldr	r3, [pc, #316]	@ (8008150 <_dtoa_r+0x530>)
 8008014:	f7f8 f8aa 	bl	800016c <__adddf3>
 8008018:	4605      	mov	r5, r0
 800801a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800801e:	2c00      	cmp	r4, #0
 8008020:	f040 809a 	bne.w	8008158 <_dtoa_r+0x538>
 8008024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008028:	2200      	movs	r2, #0
 800802a:	4b4a      	ldr	r3, [pc, #296]	@ (8008154 <_dtoa_r+0x534>)
 800802c:	f7f8 f89c 	bl	8000168 <__aeabi_dsub>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008038:	462a      	mov	r2, r5
 800803a:	4633      	mov	r3, r6
 800803c:	f7f8 fcdc 	bl	80009f8 <__aeabi_dcmpgt>
 8008040:	2800      	cmp	r0, #0
 8008042:	f040 828e 	bne.w	8008562 <_dtoa_r+0x942>
 8008046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804a:	462a      	mov	r2, r5
 800804c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008050:	f7f8 fcb4 	bl	80009bc <__aeabi_dcmplt>
 8008054:	2800      	cmp	r0, #0
 8008056:	f040 8127 	bne.w	80082a8 <_dtoa_r+0x688>
 800805a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800805e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008062:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008064:	2b00      	cmp	r3, #0
 8008066:	f2c0 8163 	blt.w	8008330 <_dtoa_r+0x710>
 800806a:	2f0e      	cmp	r7, #14
 800806c:	f300 8160 	bgt.w	8008330 <_dtoa_r+0x710>
 8008070:	4b33      	ldr	r3, [pc, #204]	@ (8008140 <_dtoa_r+0x520>)
 8008072:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008076:	e9d3 3400 	ldrd	r3, r4, [r3]
 800807a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800807e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008080:	2b00      	cmp	r3, #0
 8008082:	da03      	bge.n	800808c <_dtoa_r+0x46c>
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f340 8100 	ble.w	800828c <_dtoa_r+0x66c>
 800808c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008090:	4656      	mov	r6, sl
 8008092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008096:	4620      	mov	r0, r4
 8008098:	4629      	mov	r1, r5
 800809a:	f7f8 fb47 	bl	800072c <__aeabi_ddiv>
 800809e:	f7f8 fccb 	bl	8000a38 <__aeabi_d2iz>
 80080a2:	4680      	mov	r8, r0
 80080a4:	f7f8 f9ae 	bl	8000404 <__aeabi_i2d>
 80080a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ac:	f7f8 fa14 	bl	80004d8 <__aeabi_dmul>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	4620      	mov	r0, r4
 80080b6:	4629      	mov	r1, r5
 80080b8:	f7f8 f856 	bl	8000168 <__aeabi_dsub>
 80080bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080c0:	9d07      	ldr	r5, [sp, #28]
 80080c2:	f806 4b01 	strb.w	r4, [r6], #1
 80080c6:	eba6 040a 	sub.w	r4, r6, sl
 80080ca:	42a5      	cmp	r5, r4
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	f040 8116 	bne.w	8008300 <_dtoa_r+0x6e0>
 80080d4:	f7f8 f84a 	bl	800016c <__adddf3>
 80080d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080dc:	4604      	mov	r4, r0
 80080de:	460d      	mov	r5, r1
 80080e0:	f7f8 fc8a 	bl	80009f8 <__aeabi_dcmpgt>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f040 80f8 	bne.w	80082da <_dtoa_r+0x6ba>
 80080ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ee:	4620      	mov	r0, r4
 80080f0:	4629      	mov	r1, r5
 80080f2:	f7f8 fc59 	bl	80009a8 <__aeabi_dcmpeq>
 80080f6:	b118      	cbz	r0, 8008100 <_dtoa_r+0x4e0>
 80080f8:	f018 0f01 	tst.w	r8, #1
 80080fc:	f040 80ed 	bne.w	80082da <_dtoa_r+0x6ba>
 8008100:	4649      	mov	r1, r9
 8008102:	4658      	mov	r0, fp
 8008104:	f000 fc92 	bl	8008a2c <_Bfree>
 8008108:	2300      	movs	r3, #0
 800810a:	7033      	strb	r3, [r6, #0]
 800810c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800810e:	3701      	adds	r7, #1
 8008110:	601f      	str	r7, [r3, #0]
 8008112:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8320 	beq.w	800875a <_dtoa_r+0xb3a>
 800811a:	601e      	str	r6, [r3, #0]
 800811c:	e31d      	b.n	800875a <_dtoa_r+0xb3a>
 800811e:	07e2      	lsls	r2, r4, #31
 8008120:	d505      	bpl.n	800812e <_dtoa_r+0x50e>
 8008122:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008126:	f7f8 f9d7 	bl	80004d8 <__aeabi_dmul>
 800812a:	2301      	movs	r3, #1
 800812c:	3601      	adds	r6, #1
 800812e:	1064      	asrs	r4, r4, #1
 8008130:	3508      	adds	r5, #8
 8008132:	e73f      	b.n	8007fb4 <_dtoa_r+0x394>
 8008134:	2602      	movs	r6, #2
 8008136:	e742      	b.n	8007fbe <_dtoa_r+0x39e>
 8008138:	9c07      	ldr	r4, [sp, #28]
 800813a:	9704      	str	r7, [sp, #16]
 800813c:	e761      	b.n	8008002 <_dtoa_r+0x3e2>
 800813e:	bf00      	nop
 8008140:	0800ab60 	.word	0x0800ab60
 8008144:	0800ab38 	.word	0x0800ab38
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	40240000 	.word	0x40240000
 8008150:	401c0000 	.word	0x401c0000
 8008154:	40140000 	.word	0x40140000
 8008158:	4b70      	ldr	r3, [pc, #448]	@ (800831c <_dtoa_r+0x6fc>)
 800815a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800815c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008160:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008164:	4454      	add	r4, sl
 8008166:	2900      	cmp	r1, #0
 8008168:	d045      	beq.n	80081f6 <_dtoa_r+0x5d6>
 800816a:	2000      	movs	r0, #0
 800816c:	496c      	ldr	r1, [pc, #432]	@ (8008320 <_dtoa_r+0x700>)
 800816e:	f7f8 fadd 	bl	800072c <__aeabi_ddiv>
 8008172:	4633      	mov	r3, r6
 8008174:	462a      	mov	r2, r5
 8008176:	f7f7 fff7 	bl	8000168 <__aeabi_dsub>
 800817a:	4656      	mov	r6, sl
 800817c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008184:	f7f8 fc58 	bl	8000a38 <__aeabi_d2iz>
 8008188:	4605      	mov	r5, r0
 800818a:	f7f8 f93b 	bl	8000404 <__aeabi_i2d>
 800818e:	4602      	mov	r2, r0
 8008190:	460b      	mov	r3, r1
 8008192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008196:	f7f7 ffe7 	bl	8000168 <__aeabi_dsub>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	3530      	adds	r5, #48	@ 0x30
 80081a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081a8:	f806 5b01 	strb.w	r5, [r6], #1
 80081ac:	f7f8 fc06 	bl	80009bc <__aeabi_dcmplt>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d163      	bne.n	800827c <_dtoa_r+0x65c>
 80081b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b8:	2000      	movs	r0, #0
 80081ba:	495a      	ldr	r1, [pc, #360]	@ (8008324 <_dtoa_r+0x704>)
 80081bc:	f7f7 ffd4 	bl	8000168 <__aeabi_dsub>
 80081c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081c4:	f7f8 fbfa 	bl	80009bc <__aeabi_dcmplt>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f040 8087 	bne.w	80082dc <_dtoa_r+0x6bc>
 80081ce:	42a6      	cmp	r6, r4
 80081d0:	f43f af43 	beq.w	800805a <_dtoa_r+0x43a>
 80081d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081d8:	2200      	movs	r2, #0
 80081da:	4b53      	ldr	r3, [pc, #332]	@ (8008328 <_dtoa_r+0x708>)
 80081dc:	f7f8 f97c 	bl	80004d8 <__aeabi_dmul>
 80081e0:	2200      	movs	r2, #0
 80081e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008328 <_dtoa_r+0x708>)
 80081ec:	f7f8 f974 	bl	80004d8 <__aeabi_dmul>
 80081f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f4:	e7c4      	b.n	8008180 <_dtoa_r+0x560>
 80081f6:	4631      	mov	r1, r6
 80081f8:	4628      	mov	r0, r5
 80081fa:	f7f8 f96d 	bl	80004d8 <__aeabi_dmul>
 80081fe:	4656      	mov	r6, sl
 8008200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008204:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820a:	f7f8 fc15 	bl	8000a38 <__aeabi_d2iz>
 800820e:	4605      	mov	r5, r0
 8008210:	f7f8 f8f8 	bl	8000404 <__aeabi_i2d>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821c:	f7f7 ffa4 	bl	8000168 <__aeabi_dsub>
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	3530      	adds	r5, #48	@ 0x30
 8008226:	f806 5b01 	strb.w	r5, [r6], #1
 800822a:	42a6      	cmp	r6, r4
 800822c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	d124      	bne.n	8008280 <_dtoa_r+0x660>
 8008236:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800823a:	4b39      	ldr	r3, [pc, #228]	@ (8008320 <_dtoa_r+0x700>)
 800823c:	f7f7 ff96 	bl	800016c <__adddf3>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008248:	f7f8 fbd6 	bl	80009f8 <__aeabi_dcmpgt>
 800824c:	2800      	cmp	r0, #0
 800824e:	d145      	bne.n	80082dc <_dtoa_r+0x6bc>
 8008250:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008254:	2000      	movs	r0, #0
 8008256:	4932      	ldr	r1, [pc, #200]	@ (8008320 <_dtoa_r+0x700>)
 8008258:	f7f7 ff86 	bl	8000168 <__aeabi_dsub>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008264:	f7f8 fbaa 	bl	80009bc <__aeabi_dcmplt>
 8008268:	2800      	cmp	r0, #0
 800826a:	f43f aef6 	beq.w	800805a <_dtoa_r+0x43a>
 800826e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008270:	1e73      	subs	r3, r6, #1
 8008272:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008274:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008278:	2b30      	cmp	r3, #48	@ 0x30
 800827a:	d0f8      	beq.n	800826e <_dtoa_r+0x64e>
 800827c:	9f04      	ldr	r7, [sp, #16]
 800827e:	e73f      	b.n	8008100 <_dtoa_r+0x4e0>
 8008280:	4b29      	ldr	r3, [pc, #164]	@ (8008328 <_dtoa_r+0x708>)
 8008282:	f7f8 f929 	bl	80004d8 <__aeabi_dmul>
 8008286:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828a:	e7bc      	b.n	8008206 <_dtoa_r+0x5e6>
 800828c:	d10c      	bne.n	80082a8 <_dtoa_r+0x688>
 800828e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008292:	2200      	movs	r2, #0
 8008294:	4b25      	ldr	r3, [pc, #148]	@ (800832c <_dtoa_r+0x70c>)
 8008296:	f7f8 f91f 	bl	80004d8 <__aeabi_dmul>
 800829a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800829e:	f7f8 fba1 	bl	80009e4 <__aeabi_dcmpge>
 80082a2:	2800      	cmp	r0, #0
 80082a4:	f000 815b 	beq.w	800855e <_dtoa_r+0x93e>
 80082a8:	2400      	movs	r4, #0
 80082aa:	4625      	mov	r5, r4
 80082ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80082ae:	4656      	mov	r6, sl
 80082b0:	43db      	mvns	r3, r3
 80082b2:	9304      	str	r3, [sp, #16]
 80082b4:	2700      	movs	r7, #0
 80082b6:	4621      	mov	r1, r4
 80082b8:	4658      	mov	r0, fp
 80082ba:	f000 fbb7 	bl	8008a2c <_Bfree>
 80082be:	2d00      	cmp	r5, #0
 80082c0:	d0dc      	beq.n	800827c <_dtoa_r+0x65c>
 80082c2:	b12f      	cbz	r7, 80082d0 <_dtoa_r+0x6b0>
 80082c4:	42af      	cmp	r7, r5
 80082c6:	d003      	beq.n	80082d0 <_dtoa_r+0x6b0>
 80082c8:	4639      	mov	r1, r7
 80082ca:	4658      	mov	r0, fp
 80082cc:	f000 fbae 	bl	8008a2c <_Bfree>
 80082d0:	4629      	mov	r1, r5
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fbaa 	bl	8008a2c <_Bfree>
 80082d8:	e7d0      	b.n	800827c <_dtoa_r+0x65c>
 80082da:	9704      	str	r7, [sp, #16]
 80082dc:	4633      	mov	r3, r6
 80082de:	461e      	mov	r6, r3
 80082e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082e4:	2a39      	cmp	r2, #57	@ 0x39
 80082e6:	d107      	bne.n	80082f8 <_dtoa_r+0x6d8>
 80082e8:	459a      	cmp	sl, r3
 80082ea:	d1f8      	bne.n	80082de <_dtoa_r+0x6be>
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	3201      	adds	r2, #1
 80082f0:	9204      	str	r2, [sp, #16]
 80082f2:	2230      	movs	r2, #48	@ 0x30
 80082f4:	f88a 2000 	strb.w	r2, [sl]
 80082f8:	781a      	ldrb	r2, [r3, #0]
 80082fa:	3201      	adds	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
 80082fe:	e7bd      	b.n	800827c <_dtoa_r+0x65c>
 8008300:	2200      	movs	r2, #0
 8008302:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <_dtoa_r+0x708>)
 8008304:	f7f8 f8e8 	bl	80004d8 <__aeabi_dmul>
 8008308:	2200      	movs	r2, #0
 800830a:	2300      	movs	r3, #0
 800830c:	4604      	mov	r4, r0
 800830e:	460d      	mov	r5, r1
 8008310:	f7f8 fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8008314:	2800      	cmp	r0, #0
 8008316:	f43f aebc 	beq.w	8008092 <_dtoa_r+0x472>
 800831a:	e6f1      	b.n	8008100 <_dtoa_r+0x4e0>
 800831c:	0800ab60 	.word	0x0800ab60
 8008320:	3fe00000 	.word	0x3fe00000
 8008324:	3ff00000 	.word	0x3ff00000
 8008328:	40240000 	.word	0x40240000
 800832c:	40140000 	.word	0x40140000
 8008330:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80db 	beq.w	80084ee <_dtoa_r+0x8ce>
 8008338:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800833a:	2a01      	cmp	r2, #1
 800833c:	f300 80bf 	bgt.w	80084be <_dtoa_r+0x89e>
 8008340:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008342:	2a00      	cmp	r2, #0
 8008344:	f000 80b7 	beq.w	80084b6 <_dtoa_r+0x896>
 8008348:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800834c:	4646      	mov	r6, r8
 800834e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008350:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008352:	2101      	movs	r1, #1
 8008354:	441a      	add	r2, r3
 8008356:	4658      	mov	r0, fp
 8008358:	4498      	add	r8, r3
 800835a:	9209      	str	r2, [sp, #36]	@ 0x24
 800835c:	f000 fc1a 	bl	8008b94 <__i2b>
 8008360:	4605      	mov	r5, r0
 8008362:	b15e      	cbz	r6, 800837c <_dtoa_r+0x75c>
 8008364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd08      	ble.n	800837c <_dtoa_r+0x75c>
 800836a:	42b3      	cmp	r3, r6
 800836c:	bfa8      	it	ge
 800836e:	4633      	movge	r3, r6
 8008370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008372:	eba8 0803 	sub.w	r8, r8, r3
 8008376:	1af6      	subs	r6, r6, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	9309      	str	r3, [sp, #36]	@ 0x24
 800837c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800837e:	b1f3      	cbz	r3, 80083be <_dtoa_r+0x79e>
 8008380:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 80b7 	beq.w	80084f6 <_dtoa_r+0x8d6>
 8008388:	b18c      	cbz	r4, 80083ae <_dtoa_r+0x78e>
 800838a:	4629      	mov	r1, r5
 800838c:	4622      	mov	r2, r4
 800838e:	4658      	mov	r0, fp
 8008390:	f000 fcbe 	bl	8008d10 <__pow5mult>
 8008394:	464a      	mov	r2, r9
 8008396:	4601      	mov	r1, r0
 8008398:	4605      	mov	r5, r0
 800839a:	4658      	mov	r0, fp
 800839c:	f000 fc10 	bl	8008bc0 <__multiply>
 80083a0:	4649      	mov	r1, r9
 80083a2:	9004      	str	r0, [sp, #16]
 80083a4:	4658      	mov	r0, fp
 80083a6:	f000 fb41 	bl	8008a2c <_Bfree>
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	4699      	mov	r9, r3
 80083ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083b0:	1b1a      	subs	r2, r3, r4
 80083b2:	d004      	beq.n	80083be <_dtoa_r+0x79e>
 80083b4:	4649      	mov	r1, r9
 80083b6:	4658      	mov	r0, fp
 80083b8:	f000 fcaa 	bl	8008d10 <__pow5mult>
 80083bc:	4681      	mov	r9, r0
 80083be:	2101      	movs	r1, #1
 80083c0:	4658      	mov	r0, fp
 80083c2:	f000 fbe7 	bl	8008b94 <__i2b>
 80083c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c8:	4604      	mov	r4, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 81c9 	beq.w	8008762 <_dtoa_r+0xb42>
 80083d0:	461a      	mov	r2, r3
 80083d2:	4601      	mov	r1, r0
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fc9b 	bl	8008d10 <__pow5mult>
 80083da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083dc:	4604      	mov	r4, r0
 80083de:	2b01      	cmp	r3, #1
 80083e0:	f300 808f 	bgt.w	8008502 <_dtoa_r+0x8e2>
 80083e4:	9b02      	ldr	r3, [sp, #8]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f040 8087 	bne.w	80084fa <_dtoa_r+0x8da>
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 8083 	bne.w	80084fe <_dtoa_r+0x8de>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083fe:	0d1b      	lsrs	r3, r3, #20
 8008400:	051b      	lsls	r3, r3, #20
 8008402:	b12b      	cbz	r3, 8008410 <_dtoa_r+0x7f0>
 8008404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008406:	f108 0801 	add.w	r8, r8, #1
 800840a:	3301      	adds	r3, #1
 800840c:	9309      	str	r3, [sp, #36]	@ 0x24
 800840e:	2301      	movs	r3, #1
 8008410:	930a      	str	r3, [sp, #40]	@ 0x28
 8008412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 81aa 	beq.w	800876e <_dtoa_r+0xb4e>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008420:	6918      	ldr	r0, [r3, #16]
 8008422:	f000 fb6b 	bl	8008afc <__hi0bits>
 8008426:	f1c0 0020 	rsb	r0, r0, #32
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	4418      	add	r0, r3
 800842e:	f010 001f 	ands.w	r0, r0, #31
 8008432:	d071      	beq.n	8008518 <_dtoa_r+0x8f8>
 8008434:	f1c0 0320 	rsb	r3, r0, #32
 8008438:	2b04      	cmp	r3, #4
 800843a:	dd65      	ble.n	8008508 <_dtoa_r+0x8e8>
 800843c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800843e:	f1c0 001c 	rsb	r0, r0, #28
 8008442:	4403      	add	r3, r0
 8008444:	4480      	add	r8, r0
 8008446:	4406      	add	r6, r0
 8008448:	9309      	str	r3, [sp, #36]	@ 0x24
 800844a:	f1b8 0f00 	cmp.w	r8, #0
 800844e:	dd05      	ble.n	800845c <_dtoa_r+0x83c>
 8008450:	4649      	mov	r1, r9
 8008452:	4642      	mov	r2, r8
 8008454:	4658      	mov	r0, fp
 8008456:	f000 fcb5 	bl	8008dc4 <__lshift>
 800845a:	4681      	mov	r9, r0
 800845c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800845e:	2b00      	cmp	r3, #0
 8008460:	dd05      	ble.n	800846e <_dtoa_r+0x84e>
 8008462:	4621      	mov	r1, r4
 8008464:	461a      	mov	r2, r3
 8008466:	4658      	mov	r0, fp
 8008468:	f000 fcac 	bl	8008dc4 <__lshift>
 800846c:	4604      	mov	r4, r0
 800846e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d053      	beq.n	800851c <_dtoa_r+0x8fc>
 8008474:	4621      	mov	r1, r4
 8008476:	4648      	mov	r0, r9
 8008478:	f000 fd10 	bl	8008e9c <__mcmp>
 800847c:	2800      	cmp	r0, #0
 800847e:	da4d      	bge.n	800851c <_dtoa_r+0x8fc>
 8008480:	1e7b      	subs	r3, r7, #1
 8008482:	4649      	mov	r1, r9
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	220a      	movs	r2, #10
 8008488:	2300      	movs	r3, #0
 800848a:	4658      	mov	r0, fp
 800848c:	f000 faf0 	bl	8008a70 <__multadd>
 8008490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008492:	4681      	mov	r9, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 816c 	beq.w	8008772 <_dtoa_r+0xb52>
 800849a:	2300      	movs	r3, #0
 800849c:	4629      	mov	r1, r5
 800849e:	220a      	movs	r2, #10
 80084a0:	4658      	mov	r0, fp
 80084a2:	f000 fae5 	bl	8008a70 <__multadd>
 80084a6:	9b08      	ldr	r3, [sp, #32]
 80084a8:	4605      	mov	r5, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dc61      	bgt.n	8008572 <_dtoa_r+0x952>
 80084ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	dc3b      	bgt.n	800852c <_dtoa_r+0x90c>
 80084b4:	e05d      	b.n	8008572 <_dtoa_r+0x952>
 80084b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80084b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084bc:	e746      	b.n	800834c <_dtoa_r+0x72c>
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	1e5c      	subs	r4, r3, #1
 80084c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	bfbf      	itttt	lt
 80084c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80084ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80084cc:	1ae3      	sublt	r3, r4, r3
 80084ce:	18d2      	addlt	r2, r2, r3
 80084d0:	bfa8      	it	ge
 80084d2:	1b1c      	subge	r4, r3, r4
 80084d4:	9b07      	ldr	r3, [sp, #28]
 80084d6:	bfbe      	ittt	lt
 80084d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80084da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80084dc:	2400      	movlt	r4, #0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bfb5      	itete	lt
 80084e2:	eba8 0603 	sublt.w	r6, r8, r3
 80084e6:	4646      	movge	r6, r8
 80084e8:	2300      	movlt	r3, #0
 80084ea:	9b07      	ldrge	r3, [sp, #28]
 80084ec:	e730      	b.n	8008350 <_dtoa_r+0x730>
 80084ee:	4646      	mov	r6, r8
 80084f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80084f4:	e735      	b.n	8008362 <_dtoa_r+0x742>
 80084f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80084f8:	e75c      	b.n	80083b4 <_dtoa_r+0x794>
 80084fa:	2300      	movs	r3, #0
 80084fc:	e788      	b.n	8008410 <_dtoa_r+0x7f0>
 80084fe:	9b02      	ldr	r3, [sp, #8]
 8008500:	e786      	b.n	8008410 <_dtoa_r+0x7f0>
 8008502:	2300      	movs	r3, #0
 8008504:	930a      	str	r3, [sp, #40]	@ 0x28
 8008506:	e788      	b.n	800841a <_dtoa_r+0x7fa>
 8008508:	d09f      	beq.n	800844a <_dtoa_r+0x82a>
 800850a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800850c:	331c      	adds	r3, #28
 800850e:	441a      	add	r2, r3
 8008510:	4498      	add	r8, r3
 8008512:	441e      	add	r6, r3
 8008514:	9209      	str	r2, [sp, #36]	@ 0x24
 8008516:	e798      	b.n	800844a <_dtoa_r+0x82a>
 8008518:	4603      	mov	r3, r0
 800851a:	e7f6      	b.n	800850a <_dtoa_r+0x8ea>
 800851c:	9b07      	ldr	r3, [sp, #28]
 800851e:	9704      	str	r7, [sp, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	dc20      	bgt.n	8008566 <_dtoa_r+0x946>
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008528:	2b02      	cmp	r3, #2
 800852a:	dd1e      	ble.n	800856a <_dtoa_r+0x94a>
 800852c:	9b08      	ldr	r3, [sp, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f aebc 	bne.w	80082ac <_dtoa_r+0x68c>
 8008534:	4621      	mov	r1, r4
 8008536:	2205      	movs	r2, #5
 8008538:	4658      	mov	r0, fp
 800853a:	f000 fa99 	bl	8008a70 <__multadd>
 800853e:	4601      	mov	r1, r0
 8008540:	4604      	mov	r4, r0
 8008542:	4648      	mov	r0, r9
 8008544:	f000 fcaa 	bl	8008e9c <__mcmp>
 8008548:	2800      	cmp	r0, #0
 800854a:	f77f aeaf 	ble.w	80082ac <_dtoa_r+0x68c>
 800854e:	2331      	movs	r3, #49	@ 0x31
 8008550:	4656      	mov	r6, sl
 8008552:	f806 3b01 	strb.w	r3, [r6], #1
 8008556:	9b04      	ldr	r3, [sp, #16]
 8008558:	3301      	adds	r3, #1
 800855a:	9304      	str	r3, [sp, #16]
 800855c:	e6aa      	b.n	80082b4 <_dtoa_r+0x694>
 800855e:	9c07      	ldr	r4, [sp, #28]
 8008560:	9704      	str	r7, [sp, #16]
 8008562:	4625      	mov	r5, r4
 8008564:	e7f3      	b.n	800854e <_dtoa_r+0x92e>
 8008566:	9b07      	ldr	r3, [sp, #28]
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800856c:	2b00      	cmp	r3, #0
 800856e:	f000 8104 	beq.w	800877a <_dtoa_r+0xb5a>
 8008572:	2e00      	cmp	r6, #0
 8008574:	dd05      	ble.n	8008582 <_dtoa_r+0x962>
 8008576:	4629      	mov	r1, r5
 8008578:	4632      	mov	r2, r6
 800857a:	4658      	mov	r0, fp
 800857c:	f000 fc22 	bl	8008dc4 <__lshift>
 8008580:	4605      	mov	r5, r0
 8008582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008584:	2b00      	cmp	r3, #0
 8008586:	d05a      	beq.n	800863e <_dtoa_r+0xa1e>
 8008588:	4658      	mov	r0, fp
 800858a:	6869      	ldr	r1, [r5, #4]
 800858c:	f000 fa0e 	bl	80089ac <_Balloc>
 8008590:	4606      	mov	r6, r0
 8008592:	b928      	cbnz	r0, 80085a0 <_dtoa_r+0x980>
 8008594:	4602      	mov	r2, r0
 8008596:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800859a:	4b83      	ldr	r3, [pc, #524]	@ (80087a8 <_dtoa_r+0xb88>)
 800859c:	f7ff bb54 	b.w	8007c48 <_dtoa_r+0x28>
 80085a0:	692a      	ldr	r2, [r5, #16]
 80085a2:	f105 010c 	add.w	r1, r5, #12
 80085a6:	3202      	adds	r2, #2
 80085a8:	0092      	lsls	r2, r2, #2
 80085aa:	300c      	adds	r0, #12
 80085ac:	f000 fe36 	bl	800921c <memcpy>
 80085b0:	2201      	movs	r2, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 fc05 	bl	8008dc4 <__lshift>
 80085ba:	462f      	mov	r7, r5
 80085bc:	4605      	mov	r5, r0
 80085be:	f10a 0301 	add.w	r3, sl, #1
 80085c2:	9307      	str	r3, [sp, #28]
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	4453      	add	r3, sl
 80085c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d2:	9b07      	ldr	r3, [sp, #28]
 80085d4:	4621      	mov	r1, r4
 80085d6:	3b01      	subs	r3, #1
 80085d8:	4648      	mov	r0, r9
 80085da:	9302      	str	r3, [sp, #8]
 80085dc:	f7ff fa97 	bl	8007b0e <quorem>
 80085e0:	4639      	mov	r1, r7
 80085e2:	9008      	str	r0, [sp, #32]
 80085e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80085e8:	4648      	mov	r0, r9
 80085ea:	f000 fc57 	bl	8008e9c <__mcmp>
 80085ee:	462a      	mov	r2, r5
 80085f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80085f2:	4621      	mov	r1, r4
 80085f4:	4658      	mov	r0, fp
 80085f6:	f000 fc6d 	bl	8008ed4 <__mdiff>
 80085fa:	68c2      	ldr	r2, [r0, #12]
 80085fc:	4606      	mov	r6, r0
 80085fe:	bb02      	cbnz	r2, 8008642 <_dtoa_r+0xa22>
 8008600:	4601      	mov	r1, r0
 8008602:	4648      	mov	r0, r9
 8008604:	f000 fc4a 	bl	8008e9c <__mcmp>
 8008608:	4602      	mov	r2, r0
 800860a:	4631      	mov	r1, r6
 800860c:	4658      	mov	r0, fp
 800860e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008610:	f000 fa0c 	bl	8008a2c <_Bfree>
 8008614:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008616:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008618:	9e07      	ldr	r6, [sp, #28]
 800861a:	ea43 0102 	orr.w	r1, r3, r2
 800861e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008620:	4319      	orrs	r1, r3
 8008622:	d110      	bne.n	8008646 <_dtoa_r+0xa26>
 8008624:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008628:	d029      	beq.n	800867e <_dtoa_r+0xa5e>
 800862a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	dd02      	ble.n	8008636 <_dtoa_r+0xa16>
 8008630:	9b08      	ldr	r3, [sp, #32]
 8008632:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008636:	9b02      	ldr	r3, [sp, #8]
 8008638:	f883 8000 	strb.w	r8, [r3]
 800863c:	e63b      	b.n	80082b6 <_dtoa_r+0x696>
 800863e:	4628      	mov	r0, r5
 8008640:	e7bb      	b.n	80085ba <_dtoa_r+0x99a>
 8008642:	2201      	movs	r2, #1
 8008644:	e7e1      	b.n	800860a <_dtoa_r+0x9ea>
 8008646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	db04      	blt.n	8008656 <_dtoa_r+0xa36>
 800864c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800864e:	430b      	orrs	r3, r1
 8008650:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008652:	430b      	orrs	r3, r1
 8008654:	d120      	bne.n	8008698 <_dtoa_r+0xa78>
 8008656:	2a00      	cmp	r2, #0
 8008658:	dded      	ble.n	8008636 <_dtoa_r+0xa16>
 800865a:	4649      	mov	r1, r9
 800865c:	2201      	movs	r2, #1
 800865e:	4658      	mov	r0, fp
 8008660:	f000 fbb0 	bl	8008dc4 <__lshift>
 8008664:	4621      	mov	r1, r4
 8008666:	4681      	mov	r9, r0
 8008668:	f000 fc18 	bl	8008e9c <__mcmp>
 800866c:	2800      	cmp	r0, #0
 800866e:	dc03      	bgt.n	8008678 <_dtoa_r+0xa58>
 8008670:	d1e1      	bne.n	8008636 <_dtoa_r+0xa16>
 8008672:	f018 0f01 	tst.w	r8, #1
 8008676:	d0de      	beq.n	8008636 <_dtoa_r+0xa16>
 8008678:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800867c:	d1d8      	bne.n	8008630 <_dtoa_r+0xa10>
 800867e:	2339      	movs	r3, #57	@ 0x39
 8008680:	9a02      	ldr	r2, [sp, #8]
 8008682:	7013      	strb	r3, [r2, #0]
 8008684:	4633      	mov	r3, r6
 8008686:	461e      	mov	r6, r3
 8008688:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800868c:	3b01      	subs	r3, #1
 800868e:	2a39      	cmp	r2, #57	@ 0x39
 8008690:	d052      	beq.n	8008738 <_dtoa_r+0xb18>
 8008692:	3201      	adds	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
 8008696:	e60e      	b.n	80082b6 <_dtoa_r+0x696>
 8008698:	2a00      	cmp	r2, #0
 800869a:	dd07      	ble.n	80086ac <_dtoa_r+0xa8c>
 800869c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086a0:	d0ed      	beq.n	800867e <_dtoa_r+0xa5e>
 80086a2:	9a02      	ldr	r2, [sp, #8]
 80086a4:	f108 0301 	add.w	r3, r8, #1
 80086a8:	7013      	strb	r3, [r2, #0]
 80086aa:	e604      	b.n	80082b6 <_dtoa_r+0x696>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	9a07      	ldr	r2, [sp, #28]
 80086b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80086b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d028      	beq.n	800870c <_dtoa_r+0xaec>
 80086ba:	4649      	mov	r1, r9
 80086bc:	2300      	movs	r3, #0
 80086be:	220a      	movs	r2, #10
 80086c0:	4658      	mov	r0, fp
 80086c2:	f000 f9d5 	bl	8008a70 <__multadd>
 80086c6:	42af      	cmp	r7, r5
 80086c8:	4681      	mov	r9, r0
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	f04f 020a 	mov.w	r2, #10
 80086d2:	4639      	mov	r1, r7
 80086d4:	4658      	mov	r0, fp
 80086d6:	d107      	bne.n	80086e8 <_dtoa_r+0xac8>
 80086d8:	f000 f9ca 	bl	8008a70 <__multadd>
 80086dc:	4607      	mov	r7, r0
 80086de:	4605      	mov	r5, r0
 80086e0:	9b07      	ldr	r3, [sp, #28]
 80086e2:	3301      	adds	r3, #1
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	e774      	b.n	80085d2 <_dtoa_r+0x9b2>
 80086e8:	f000 f9c2 	bl	8008a70 <__multadd>
 80086ec:	4629      	mov	r1, r5
 80086ee:	4607      	mov	r7, r0
 80086f0:	2300      	movs	r3, #0
 80086f2:	220a      	movs	r2, #10
 80086f4:	4658      	mov	r0, fp
 80086f6:	f000 f9bb 	bl	8008a70 <__multadd>
 80086fa:	4605      	mov	r5, r0
 80086fc:	e7f0      	b.n	80086e0 <_dtoa_r+0xac0>
 80086fe:	9b08      	ldr	r3, [sp, #32]
 8008700:	2700      	movs	r7, #0
 8008702:	2b00      	cmp	r3, #0
 8008704:	bfcc      	ite	gt
 8008706:	461e      	movgt	r6, r3
 8008708:	2601      	movle	r6, #1
 800870a:	4456      	add	r6, sl
 800870c:	4649      	mov	r1, r9
 800870e:	2201      	movs	r2, #1
 8008710:	4658      	mov	r0, fp
 8008712:	f000 fb57 	bl	8008dc4 <__lshift>
 8008716:	4621      	mov	r1, r4
 8008718:	4681      	mov	r9, r0
 800871a:	f000 fbbf 	bl	8008e9c <__mcmp>
 800871e:	2800      	cmp	r0, #0
 8008720:	dcb0      	bgt.n	8008684 <_dtoa_r+0xa64>
 8008722:	d102      	bne.n	800872a <_dtoa_r+0xb0a>
 8008724:	f018 0f01 	tst.w	r8, #1
 8008728:	d1ac      	bne.n	8008684 <_dtoa_r+0xa64>
 800872a:	4633      	mov	r3, r6
 800872c:	461e      	mov	r6, r3
 800872e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008732:	2a30      	cmp	r2, #48	@ 0x30
 8008734:	d0fa      	beq.n	800872c <_dtoa_r+0xb0c>
 8008736:	e5be      	b.n	80082b6 <_dtoa_r+0x696>
 8008738:	459a      	cmp	sl, r3
 800873a:	d1a4      	bne.n	8008686 <_dtoa_r+0xa66>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	3301      	adds	r3, #1
 8008740:	9304      	str	r3, [sp, #16]
 8008742:	2331      	movs	r3, #49	@ 0x31
 8008744:	f88a 3000 	strb.w	r3, [sl]
 8008748:	e5b5      	b.n	80082b6 <_dtoa_r+0x696>
 800874a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800874c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087ac <_dtoa_r+0xb8c>
 8008750:	b11b      	cbz	r3, 800875a <_dtoa_r+0xb3a>
 8008752:	f10a 0308 	add.w	r3, sl, #8
 8008756:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	4650      	mov	r0, sl
 800875c:	b017      	add	sp, #92	@ 0x5c
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008764:	2b01      	cmp	r3, #1
 8008766:	f77f ae3d 	ble.w	80083e4 <_dtoa_r+0x7c4>
 800876a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800876c:	930a      	str	r3, [sp, #40]	@ 0x28
 800876e:	2001      	movs	r0, #1
 8008770:	e65b      	b.n	800842a <_dtoa_r+0x80a>
 8008772:	9b08      	ldr	r3, [sp, #32]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f77f aed6 	ble.w	8008526 <_dtoa_r+0x906>
 800877a:	4656      	mov	r6, sl
 800877c:	4621      	mov	r1, r4
 800877e:	4648      	mov	r0, r9
 8008780:	f7ff f9c5 	bl	8007b0e <quorem>
 8008784:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008788:	9b08      	ldr	r3, [sp, #32]
 800878a:	f806 8b01 	strb.w	r8, [r6], #1
 800878e:	eba6 020a 	sub.w	r2, r6, sl
 8008792:	4293      	cmp	r3, r2
 8008794:	ddb3      	ble.n	80086fe <_dtoa_r+0xade>
 8008796:	4649      	mov	r1, r9
 8008798:	2300      	movs	r3, #0
 800879a:	220a      	movs	r2, #10
 800879c:	4658      	mov	r0, fp
 800879e:	f000 f967 	bl	8008a70 <__multadd>
 80087a2:	4681      	mov	r9, r0
 80087a4:	e7ea      	b.n	800877c <_dtoa_r+0xb5c>
 80087a6:	bf00      	nop
 80087a8:	0800aac2 	.word	0x0800aac2
 80087ac:	0800aa46 	.word	0x0800aa46

080087b0 <_free_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	2900      	cmp	r1, #0
 80087b6:	d040      	beq.n	800883a <_free_r+0x8a>
 80087b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087bc:	1f0c      	subs	r4, r1, #4
 80087be:	2b00      	cmp	r3, #0
 80087c0:	bfb8      	it	lt
 80087c2:	18e4      	addlt	r4, r4, r3
 80087c4:	f000 f8e6 	bl	8008994 <__malloc_lock>
 80087c8:	4a1c      	ldr	r2, [pc, #112]	@ (800883c <_free_r+0x8c>)
 80087ca:	6813      	ldr	r3, [r2, #0]
 80087cc:	b933      	cbnz	r3, 80087dc <_free_r+0x2c>
 80087ce:	6063      	str	r3, [r4, #4]
 80087d0:	6014      	str	r4, [r2, #0]
 80087d2:	4628      	mov	r0, r5
 80087d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d8:	f000 b8e2 	b.w	80089a0 <__malloc_unlock>
 80087dc:	42a3      	cmp	r3, r4
 80087de:	d908      	bls.n	80087f2 <_free_r+0x42>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	1821      	adds	r1, r4, r0
 80087e4:	428b      	cmp	r3, r1
 80087e6:	bf01      	itttt	eq
 80087e8:	6819      	ldreq	r1, [r3, #0]
 80087ea:	685b      	ldreq	r3, [r3, #4]
 80087ec:	1809      	addeq	r1, r1, r0
 80087ee:	6021      	streq	r1, [r4, #0]
 80087f0:	e7ed      	b.n	80087ce <_free_r+0x1e>
 80087f2:	461a      	mov	r2, r3
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	b10b      	cbz	r3, 80087fc <_free_r+0x4c>
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	d9fa      	bls.n	80087f2 <_free_r+0x42>
 80087fc:	6811      	ldr	r1, [r2, #0]
 80087fe:	1850      	adds	r0, r2, r1
 8008800:	42a0      	cmp	r0, r4
 8008802:	d10b      	bne.n	800881c <_free_r+0x6c>
 8008804:	6820      	ldr	r0, [r4, #0]
 8008806:	4401      	add	r1, r0
 8008808:	1850      	adds	r0, r2, r1
 800880a:	4283      	cmp	r3, r0
 800880c:	6011      	str	r1, [r2, #0]
 800880e:	d1e0      	bne.n	80087d2 <_free_r+0x22>
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	4408      	add	r0, r1
 8008816:	6010      	str	r0, [r2, #0]
 8008818:	6053      	str	r3, [r2, #4]
 800881a:	e7da      	b.n	80087d2 <_free_r+0x22>
 800881c:	d902      	bls.n	8008824 <_free_r+0x74>
 800881e:	230c      	movs	r3, #12
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	e7d6      	b.n	80087d2 <_free_r+0x22>
 8008824:	6820      	ldr	r0, [r4, #0]
 8008826:	1821      	adds	r1, r4, r0
 8008828:	428b      	cmp	r3, r1
 800882a:	bf01      	itttt	eq
 800882c:	6819      	ldreq	r1, [r3, #0]
 800882e:	685b      	ldreq	r3, [r3, #4]
 8008830:	1809      	addeq	r1, r1, r0
 8008832:	6021      	streq	r1, [r4, #0]
 8008834:	6063      	str	r3, [r4, #4]
 8008836:	6054      	str	r4, [r2, #4]
 8008838:	e7cb      	b.n	80087d2 <_free_r+0x22>
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	20000978 	.word	0x20000978

08008840 <malloc>:
 8008840:	4b02      	ldr	r3, [pc, #8]	@ (800884c <malloc+0xc>)
 8008842:	4601      	mov	r1, r0
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f000 b825 	b.w	8008894 <_malloc_r>
 800884a:	bf00      	nop
 800884c:	20000024 	.word	0x20000024

08008850 <sbrk_aligned>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4e0f      	ldr	r6, [pc, #60]	@ (8008890 <sbrk_aligned+0x40>)
 8008854:	460c      	mov	r4, r1
 8008856:	6831      	ldr	r1, [r6, #0]
 8008858:	4605      	mov	r5, r0
 800885a:	b911      	cbnz	r1, 8008862 <sbrk_aligned+0x12>
 800885c:	f000 fcce 	bl	80091fc <_sbrk_r>
 8008860:	6030      	str	r0, [r6, #0]
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 fcc9 	bl	80091fc <_sbrk_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	d103      	bne.n	8008876 <sbrk_aligned+0x26>
 800886e:	f04f 34ff 	mov.w	r4, #4294967295
 8008872:	4620      	mov	r0, r4
 8008874:	bd70      	pop	{r4, r5, r6, pc}
 8008876:	1cc4      	adds	r4, r0, #3
 8008878:	f024 0403 	bic.w	r4, r4, #3
 800887c:	42a0      	cmp	r0, r4
 800887e:	d0f8      	beq.n	8008872 <sbrk_aligned+0x22>
 8008880:	1a21      	subs	r1, r4, r0
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fcba 	bl	80091fc <_sbrk_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d1f2      	bne.n	8008872 <sbrk_aligned+0x22>
 800888c:	e7ef      	b.n	800886e <sbrk_aligned+0x1e>
 800888e:	bf00      	nop
 8008890:	20000974 	.word	0x20000974

08008894 <_malloc_r>:
 8008894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008898:	1ccd      	adds	r5, r1, #3
 800889a:	f025 0503 	bic.w	r5, r5, #3
 800889e:	3508      	adds	r5, #8
 80088a0:	2d0c      	cmp	r5, #12
 80088a2:	bf38      	it	cc
 80088a4:	250c      	movcc	r5, #12
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	4606      	mov	r6, r0
 80088aa:	db01      	blt.n	80088b0 <_malloc_r+0x1c>
 80088ac:	42a9      	cmp	r1, r5
 80088ae:	d904      	bls.n	80088ba <_malloc_r+0x26>
 80088b0:	230c      	movs	r3, #12
 80088b2:	6033      	str	r3, [r6, #0]
 80088b4:	2000      	movs	r0, #0
 80088b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008990 <_malloc_r+0xfc>
 80088be:	f000 f869 	bl	8008994 <__malloc_lock>
 80088c2:	f8d8 3000 	ldr.w	r3, [r8]
 80088c6:	461c      	mov	r4, r3
 80088c8:	bb44      	cbnz	r4, 800891c <_malloc_r+0x88>
 80088ca:	4629      	mov	r1, r5
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff ffbf 	bl	8008850 <sbrk_aligned>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	4604      	mov	r4, r0
 80088d6:	d158      	bne.n	800898a <_malloc_r+0xf6>
 80088d8:	f8d8 4000 	ldr.w	r4, [r8]
 80088dc:	4627      	mov	r7, r4
 80088de:	2f00      	cmp	r7, #0
 80088e0:	d143      	bne.n	800896a <_malloc_r+0xd6>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	d04b      	beq.n	800897e <_malloc_r+0xea>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	4639      	mov	r1, r7
 80088ea:	4630      	mov	r0, r6
 80088ec:	eb04 0903 	add.w	r9, r4, r3
 80088f0:	f000 fc84 	bl	80091fc <_sbrk_r>
 80088f4:	4581      	cmp	r9, r0
 80088f6:	d142      	bne.n	800897e <_malloc_r+0xea>
 80088f8:	6821      	ldr	r1, [r4, #0]
 80088fa:	4630      	mov	r0, r6
 80088fc:	1a6d      	subs	r5, r5, r1
 80088fe:	4629      	mov	r1, r5
 8008900:	f7ff ffa6 	bl	8008850 <sbrk_aligned>
 8008904:	3001      	adds	r0, #1
 8008906:	d03a      	beq.n	800897e <_malloc_r+0xea>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	442b      	add	r3, r5
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	f8d8 3000 	ldr.w	r3, [r8]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	bb62      	cbnz	r2, 8008970 <_malloc_r+0xdc>
 8008916:	f8c8 7000 	str.w	r7, [r8]
 800891a:	e00f      	b.n	800893c <_malloc_r+0xa8>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	1b52      	subs	r2, r2, r5
 8008920:	d420      	bmi.n	8008964 <_malloc_r+0xd0>
 8008922:	2a0b      	cmp	r2, #11
 8008924:	d917      	bls.n	8008956 <_malloc_r+0xc2>
 8008926:	1961      	adds	r1, r4, r5
 8008928:	42a3      	cmp	r3, r4
 800892a:	6025      	str	r5, [r4, #0]
 800892c:	bf18      	it	ne
 800892e:	6059      	strne	r1, [r3, #4]
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	bf08      	it	eq
 8008934:	f8c8 1000 	streq.w	r1, [r8]
 8008938:	5162      	str	r2, [r4, r5]
 800893a:	604b      	str	r3, [r1, #4]
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f82f 	bl	80089a0 <__malloc_unlock>
 8008942:	f104 000b 	add.w	r0, r4, #11
 8008946:	1d23      	adds	r3, r4, #4
 8008948:	f020 0007 	bic.w	r0, r0, #7
 800894c:	1ac2      	subs	r2, r0, r3
 800894e:	bf1c      	itt	ne
 8008950:	1a1b      	subne	r3, r3, r0
 8008952:	50a3      	strne	r3, [r4, r2]
 8008954:	e7af      	b.n	80088b6 <_malloc_r+0x22>
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	42a3      	cmp	r3, r4
 800895a:	bf0c      	ite	eq
 800895c:	f8c8 2000 	streq.w	r2, [r8]
 8008960:	605a      	strne	r2, [r3, #4]
 8008962:	e7eb      	b.n	800893c <_malloc_r+0xa8>
 8008964:	4623      	mov	r3, r4
 8008966:	6864      	ldr	r4, [r4, #4]
 8008968:	e7ae      	b.n	80088c8 <_malloc_r+0x34>
 800896a:	463c      	mov	r4, r7
 800896c:	687f      	ldr	r7, [r7, #4]
 800896e:	e7b6      	b.n	80088de <_malloc_r+0x4a>
 8008970:	461a      	mov	r2, r3
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	42a3      	cmp	r3, r4
 8008976:	d1fb      	bne.n	8008970 <_malloc_r+0xdc>
 8008978:	2300      	movs	r3, #0
 800897a:	6053      	str	r3, [r2, #4]
 800897c:	e7de      	b.n	800893c <_malloc_r+0xa8>
 800897e:	230c      	movs	r3, #12
 8008980:	4630      	mov	r0, r6
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	f000 f80c 	bl	80089a0 <__malloc_unlock>
 8008988:	e794      	b.n	80088b4 <_malloc_r+0x20>
 800898a:	6005      	str	r5, [r0, #0]
 800898c:	e7d6      	b.n	800893c <_malloc_r+0xa8>
 800898e:	bf00      	nop
 8008990:	20000978 	.word	0x20000978

08008994 <__malloc_lock>:
 8008994:	4801      	ldr	r0, [pc, #4]	@ (800899c <__malloc_lock+0x8>)
 8008996:	f7ff b8aa 	b.w	8007aee <__retarget_lock_acquire_recursive>
 800899a:	bf00      	nop
 800899c:	20000970 	.word	0x20000970

080089a0 <__malloc_unlock>:
 80089a0:	4801      	ldr	r0, [pc, #4]	@ (80089a8 <__malloc_unlock+0x8>)
 80089a2:	f7ff b8a5 	b.w	8007af0 <__retarget_lock_release_recursive>
 80089a6:	bf00      	nop
 80089a8:	20000970 	.word	0x20000970

080089ac <_Balloc>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	69c6      	ldr	r6, [r0, #28]
 80089b0:	4604      	mov	r4, r0
 80089b2:	460d      	mov	r5, r1
 80089b4:	b976      	cbnz	r6, 80089d4 <_Balloc+0x28>
 80089b6:	2010      	movs	r0, #16
 80089b8:	f7ff ff42 	bl	8008840 <malloc>
 80089bc:	4602      	mov	r2, r0
 80089be:	61e0      	str	r0, [r4, #28]
 80089c0:	b920      	cbnz	r0, 80089cc <_Balloc+0x20>
 80089c2:	216b      	movs	r1, #107	@ 0x6b
 80089c4:	4b17      	ldr	r3, [pc, #92]	@ (8008a24 <_Balloc+0x78>)
 80089c6:	4818      	ldr	r0, [pc, #96]	@ (8008a28 <_Balloc+0x7c>)
 80089c8:	f000 fc36 	bl	8009238 <__assert_func>
 80089cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d0:	6006      	str	r6, [r0, #0]
 80089d2:	60c6      	str	r6, [r0, #12]
 80089d4:	69e6      	ldr	r6, [r4, #28]
 80089d6:	68f3      	ldr	r3, [r6, #12]
 80089d8:	b183      	cbz	r3, 80089fc <_Balloc+0x50>
 80089da:	69e3      	ldr	r3, [r4, #28]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089e2:	b9b8      	cbnz	r0, 8008a14 <_Balloc+0x68>
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f605 	lsl.w	r6, r1, r5
 80089ea:	1d72      	adds	r2, r6, #5
 80089ec:	4620      	mov	r0, r4
 80089ee:	0092      	lsls	r2, r2, #2
 80089f0:	f000 fc40 	bl	8009274 <_calloc_r>
 80089f4:	b160      	cbz	r0, 8008a10 <_Balloc+0x64>
 80089f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089fa:	e00e      	b.n	8008a1a <_Balloc+0x6e>
 80089fc:	2221      	movs	r2, #33	@ 0x21
 80089fe:	2104      	movs	r1, #4
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fc37 	bl	8009274 <_calloc_r>
 8008a06:	69e3      	ldr	r3, [r4, #28]
 8008a08:	60f0      	str	r0, [r6, #12]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1e4      	bne.n	80089da <_Balloc+0x2e>
 8008a10:	2000      	movs	r0, #0
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	6802      	ldr	r2, [r0, #0]
 8008a16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a20:	e7f7      	b.n	8008a12 <_Balloc+0x66>
 8008a22:	bf00      	nop
 8008a24:	0800aa53 	.word	0x0800aa53
 8008a28:	0800aad3 	.word	0x0800aad3

08008a2c <_Bfree>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	69c6      	ldr	r6, [r0, #28]
 8008a30:	4605      	mov	r5, r0
 8008a32:	460c      	mov	r4, r1
 8008a34:	b976      	cbnz	r6, 8008a54 <_Bfree+0x28>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f7ff ff02 	bl	8008840 <malloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	61e8      	str	r0, [r5, #28]
 8008a40:	b920      	cbnz	r0, 8008a4c <_Bfree+0x20>
 8008a42:	218f      	movs	r1, #143	@ 0x8f
 8008a44:	4b08      	ldr	r3, [pc, #32]	@ (8008a68 <_Bfree+0x3c>)
 8008a46:	4809      	ldr	r0, [pc, #36]	@ (8008a6c <_Bfree+0x40>)
 8008a48:	f000 fbf6 	bl	8009238 <__assert_func>
 8008a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a50:	6006      	str	r6, [r0, #0]
 8008a52:	60c6      	str	r6, [r0, #12]
 8008a54:	b13c      	cbz	r4, 8008a66 <_Bfree+0x3a>
 8008a56:	69eb      	ldr	r3, [r5, #28]
 8008a58:	6862      	ldr	r2, [r4, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a60:	6021      	str	r1, [r4, #0]
 8008a62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	0800aa53 	.word	0x0800aa53
 8008a6c:	0800aad3 	.word	0x0800aad3

08008a70 <__multadd>:
 8008a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a74:	4607      	mov	r7, r0
 8008a76:	460c      	mov	r4, r1
 8008a78:	461e      	mov	r6, r3
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	690d      	ldr	r5, [r1, #16]
 8008a7e:	f101 0c14 	add.w	ip, r1, #20
 8008a82:	f8dc 3000 	ldr.w	r3, [ip]
 8008a86:	3001      	adds	r0, #1
 8008a88:	b299      	uxth	r1, r3
 8008a8a:	fb02 6101 	mla	r1, r2, r1, r6
 8008a8e:	0c1e      	lsrs	r6, r3, #16
 8008a90:	0c0b      	lsrs	r3, r1, #16
 8008a92:	fb02 3306 	mla	r3, r2, r6, r3
 8008a96:	b289      	uxth	r1, r1
 8008a98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a9c:	4285      	cmp	r5, r0
 8008a9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8008aa6:	dcec      	bgt.n	8008a82 <__multadd+0x12>
 8008aa8:	b30e      	cbz	r6, 8008aee <__multadd+0x7e>
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dc19      	bgt.n	8008ae4 <__multadd+0x74>
 8008ab0:	6861      	ldr	r1, [r4, #4]
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	3101      	adds	r1, #1
 8008ab6:	f7ff ff79 	bl	80089ac <_Balloc>
 8008aba:	4680      	mov	r8, r0
 8008abc:	b928      	cbnz	r0, 8008aca <__multadd+0x5a>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	21ba      	movs	r1, #186	@ 0xba
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8008af4 <__multadd+0x84>)
 8008ac4:	480c      	ldr	r0, [pc, #48]	@ (8008af8 <__multadd+0x88>)
 8008ac6:	f000 fbb7 	bl	8009238 <__assert_func>
 8008aca:	6922      	ldr	r2, [r4, #16]
 8008acc:	f104 010c 	add.w	r1, r4, #12
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	300c      	adds	r0, #12
 8008ad6:	f000 fba1 	bl	800921c <memcpy>
 8008ada:	4621      	mov	r1, r4
 8008adc:	4638      	mov	r0, r7
 8008ade:	f7ff ffa5 	bl	8008a2c <_Bfree>
 8008ae2:	4644      	mov	r4, r8
 8008ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ae8:	3501      	adds	r5, #1
 8008aea:	615e      	str	r6, [r3, #20]
 8008aec:	6125      	str	r5, [r4, #16]
 8008aee:	4620      	mov	r0, r4
 8008af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af4:	0800aac2 	.word	0x0800aac2
 8008af8:	0800aad3 	.word	0x0800aad3

08008afc <__hi0bits>:
 8008afc:	4603      	mov	r3, r0
 8008afe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b02:	bf3a      	itte	cc
 8008b04:	0403      	lslcc	r3, r0, #16
 8008b06:	2010      	movcc	r0, #16
 8008b08:	2000      	movcs	r0, #0
 8008b0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b0e:	bf3c      	itt	cc
 8008b10:	021b      	lslcc	r3, r3, #8
 8008b12:	3008      	addcc	r0, #8
 8008b14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b18:	bf3c      	itt	cc
 8008b1a:	011b      	lslcc	r3, r3, #4
 8008b1c:	3004      	addcc	r0, #4
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b22:	bf3c      	itt	cc
 8008b24:	009b      	lslcc	r3, r3, #2
 8008b26:	3002      	addcc	r0, #2
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	db05      	blt.n	8008b38 <__hi0bits+0x3c>
 8008b2c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b30:	f100 0001 	add.w	r0, r0, #1
 8008b34:	bf08      	it	eq
 8008b36:	2020      	moveq	r0, #32
 8008b38:	4770      	bx	lr

08008b3a <__lo0bits>:
 8008b3a:	6803      	ldr	r3, [r0, #0]
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	f013 0007 	ands.w	r0, r3, #7
 8008b42:	d00b      	beq.n	8008b5c <__lo0bits+0x22>
 8008b44:	07d9      	lsls	r1, r3, #31
 8008b46:	d421      	bmi.n	8008b8c <__lo0bits+0x52>
 8008b48:	0798      	lsls	r0, r3, #30
 8008b4a:	bf49      	itett	mi
 8008b4c:	085b      	lsrmi	r3, r3, #1
 8008b4e:	089b      	lsrpl	r3, r3, #2
 8008b50:	2001      	movmi	r0, #1
 8008b52:	6013      	strmi	r3, [r2, #0]
 8008b54:	bf5c      	itt	pl
 8008b56:	2002      	movpl	r0, #2
 8008b58:	6013      	strpl	r3, [r2, #0]
 8008b5a:	4770      	bx	lr
 8008b5c:	b299      	uxth	r1, r3
 8008b5e:	b909      	cbnz	r1, 8008b64 <__lo0bits+0x2a>
 8008b60:	2010      	movs	r0, #16
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	b2d9      	uxtb	r1, r3
 8008b66:	b909      	cbnz	r1, 8008b6c <__lo0bits+0x32>
 8008b68:	3008      	adds	r0, #8
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	0719      	lsls	r1, r3, #28
 8008b6e:	bf04      	itt	eq
 8008b70:	091b      	lsreq	r3, r3, #4
 8008b72:	3004      	addeq	r0, #4
 8008b74:	0799      	lsls	r1, r3, #30
 8008b76:	bf04      	itt	eq
 8008b78:	089b      	lsreq	r3, r3, #2
 8008b7a:	3002      	addeq	r0, #2
 8008b7c:	07d9      	lsls	r1, r3, #31
 8008b7e:	d403      	bmi.n	8008b88 <__lo0bits+0x4e>
 8008b80:	085b      	lsrs	r3, r3, #1
 8008b82:	f100 0001 	add.w	r0, r0, #1
 8008b86:	d003      	beq.n	8008b90 <__lo0bits+0x56>
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	4770      	bx	lr
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	4770      	bx	lr
 8008b90:	2020      	movs	r0, #32
 8008b92:	4770      	bx	lr

08008b94 <__i2b>:
 8008b94:	b510      	push	{r4, lr}
 8008b96:	460c      	mov	r4, r1
 8008b98:	2101      	movs	r1, #1
 8008b9a:	f7ff ff07 	bl	80089ac <_Balloc>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	b928      	cbnz	r0, 8008bae <__i2b+0x1a>
 8008ba2:	f240 1145 	movw	r1, #325	@ 0x145
 8008ba6:	4b04      	ldr	r3, [pc, #16]	@ (8008bb8 <__i2b+0x24>)
 8008ba8:	4804      	ldr	r0, [pc, #16]	@ (8008bbc <__i2b+0x28>)
 8008baa:	f000 fb45 	bl	8009238 <__assert_func>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	6144      	str	r4, [r0, #20]
 8008bb2:	6103      	str	r3, [r0, #16]
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	bf00      	nop
 8008bb8:	0800aac2 	.word	0x0800aac2
 8008bbc:	0800aad3 	.word	0x0800aad3

08008bc0 <__multiply>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	690a      	ldr	r2, [r1, #16]
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	460f      	mov	r7, r1
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	bfa2      	ittt	ge
 8008bd0:	4623      	movge	r3, r4
 8008bd2:	460c      	movge	r4, r1
 8008bd4:	461f      	movge	r7, r3
 8008bd6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bda:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008bde:	68a3      	ldr	r3, [r4, #8]
 8008be0:	6861      	ldr	r1, [r4, #4]
 8008be2:	eb0a 0609 	add.w	r6, sl, r9
 8008be6:	42b3      	cmp	r3, r6
 8008be8:	b085      	sub	sp, #20
 8008bea:	bfb8      	it	lt
 8008bec:	3101      	addlt	r1, #1
 8008bee:	f7ff fedd 	bl	80089ac <_Balloc>
 8008bf2:	b930      	cbnz	r0, 8008c02 <__multiply+0x42>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008bfa:	4b43      	ldr	r3, [pc, #268]	@ (8008d08 <__multiply+0x148>)
 8008bfc:	4843      	ldr	r0, [pc, #268]	@ (8008d0c <__multiply+0x14c>)
 8008bfe:	f000 fb1b 	bl	8009238 <__assert_func>
 8008c02:	f100 0514 	add.w	r5, r0, #20
 8008c06:	462b      	mov	r3, r5
 8008c08:	2200      	movs	r2, #0
 8008c0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c0e:	4543      	cmp	r3, r8
 8008c10:	d321      	bcc.n	8008c56 <__multiply+0x96>
 8008c12:	f107 0114 	add.w	r1, r7, #20
 8008c16:	f104 0214 	add.w	r2, r4, #20
 8008c1a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c1e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c22:	9302      	str	r3, [sp, #8]
 8008c24:	1b13      	subs	r3, r2, r4
 8008c26:	3b15      	subs	r3, #21
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	f104 0715 	add.w	r7, r4, #21
 8008c32:	42ba      	cmp	r2, r7
 8008c34:	bf38      	it	cc
 8008c36:	2304      	movcc	r3, #4
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	9b02      	ldr	r3, [sp, #8]
 8008c3c:	9103      	str	r1, [sp, #12]
 8008c3e:	428b      	cmp	r3, r1
 8008c40:	d80c      	bhi.n	8008c5c <__multiply+0x9c>
 8008c42:	2e00      	cmp	r6, #0
 8008c44:	dd03      	ble.n	8008c4e <__multiply+0x8e>
 8008c46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d05a      	beq.n	8008d04 <__multiply+0x144>
 8008c4e:	6106      	str	r6, [r0, #16]
 8008c50:	b005      	add	sp, #20
 8008c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c56:	f843 2b04 	str.w	r2, [r3], #4
 8008c5a:	e7d8      	b.n	8008c0e <__multiply+0x4e>
 8008c5c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c60:	f1ba 0f00 	cmp.w	sl, #0
 8008c64:	d023      	beq.n	8008cae <__multiply+0xee>
 8008c66:	46a9      	mov	r9, r5
 8008c68:	f04f 0c00 	mov.w	ip, #0
 8008c6c:	f104 0e14 	add.w	lr, r4, #20
 8008c70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c74:	f8d9 3000 	ldr.w	r3, [r9]
 8008c78:	fa1f fb87 	uxth.w	fp, r7
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	fb0a 330b 	mla	r3, sl, fp, r3
 8008c82:	4463      	add	r3, ip
 8008c84:	f8d9 c000 	ldr.w	ip, [r9]
 8008c88:	0c3f      	lsrs	r7, r7, #16
 8008c8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008c8e:	fb0a c707 	mla	r7, sl, r7, ip
 8008c92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c9c:	4572      	cmp	r2, lr
 8008c9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ca2:	f849 3b04 	str.w	r3, [r9], #4
 8008ca6:	d8e3      	bhi.n	8008c70 <__multiply+0xb0>
 8008ca8:	9b01      	ldr	r3, [sp, #4]
 8008caa:	f845 c003 	str.w	ip, [r5, r3]
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	3104      	adds	r1, #4
 8008cb2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cb6:	f1b9 0f00 	cmp.w	r9, #0
 8008cba:	d021      	beq.n	8008d00 <__multiply+0x140>
 8008cbc:	46ae      	mov	lr, r5
 8008cbe:	f04f 0a00 	mov.w	sl, #0
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	f104 0c14 	add.w	ip, r4, #20
 8008cc8:	f8bc b000 	ldrh.w	fp, [ip]
 8008ccc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	fb09 770b 	mla	r7, r9, fp, r7
 8008cd6:	4457      	add	r7, sl
 8008cd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cdc:	f84e 3b04 	str.w	r3, [lr], #4
 8008ce0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ce4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ce8:	f8be 3000 	ldrh.w	r3, [lr]
 8008cec:	4562      	cmp	r2, ip
 8008cee:	fb09 330a 	mla	r3, r9, sl, r3
 8008cf2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cfa:	d8e5      	bhi.n	8008cc8 <__multiply+0x108>
 8008cfc:	9f01      	ldr	r7, [sp, #4]
 8008cfe:	51eb      	str	r3, [r5, r7]
 8008d00:	3504      	adds	r5, #4
 8008d02:	e79a      	b.n	8008c3a <__multiply+0x7a>
 8008d04:	3e01      	subs	r6, #1
 8008d06:	e79c      	b.n	8008c42 <__multiply+0x82>
 8008d08:	0800aac2 	.word	0x0800aac2
 8008d0c:	0800aad3 	.word	0x0800aad3

08008d10 <__pow5mult>:
 8008d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d14:	4615      	mov	r5, r2
 8008d16:	f012 0203 	ands.w	r2, r2, #3
 8008d1a:	4607      	mov	r7, r0
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d007      	beq.n	8008d30 <__pow5mult+0x20>
 8008d20:	4c25      	ldr	r4, [pc, #148]	@ (8008db8 <__pow5mult+0xa8>)
 8008d22:	3a01      	subs	r2, #1
 8008d24:	2300      	movs	r3, #0
 8008d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d2a:	f7ff fea1 	bl	8008a70 <__multadd>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	10ad      	asrs	r5, r5, #2
 8008d32:	d03d      	beq.n	8008db0 <__pow5mult+0xa0>
 8008d34:	69fc      	ldr	r4, [r7, #28]
 8008d36:	b97c      	cbnz	r4, 8008d58 <__pow5mult+0x48>
 8008d38:	2010      	movs	r0, #16
 8008d3a:	f7ff fd81 	bl	8008840 <malloc>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	61f8      	str	r0, [r7, #28]
 8008d42:	b928      	cbnz	r0, 8008d50 <__pow5mult+0x40>
 8008d44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d48:	4b1c      	ldr	r3, [pc, #112]	@ (8008dbc <__pow5mult+0xac>)
 8008d4a:	481d      	ldr	r0, [pc, #116]	@ (8008dc0 <__pow5mult+0xb0>)
 8008d4c:	f000 fa74 	bl	8009238 <__assert_func>
 8008d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d54:	6004      	str	r4, [r0, #0]
 8008d56:	60c4      	str	r4, [r0, #12]
 8008d58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d60:	b94c      	cbnz	r4, 8008d76 <__pow5mult+0x66>
 8008d62:	f240 2171 	movw	r1, #625	@ 0x271
 8008d66:	4638      	mov	r0, r7
 8008d68:	f7ff ff14 	bl	8008b94 <__i2b>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	f04f 0900 	mov.w	r9, #0
 8008d7a:	07eb      	lsls	r3, r5, #31
 8008d7c:	d50a      	bpl.n	8008d94 <__pow5mult+0x84>
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4622      	mov	r2, r4
 8008d82:	4638      	mov	r0, r7
 8008d84:	f7ff ff1c 	bl	8008bc0 <__multiply>
 8008d88:	4680      	mov	r8, r0
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff fe4d 	bl	8008a2c <_Bfree>
 8008d92:	4646      	mov	r6, r8
 8008d94:	106d      	asrs	r5, r5, #1
 8008d96:	d00b      	beq.n	8008db0 <__pow5mult+0xa0>
 8008d98:	6820      	ldr	r0, [r4, #0]
 8008d9a:	b938      	cbnz	r0, 8008dac <__pow5mult+0x9c>
 8008d9c:	4622      	mov	r2, r4
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7ff ff0d 	bl	8008bc0 <__multiply>
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	f8c0 9000 	str.w	r9, [r0]
 8008dac:	4604      	mov	r4, r0
 8008dae:	e7e4      	b.n	8008d7a <__pow5mult+0x6a>
 8008db0:	4630      	mov	r0, r6
 8008db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db6:	bf00      	nop
 8008db8:	0800ab2c 	.word	0x0800ab2c
 8008dbc:	0800aa53 	.word	0x0800aa53
 8008dc0:	0800aad3 	.word	0x0800aad3

08008dc4 <__lshift>:
 8008dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4607      	mov	r7, r0
 8008dcc:	4691      	mov	r9, r2
 8008dce:	6923      	ldr	r3, [r4, #16]
 8008dd0:	6849      	ldr	r1, [r1, #4]
 8008dd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ddc:	f108 0601 	add.w	r6, r8, #1
 8008de0:	42b3      	cmp	r3, r6
 8008de2:	db0b      	blt.n	8008dfc <__lshift+0x38>
 8008de4:	4638      	mov	r0, r7
 8008de6:	f7ff fde1 	bl	80089ac <_Balloc>
 8008dea:	4605      	mov	r5, r0
 8008dec:	b948      	cbnz	r0, 8008e02 <__lshift+0x3e>
 8008dee:	4602      	mov	r2, r0
 8008df0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008df4:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <__lshift+0xd0>)
 8008df6:	4828      	ldr	r0, [pc, #160]	@ (8008e98 <__lshift+0xd4>)
 8008df8:	f000 fa1e 	bl	8009238 <__assert_func>
 8008dfc:	3101      	adds	r1, #1
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	e7ee      	b.n	8008de0 <__lshift+0x1c>
 8008e02:	2300      	movs	r3, #0
 8008e04:	f100 0114 	add.w	r1, r0, #20
 8008e08:	f100 0210 	add.w	r2, r0, #16
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	4553      	cmp	r3, sl
 8008e10:	db33      	blt.n	8008e7a <__lshift+0xb6>
 8008e12:	6920      	ldr	r0, [r4, #16]
 8008e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e18:	f104 0314 	add.w	r3, r4, #20
 8008e1c:	f019 091f 	ands.w	r9, r9, #31
 8008e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e28:	d02b      	beq.n	8008e82 <__lshift+0xbe>
 8008e2a:	468a      	mov	sl, r1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e32:	6818      	ldr	r0, [r3, #0]
 8008e34:	fa00 f009 	lsl.w	r0, r0, r9
 8008e38:	4310      	orrs	r0, r2
 8008e3a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e42:	459c      	cmp	ip, r3
 8008e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e48:	d8f3      	bhi.n	8008e32 <__lshift+0x6e>
 8008e4a:	ebac 0304 	sub.w	r3, ip, r4
 8008e4e:	3b15      	subs	r3, #21
 8008e50:	f023 0303 	bic.w	r3, r3, #3
 8008e54:	3304      	adds	r3, #4
 8008e56:	f104 0015 	add.w	r0, r4, #21
 8008e5a:	4584      	cmp	ip, r0
 8008e5c:	bf38      	it	cc
 8008e5e:	2304      	movcc	r3, #4
 8008e60:	50ca      	str	r2, [r1, r3]
 8008e62:	b10a      	cbz	r2, 8008e68 <__lshift+0xa4>
 8008e64:	f108 0602 	add.w	r6, r8, #2
 8008e68:	3e01      	subs	r6, #1
 8008e6a:	4638      	mov	r0, r7
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	612e      	str	r6, [r5, #16]
 8008e70:	f7ff fddc 	bl	8008a2c <_Bfree>
 8008e74:	4628      	mov	r0, r5
 8008e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e7e:	3301      	adds	r3, #1
 8008e80:	e7c5      	b.n	8008e0e <__lshift+0x4a>
 8008e82:	3904      	subs	r1, #4
 8008e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e88:	459c      	cmp	ip, r3
 8008e8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e8e:	d8f9      	bhi.n	8008e84 <__lshift+0xc0>
 8008e90:	e7ea      	b.n	8008e68 <__lshift+0xa4>
 8008e92:	bf00      	nop
 8008e94:	0800aac2 	.word	0x0800aac2
 8008e98:	0800aad3 	.word	0x0800aad3

08008e9c <__mcmp>:
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	690a      	ldr	r2, [r1, #16]
 8008ea0:	6900      	ldr	r0, [r0, #16]
 8008ea2:	b530      	push	{r4, r5, lr}
 8008ea4:	1a80      	subs	r0, r0, r2
 8008ea6:	d10e      	bne.n	8008ec6 <__mcmp+0x2a>
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	3114      	adds	r1, #20
 8008eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ebc:	4295      	cmp	r5, r2
 8008ebe:	d003      	beq.n	8008ec8 <__mcmp+0x2c>
 8008ec0:	d205      	bcs.n	8008ece <__mcmp+0x32>
 8008ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec6:	bd30      	pop	{r4, r5, pc}
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d3f3      	bcc.n	8008eb4 <__mcmp+0x18>
 8008ecc:	e7fb      	b.n	8008ec6 <__mcmp+0x2a>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	e7f9      	b.n	8008ec6 <__mcmp+0x2a>
	...

08008ed4 <__mdiff>:
 8008ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed8:	4689      	mov	r9, r1
 8008eda:	4606      	mov	r6, r0
 8008edc:	4611      	mov	r1, r2
 8008ede:	4648      	mov	r0, r9
 8008ee0:	4614      	mov	r4, r2
 8008ee2:	f7ff ffdb 	bl	8008e9c <__mcmp>
 8008ee6:	1e05      	subs	r5, r0, #0
 8008ee8:	d112      	bne.n	8008f10 <__mdiff+0x3c>
 8008eea:	4629      	mov	r1, r5
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7ff fd5d 	bl	80089ac <_Balloc>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	b928      	cbnz	r0, 8008f02 <__mdiff+0x2e>
 8008ef6:	f240 2137 	movw	r1, #567	@ 0x237
 8008efa:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff4 <__mdiff+0x120>)
 8008efc:	483e      	ldr	r0, [pc, #248]	@ (8008ff8 <__mdiff+0x124>)
 8008efe:	f000 f99b 	bl	8009238 <__assert_func>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f08:	4610      	mov	r0, r2
 8008f0a:	b003      	add	sp, #12
 8008f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f10:	bfbc      	itt	lt
 8008f12:	464b      	movlt	r3, r9
 8008f14:	46a1      	movlt	r9, r4
 8008f16:	4630      	mov	r0, r6
 8008f18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f1c:	bfba      	itte	lt
 8008f1e:	461c      	movlt	r4, r3
 8008f20:	2501      	movlt	r5, #1
 8008f22:	2500      	movge	r5, #0
 8008f24:	f7ff fd42 	bl	80089ac <_Balloc>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	b918      	cbnz	r0, 8008f34 <__mdiff+0x60>
 8008f2c:	f240 2145 	movw	r1, #581	@ 0x245
 8008f30:	4b30      	ldr	r3, [pc, #192]	@ (8008ff4 <__mdiff+0x120>)
 8008f32:	e7e3      	b.n	8008efc <__mdiff+0x28>
 8008f34:	f100 0b14 	add.w	fp, r0, #20
 8008f38:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f3c:	f109 0310 	add.w	r3, r9, #16
 8008f40:	60c5      	str	r5, [r0, #12]
 8008f42:	f04f 0c00 	mov.w	ip, #0
 8008f46:	f109 0514 	add.w	r5, r9, #20
 8008f4a:	46d9      	mov	r9, fp
 8008f4c:	6926      	ldr	r6, [r4, #16]
 8008f4e:	f104 0e14 	add.w	lr, r4, #20
 8008f52:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f56:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f5a:	9301      	str	r3, [sp, #4]
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f62:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f66:	b281      	uxth	r1, r0
 8008f68:	9301      	str	r3, [sp, #4]
 8008f6a:	fa1f f38a 	uxth.w	r3, sl
 8008f6e:	1a5b      	subs	r3, r3, r1
 8008f70:	0c00      	lsrs	r0, r0, #16
 8008f72:	4463      	add	r3, ip
 8008f74:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f78:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008f82:	4576      	cmp	r6, lr
 8008f84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f88:	f849 3b04 	str.w	r3, [r9], #4
 8008f8c:	d8e6      	bhi.n	8008f5c <__mdiff+0x88>
 8008f8e:	1b33      	subs	r3, r6, r4
 8008f90:	3b15      	subs	r3, #21
 8008f92:	f023 0303 	bic.w	r3, r3, #3
 8008f96:	3415      	adds	r4, #21
 8008f98:	3304      	adds	r3, #4
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	bf38      	it	cc
 8008f9e:	2304      	movcc	r3, #4
 8008fa0:	441d      	add	r5, r3
 8008fa2:	445b      	add	r3, fp
 8008fa4:	461e      	mov	r6, r3
 8008fa6:	462c      	mov	r4, r5
 8008fa8:	4544      	cmp	r4, r8
 8008faa:	d30e      	bcc.n	8008fca <__mdiff+0xf6>
 8008fac:	f108 0103 	add.w	r1, r8, #3
 8008fb0:	1b49      	subs	r1, r1, r5
 8008fb2:	f021 0103 	bic.w	r1, r1, #3
 8008fb6:	3d03      	subs	r5, #3
 8008fb8:	45a8      	cmp	r8, r5
 8008fba:	bf38      	it	cc
 8008fbc:	2100      	movcc	r1, #0
 8008fbe:	440b      	add	r3, r1
 8008fc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fc4:	b199      	cbz	r1, 8008fee <__mdiff+0x11a>
 8008fc6:	6117      	str	r7, [r2, #16]
 8008fc8:	e79e      	b.n	8008f08 <__mdiff+0x34>
 8008fca:	46e6      	mov	lr, ip
 8008fcc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008fd0:	fa1f fc81 	uxth.w	ip, r1
 8008fd4:	44f4      	add	ip, lr
 8008fd6:	0c08      	lsrs	r0, r1, #16
 8008fd8:	4471      	add	r1, lr
 8008fda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008fde:	b289      	uxth	r1, r1
 8008fe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008fe4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fe8:	f846 1b04 	str.w	r1, [r6], #4
 8008fec:	e7dc      	b.n	8008fa8 <__mdiff+0xd4>
 8008fee:	3f01      	subs	r7, #1
 8008ff0:	e7e6      	b.n	8008fc0 <__mdiff+0xec>
 8008ff2:	bf00      	nop
 8008ff4:	0800aac2 	.word	0x0800aac2
 8008ff8:	0800aad3 	.word	0x0800aad3

08008ffc <__d2b>:
 8008ffc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009000:	2101      	movs	r1, #1
 8009002:	4690      	mov	r8, r2
 8009004:	4699      	mov	r9, r3
 8009006:	9e08      	ldr	r6, [sp, #32]
 8009008:	f7ff fcd0 	bl	80089ac <_Balloc>
 800900c:	4604      	mov	r4, r0
 800900e:	b930      	cbnz	r0, 800901e <__d2b+0x22>
 8009010:	4602      	mov	r2, r0
 8009012:	f240 310f 	movw	r1, #783	@ 0x30f
 8009016:	4b23      	ldr	r3, [pc, #140]	@ (80090a4 <__d2b+0xa8>)
 8009018:	4823      	ldr	r0, [pc, #140]	@ (80090a8 <__d2b+0xac>)
 800901a:	f000 f90d 	bl	8009238 <__assert_func>
 800901e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009022:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009026:	b10d      	cbz	r5, 800902c <__d2b+0x30>
 8009028:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800902c:	9301      	str	r3, [sp, #4]
 800902e:	f1b8 0300 	subs.w	r3, r8, #0
 8009032:	d024      	beq.n	800907e <__d2b+0x82>
 8009034:	4668      	mov	r0, sp
 8009036:	9300      	str	r3, [sp, #0]
 8009038:	f7ff fd7f 	bl	8008b3a <__lo0bits>
 800903c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009040:	b1d8      	cbz	r0, 800907a <__d2b+0x7e>
 8009042:	f1c0 0320 	rsb	r3, r0, #32
 8009046:	fa02 f303 	lsl.w	r3, r2, r3
 800904a:	430b      	orrs	r3, r1
 800904c:	40c2      	lsrs	r2, r0
 800904e:	6163      	str	r3, [r4, #20]
 8009050:	9201      	str	r2, [sp, #4]
 8009052:	9b01      	ldr	r3, [sp, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	bf0c      	ite	eq
 8009058:	2201      	moveq	r2, #1
 800905a:	2202      	movne	r2, #2
 800905c:	61a3      	str	r3, [r4, #24]
 800905e:	6122      	str	r2, [r4, #16]
 8009060:	b1ad      	cbz	r5, 800908e <__d2b+0x92>
 8009062:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009066:	4405      	add	r5, r0
 8009068:	6035      	str	r5, [r6, #0]
 800906a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800906e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009070:	6018      	str	r0, [r3, #0]
 8009072:	4620      	mov	r0, r4
 8009074:	b002      	add	sp, #8
 8009076:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800907a:	6161      	str	r1, [r4, #20]
 800907c:	e7e9      	b.n	8009052 <__d2b+0x56>
 800907e:	a801      	add	r0, sp, #4
 8009080:	f7ff fd5b 	bl	8008b3a <__lo0bits>
 8009084:	9b01      	ldr	r3, [sp, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	6163      	str	r3, [r4, #20]
 800908a:	3020      	adds	r0, #32
 800908c:	e7e7      	b.n	800905e <__d2b+0x62>
 800908e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009092:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009096:	6030      	str	r0, [r6, #0]
 8009098:	6918      	ldr	r0, [r3, #16]
 800909a:	f7ff fd2f 	bl	8008afc <__hi0bits>
 800909e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090a2:	e7e4      	b.n	800906e <__d2b+0x72>
 80090a4:	0800aac2 	.word	0x0800aac2
 80090a8:	0800aad3 	.word	0x0800aad3

080090ac <__sflush_r>:
 80090ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b2:	0716      	lsls	r6, r2, #28
 80090b4:	4605      	mov	r5, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	d454      	bmi.n	8009164 <__sflush_r+0xb8>
 80090ba:	684b      	ldr	r3, [r1, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dc02      	bgt.n	80090c6 <__sflush_r+0x1a>
 80090c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd48      	ble.n	8009158 <__sflush_r+0xac>
 80090c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090c8:	2e00      	cmp	r6, #0
 80090ca:	d045      	beq.n	8009158 <__sflush_r+0xac>
 80090cc:	2300      	movs	r3, #0
 80090ce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090d2:	682f      	ldr	r7, [r5, #0]
 80090d4:	6a21      	ldr	r1, [r4, #32]
 80090d6:	602b      	str	r3, [r5, #0]
 80090d8:	d030      	beq.n	800913c <__sflush_r+0x90>
 80090da:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	0759      	lsls	r1, r3, #29
 80090e0:	d505      	bpl.n	80090ee <__sflush_r+0x42>
 80090e2:	6863      	ldr	r3, [r4, #4]
 80090e4:	1ad2      	subs	r2, r2, r3
 80090e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090e8:	b10b      	cbz	r3, 80090ee <__sflush_r+0x42>
 80090ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ec:	1ad2      	subs	r2, r2, r3
 80090ee:	2300      	movs	r3, #0
 80090f0:	4628      	mov	r0, r5
 80090f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090f4:	6a21      	ldr	r1, [r4, #32]
 80090f6:	47b0      	blx	r6
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	89a3      	ldrh	r3, [r4, #12]
 80090fc:	d106      	bne.n	800910c <__sflush_r+0x60>
 80090fe:	6829      	ldr	r1, [r5, #0]
 8009100:	291d      	cmp	r1, #29
 8009102:	d82b      	bhi.n	800915c <__sflush_r+0xb0>
 8009104:	4a28      	ldr	r2, [pc, #160]	@ (80091a8 <__sflush_r+0xfc>)
 8009106:	410a      	asrs	r2, r1
 8009108:	07d6      	lsls	r6, r2, #31
 800910a:	d427      	bmi.n	800915c <__sflush_r+0xb0>
 800910c:	2200      	movs	r2, #0
 800910e:	6062      	str	r2, [r4, #4]
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	04d9      	lsls	r1, r3, #19
 8009114:	6022      	str	r2, [r4, #0]
 8009116:	d504      	bpl.n	8009122 <__sflush_r+0x76>
 8009118:	1c42      	adds	r2, r0, #1
 800911a:	d101      	bne.n	8009120 <__sflush_r+0x74>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b903      	cbnz	r3, 8009122 <__sflush_r+0x76>
 8009120:	6560      	str	r0, [r4, #84]	@ 0x54
 8009122:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009124:	602f      	str	r7, [r5, #0]
 8009126:	b1b9      	cbz	r1, 8009158 <__sflush_r+0xac>
 8009128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800912c:	4299      	cmp	r1, r3
 800912e:	d002      	beq.n	8009136 <__sflush_r+0x8a>
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fb3d 	bl	80087b0 <_free_r>
 8009136:	2300      	movs	r3, #0
 8009138:	6363      	str	r3, [r4, #52]	@ 0x34
 800913a:	e00d      	b.n	8009158 <__sflush_r+0xac>
 800913c:	2301      	movs	r3, #1
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	4602      	mov	r2, r0
 8009144:	1c50      	adds	r0, r2, #1
 8009146:	d1c9      	bne.n	80090dc <__sflush_r+0x30>
 8009148:	682b      	ldr	r3, [r5, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0c6      	beq.n	80090dc <__sflush_r+0x30>
 800914e:	2b1d      	cmp	r3, #29
 8009150:	d001      	beq.n	8009156 <__sflush_r+0xaa>
 8009152:	2b16      	cmp	r3, #22
 8009154:	d11d      	bne.n	8009192 <__sflush_r+0xe6>
 8009156:	602f      	str	r7, [r5, #0]
 8009158:	2000      	movs	r0, #0
 800915a:	e021      	b.n	80091a0 <__sflush_r+0xf4>
 800915c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009160:	b21b      	sxth	r3, r3
 8009162:	e01a      	b.n	800919a <__sflush_r+0xee>
 8009164:	690f      	ldr	r7, [r1, #16]
 8009166:	2f00      	cmp	r7, #0
 8009168:	d0f6      	beq.n	8009158 <__sflush_r+0xac>
 800916a:	0793      	lsls	r3, r2, #30
 800916c:	bf18      	it	ne
 800916e:	2300      	movne	r3, #0
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	bf08      	it	eq
 8009174:	694b      	ldreq	r3, [r1, #20]
 8009176:	1bf6      	subs	r6, r6, r7
 8009178:	600f      	str	r7, [r1, #0]
 800917a:	608b      	str	r3, [r1, #8]
 800917c:	2e00      	cmp	r6, #0
 800917e:	ddeb      	ble.n	8009158 <__sflush_r+0xac>
 8009180:	4633      	mov	r3, r6
 8009182:	463a      	mov	r2, r7
 8009184:	4628      	mov	r0, r5
 8009186:	6a21      	ldr	r1, [r4, #32]
 8009188:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800918c:	47e0      	blx	ip
 800918e:	2800      	cmp	r0, #0
 8009190:	dc07      	bgt.n	80091a2 <__sflush_r+0xf6>
 8009192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919a:	f04f 30ff 	mov.w	r0, #4294967295
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a2:	4407      	add	r7, r0
 80091a4:	1a36      	subs	r6, r6, r0
 80091a6:	e7e9      	b.n	800917c <__sflush_r+0xd0>
 80091a8:	dfbffffe 	.word	0xdfbffffe

080091ac <_fflush_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	690b      	ldr	r3, [r1, #16]
 80091b0:	4605      	mov	r5, r0
 80091b2:	460c      	mov	r4, r1
 80091b4:	b913      	cbnz	r3, 80091bc <_fflush_r+0x10>
 80091b6:	2500      	movs	r5, #0
 80091b8:	4628      	mov	r0, r5
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	b118      	cbz	r0, 80091c6 <_fflush_r+0x1a>
 80091be:	6a03      	ldr	r3, [r0, #32]
 80091c0:	b90b      	cbnz	r3, 80091c6 <_fflush_r+0x1a>
 80091c2:	f7fe fb9d 	bl	8007900 <__sinit>
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f3      	beq.n	80091b6 <_fflush_r+0xa>
 80091ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091d0:	07d0      	lsls	r0, r2, #31
 80091d2:	d404      	bmi.n	80091de <_fflush_r+0x32>
 80091d4:	0599      	lsls	r1, r3, #22
 80091d6:	d402      	bmi.n	80091de <_fflush_r+0x32>
 80091d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091da:	f7fe fc88 	bl	8007aee <__retarget_lock_acquire_recursive>
 80091de:	4628      	mov	r0, r5
 80091e0:	4621      	mov	r1, r4
 80091e2:	f7ff ff63 	bl	80090ac <__sflush_r>
 80091e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091e8:	4605      	mov	r5, r0
 80091ea:	07da      	lsls	r2, r3, #31
 80091ec:	d4e4      	bmi.n	80091b8 <_fflush_r+0xc>
 80091ee:	89a3      	ldrh	r3, [r4, #12]
 80091f0:	059b      	lsls	r3, r3, #22
 80091f2:	d4e1      	bmi.n	80091b8 <_fflush_r+0xc>
 80091f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091f6:	f7fe fc7b 	bl	8007af0 <__retarget_lock_release_recursive>
 80091fa:	e7dd      	b.n	80091b8 <_fflush_r+0xc>

080091fc <_sbrk_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	2300      	movs	r3, #0
 8009200:	4d05      	ldr	r5, [pc, #20]	@ (8009218 <_sbrk_r+0x1c>)
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f8 ff9c 	bl	8002144 <_sbrk>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_sbrk_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_sbrk_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	2000096c 	.word	0x2000096c

0800921c <memcpy>:
 800921c:	440a      	add	r2, r1
 800921e:	4291      	cmp	r1, r2
 8009220:	f100 33ff 	add.w	r3, r0, #4294967295
 8009224:	d100      	bne.n	8009228 <memcpy+0xc>
 8009226:	4770      	bx	lr
 8009228:	b510      	push	{r4, lr}
 800922a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800922e:	4291      	cmp	r1, r2
 8009230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009234:	d1f9      	bne.n	800922a <memcpy+0xe>
 8009236:	bd10      	pop	{r4, pc}

08009238 <__assert_func>:
 8009238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800923a:	4614      	mov	r4, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4b09      	ldr	r3, [pc, #36]	@ (8009264 <__assert_func+0x2c>)
 8009240:	4605      	mov	r5, r0
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68d8      	ldr	r0, [r3, #12]
 8009246:	b954      	cbnz	r4, 800925e <__assert_func+0x26>
 8009248:	4b07      	ldr	r3, [pc, #28]	@ (8009268 <__assert_func+0x30>)
 800924a:	461c      	mov	r4, r3
 800924c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009250:	9100      	str	r1, [sp, #0]
 8009252:	462b      	mov	r3, r5
 8009254:	4905      	ldr	r1, [pc, #20]	@ (800926c <__assert_func+0x34>)
 8009256:	f000 f841 	bl	80092dc <fiprintf>
 800925a:	f000 f851 	bl	8009300 <abort>
 800925e:	4b04      	ldr	r3, [pc, #16]	@ (8009270 <__assert_func+0x38>)
 8009260:	e7f4      	b.n	800924c <__assert_func+0x14>
 8009262:	bf00      	nop
 8009264:	20000024 	.word	0x20000024
 8009268:	0800ac6d 	.word	0x0800ac6d
 800926c:	0800ac3f 	.word	0x0800ac3f
 8009270:	0800ac32 	.word	0x0800ac32

08009274 <_calloc_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	fba1 5402 	umull	r5, r4, r1, r2
 800927a:	b93c      	cbnz	r4, 800928c <_calloc_r+0x18>
 800927c:	4629      	mov	r1, r5
 800927e:	f7ff fb09 	bl	8008894 <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b928      	cbnz	r0, 8009292 <_calloc_r+0x1e>
 8009286:	2600      	movs	r6, #0
 8009288:	4630      	mov	r0, r6
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	220c      	movs	r2, #12
 800928e:	6002      	str	r2, [r0, #0]
 8009290:	e7f9      	b.n	8009286 <_calloc_r+0x12>
 8009292:	462a      	mov	r2, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7fe fbac 	bl	80079f2 <memset>
 800929a:	e7f5      	b.n	8009288 <_calloc_r+0x14>

0800929c <__ascii_mbtowc>:
 800929c:	b082      	sub	sp, #8
 800929e:	b901      	cbnz	r1, 80092a2 <__ascii_mbtowc+0x6>
 80092a0:	a901      	add	r1, sp, #4
 80092a2:	b142      	cbz	r2, 80092b6 <__ascii_mbtowc+0x1a>
 80092a4:	b14b      	cbz	r3, 80092ba <__ascii_mbtowc+0x1e>
 80092a6:	7813      	ldrb	r3, [r2, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	1e10      	subs	r0, r2, #0
 80092ae:	bf18      	it	ne
 80092b0:	2001      	movne	r0, #1
 80092b2:	b002      	add	sp, #8
 80092b4:	4770      	bx	lr
 80092b6:	4610      	mov	r0, r2
 80092b8:	e7fb      	b.n	80092b2 <__ascii_mbtowc+0x16>
 80092ba:	f06f 0001 	mvn.w	r0, #1
 80092be:	e7f8      	b.n	80092b2 <__ascii_mbtowc+0x16>

080092c0 <__ascii_wctomb>:
 80092c0:	4603      	mov	r3, r0
 80092c2:	4608      	mov	r0, r1
 80092c4:	b141      	cbz	r1, 80092d8 <__ascii_wctomb+0x18>
 80092c6:	2aff      	cmp	r2, #255	@ 0xff
 80092c8:	d904      	bls.n	80092d4 <__ascii_wctomb+0x14>
 80092ca:	228a      	movs	r2, #138	@ 0x8a
 80092cc:	f04f 30ff 	mov.w	r0, #4294967295
 80092d0:	601a      	str	r2, [r3, #0]
 80092d2:	4770      	bx	lr
 80092d4:	2001      	movs	r0, #1
 80092d6:	700a      	strb	r2, [r1, #0]
 80092d8:	4770      	bx	lr
	...

080092dc <fiprintf>:
 80092dc:	b40e      	push	{r1, r2, r3}
 80092de:	b503      	push	{r0, r1, lr}
 80092e0:	4601      	mov	r1, r0
 80092e2:	ab03      	add	r3, sp, #12
 80092e4:	4805      	ldr	r0, [pc, #20]	@ (80092fc <fiprintf+0x20>)
 80092e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	f000 f835 	bl	800935c <_vfiprintf_r>
 80092f2:	b002      	add	sp, #8
 80092f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092f8:	b003      	add	sp, #12
 80092fa:	4770      	bx	lr
 80092fc:	20000024 	.word	0x20000024

08009300 <abort>:
 8009300:	2006      	movs	r0, #6
 8009302:	b508      	push	{r3, lr}
 8009304:	f000 f9fe 	bl	8009704 <raise>
 8009308:	2001      	movs	r0, #1
 800930a:	f7f8 fea6 	bl	800205a <_exit>

0800930e <__sfputc_r>:
 800930e:	6893      	ldr	r3, [r2, #8]
 8009310:	b410      	push	{r4}
 8009312:	3b01      	subs	r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	6093      	str	r3, [r2, #8]
 8009318:	da07      	bge.n	800932a <__sfputc_r+0x1c>
 800931a:	6994      	ldr	r4, [r2, #24]
 800931c:	42a3      	cmp	r3, r4
 800931e:	db01      	blt.n	8009324 <__sfputc_r+0x16>
 8009320:	290a      	cmp	r1, #10
 8009322:	d102      	bne.n	800932a <__sfputc_r+0x1c>
 8009324:	bc10      	pop	{r4}
 8009326:	f000 b931 	b.w	800958c <__swbuf_r>
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	1c58      	adds	r0, r3, #1
 800932e:	6010      	str	r0, [r2, #0]
 8009330:	7019      	strb	r1, [r3, #0]
 8009332:	4608      	mov	r0, r1
 8009334:	bc10      	pop	{r4}
 8009336:	4770      	bx	lr

08009338 <__sfputs_r>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	4614      	mov	r4, r2
 8009340:	18d5      	adds	r5, r2, r3
 8009342:	42ac      	cmp	r4, r5
 8009344:	d101      	bne.n	800934a <__sfputs_r+0x12>
 8009346:	2000      	movs	r0, #0
 8009348:	e007      	b.n	800935a <__sfputs_r+0x22>
 800934a:	463a      	mov	r2, r7
 800934c:	4630      	mov	r0, r6
 800934e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009352:	f7ff ffdc 	bl	800930e <__sfputc_r>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d1f3      	bne.n	8009342 <__sfputs_r+0xa>
 800935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800935c <_vfiprintf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460d      	mov	r5, r1
 8009362:	4614      	mov	r4, r2
 8009364:	4698      	mov	r8, r3
 8009366:	4606      	mov	r6, r0
 8009368:	b09d      	sub	sp, #116	@ 0x74
 800936a:	b118      	cbz	r0, 8009374 <_vfiprintf_r+0x18>
 800936c:	6a03      	ldr	r3, [r0, #32]
 800936e:	b90b      	cbnz	r3, 8009374 <_vfiprintf_r+0x18>
 8009370:	f7fe fac6 	bl	8007900 <__sinit>
 8009374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	d405      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d402      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 8009380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009382:	f7fe fbb4 	bl	8007aee <__retarget_lock_acquire_recursive>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	d501      	bpl.n	8009390 <_vfiprintf_r+0x34>
 800938c:	692b      	ldr	r3, [r5, #16]
 800938e:	b99b      	cbnz	r3, 80093b8 <_vfiprintf_r+0x5c>
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f938 	bl	8009608 <__swsetup_r>
 8009398:	b170      	cbz	r0, 80093b8 <_vfiprintf_r+0x5c>
 800939a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800939c:	07dc      	lsls	r4, r3, #31
 800939e:	d504      	bpl.n	80093aa <_vfiprintf_r+0x4e>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b01d      	add	sp, #116	@ 0x74
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	0598      	lsls	r0, r3, #22
 80093ae:	d4f7      	bmi.n	80093a0 <_vfiprintf_r+0x44>
 80093b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b2:	f7fe fb9d 	bl	8007af0 <__retarget_lock_release_recursive>
 80093b6:	e7f3      	b.n	80093a0 <_vfiprintf_r+0x44>
 80093b8:	2300      	movs	r3, #0
 80093ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80093bc:	2320      	movs	r3, #32
 80093be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093c2:	2330      	movs	r3, #48	@ 0x30
 80093c4:	f04f 0901 	mov.w	r9, #1
 80093c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80093cc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009578 <_vfiprintf_r+0x21c>
 80093d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093d4:	4623      	mov	r3, r4
 80093d6:	469a      	mov	sl, r3
 80093d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093dc:	b10a      	cbz	r2, 80093e2 <_vfiprintf_r+0x86>
 80093de:	2a25      	cmp	r2, #37	@ 0x25
 80093e0:	d1f9      	bne.n	80093d6 <_vfiprintf_r+0x7a>
 80093e2:	ebba 0b04 	subs.w	fp, sl, r4
 80093e6:	d00b      	beq.n	8009400 <_vfiprintf_r+0xa4>
 80093e8:	465b      	mov	r3, fp
 80093ea:	4622      	mov	r2, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ffa2 	bl	8009338 <__sfputs_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	f000 80a7 	beq.w	8009548 <_vfiprintf_r+0x1ec>
 80093fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093fc:	445a      	add	r2, fp
 80093fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009400:	f89a 3000 	ldrb.w	r3, [sl]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 809f 	beq.w	8009548 <_vfiprintf_r+0x1ec>
 800940a:	2300      	movs	r3, #0
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009414:	f10a 0a01 	add.w	sl, sl, #1
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	9307      	str	r3, [sp, #28]
 800941c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009420:	931a      	str	r3, [sp, #104]	@ 0x68
 8009422:	4654      	mov	r4, sl
 8009424:	2205      	movs	r2, #5
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4853      	ldr	r0, [pc, #332]	@ (8009578 <_vfiprintf_r+0x21c>)
 800942c:	f7fe fb61 	bl	8007af2 <memchr>
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	b9d8      	cbnz	r0, 800946c <_vfiprintf_r+0x110>
 8009434:	06d1      	lsls	r1, r2, #27
 8009436:	bf44      	itt	mi
 8009438:	2320      	movmi	r3, #32
 800943a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800943e:	0713      	lsls	r3, r2, #28
 8009440:	bf44      	itt	mi
 8009442:	232b      	movmi	r3, #43	@ 0x2b
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009448:	f89a 3000 	ldrb.w	r3, [sl]
 800944c:	2b2a      	cmp	r3, #42	@ 0x2a
 800944e:	d015      	beq.n	800947c <_vfiprintf_r+0x120>
 8009450:	4654      	mov	r4, sl
 8009452:	2000      	movs	r0, #0
 8009454:	f04f 0c0a 	mov.w	ip, #10
 8009458:	9a07      	ldr	r2, [sp, #28]
 800945a:	4621      	mov	r1, r4
 800945c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009460:	3b30      	subs	r3, #48	@ 0x30
 8009462:	2b09      	cmp	r3, #9
 8009464:	d94b      	bls.n	80094fe <_vfiprintf_r+0x1a2>
 8009466:	b1b0      	cbz	r0, 8009496 <_vfiprintf_r+0x13a>
 8009468:	9207      	str	r2, [sp, #28]
 800946a:	e014      	b.n	8009496 <_vfiprintf_r+0x13a>
 800946c:	eba0 0308 	sub.w	r3, r0, r8
 8009470:	fa09 f303 	lsl.w	r3, r9, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	46a2      	mov	sl, r4
 8009478:	9304      	str	r3, [sp, #16]
 800947a:	e7d2      	b.n	8009422 <_vfiprintf_r+0xc6>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9103      	str	r1, [sp, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbb      	ittet	lt
 8009488:	425b      	neglt	r3, r3
 800948a:	f042 0202 	orrlt.w	r2, r2, #2
 800948e:	9307      	strge	r3, [sp, #28]
 8009490:	9307      	strlt	r3, [sp, #28]
 8009492:	bfb8      	it	lt
 8009494:	9204      	strlt	r2, [sp, #16]
 8009496:	7823      	ldrb	r3, [r4, #0]
 8009498:	2b2e      	cmp	r3, #46	@ 0x2e
 800949a:	d10a      	bne.n	80094b2 <_vfiprintf_r+0x156>
 800949c:	7863      	ldrb	r3, [r4, #1]
 800949e:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a0:	d132      	bne.n	8009508 <_vfiprintf_r+0x1ac>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	3402      	adds	r4, #2
 80094a6:	1d1a      	adds	r2, r3, #4
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	9203      	str	r2, [sp, #12]
 80094ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800957c <_vfiprintf_r+0x220>
 80094b6:	2203      	movs	r2, #3
 80094b8:	4650      	mov	r0, sl
 80094ba:	7821      	ldrb	r1, [r4, #0]
 80094bc:	f7fe fb19 	bl	8007af2 <memchr>
 80094c0:	b138      	cbz	r0, 80094d2 <_vfiprintf_r+0x176>
 80094c2:	2240      	movs	r2, #64	@ 0x40
 80094c4:	9b04      	ldr	r3, [sp, #16]
 80094c6:	eba0 000a 	sub.w	r0, r0, sl
 80094ca:	4082      	lsls	r2, r0
 80094cc:	4313      	orrs	r3, r2
 80094ce:	3401      	adds	r4, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	2206      	movs	r2, #6
 80094d8:	4829      	ldr	r0, [pc, #164]	@ (8009580 <_vfiprintf_r+0x224>)
 80094da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094de:	f7fe fb08 	bl	8007af2 <memchr>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d03f      	beq.n	8009566 <_vfiprintf_r+0x20a>
 80094e6:	4b27      	ldr	r3, [pc, #156]	@ (8009584 <_vfiprintf_r+0x228>)
 80094e8:	bb1b      	cbnz	r3, 8009532 <_vfiprintf_r+0x1d6>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	3307      	adds	r3, #7
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	3308      	adds	r3, #8
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f8:	443b      	add	r3, r7
 80094fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80094fc:	e76a      	b.n	80093d4 <_vfiprintf_r+0x78>
 80094fe:	460c      	mov	r4, r1
 8009500:	2001      	movs	r0, #1
 8009502:	fb0c 3202 	mla	r2, ip, r2, r3
 8009506:	e7a8      	b.n	800945a <_vfiprintf_r+0xfe>
 8009508:	2300      	movs	r3, #0
 800950a:	f04f 0c0a 	mov.w	ip, #10
 800950e:	4619      	mov	r1, r3
 8009510:	3401      	adds	r4, #1
 8009512:	9305      	str	r3, [sp, #20]
 8009514:	4620      	mov	r0, r4
 8009516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800951a:	3a30      	subs	r2, #48	@ 0x30
 800951c:	2a09      	cmp	r2, #9
 800951e:	d903      	bls.n	8009528 <_vfiprintf_r+0x1cc>
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0c6      	beq.n	80094b2 <_vfiprintf_r+0x156>
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	e7c4      	b.n	80094b2 <_vfiprintf_r+0x156>
 8009528:	4604      	mov	r4, r0
 800952a:	2301      	movs	r3, #1
 800952c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009530:	e7f0      	b.n	8009514 <_vfiprintf_r+0x1b8>
 8009532:	ab03      	add	r3, sp, #12
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	462a      	mov	r2, r5
 8009538:	4630      	mov	r0, r6
 800953a:	4b13      	ldr	r3, [pc, #76]	@ (8009588 <_vfiprintf_r+0x22c>)
 800953c:	a904      	add	r1, sp, #16
 800953e:	f7fd fd95 	bl	800706c <_printf_float>
 8009542:	4607      	mov	r7, r0
 8009544:	1c78      	adds	r0, r7, #1
 8009546:	d1d6      	bne.n	80094f6 <_vfiprintf_r+0x19a>
 8009548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800954a:	07d9      	lsls	r1, r3, #31
 800954c:	d405      	bmi.n	800955a <_vfiprintf_r+0x1fe>
 800954e:	89ab      	ldrh	r3, [r5, #12]
 8009550:	059a      	lsls	r2, r3, #22
 8009552:	d402      	bmi.n	800955a <_vfiprintf_r+0x1fe>
 8009554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009556:	f7fe facb 	bl	8007af0 <__retarget_lock_release_recursive>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	065b      	lsls	r3, r3, #25
 800955e:	f53f af1f 	bmi.w	80093a0 <_vfiprintf_r+0x44>
 8009562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009564:	e71e      	b.n	80093a4 <_vfiprintf_r+0x48>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4630      	mov	r0, r6
 800956e:	4b06      	ldr	r3, [pc, #24]	@ (8009588 <_vfiprintf_r+0x22c>)
 8009570:	a904      	add	r1, sp, #16
 8009572:	f7fe f819 	bl	80075a8 <_printf_i>
 8009576:	e7e4      	b.n	8009542 <_vfiprintf_r+0x1e6>
 8009578:	0800ad6f 	.word	0x0800ad6f
 800957c:	0800ad75 	.word	0x0800ad75
 8009580:	0800ad79 	.word	0x0800ad79
 8009584:	0800706d 	.word	0x0800706d
 8009588:	08009339 	.word	0x08009339

0800958c <__swbuf_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	460e      	mov	r6, r1
 8009590:	4614      	mov	r4, r2
 8009592:	4605      	mov	r5, r0
 8009594:	b118      	cbz	r0, 800959e <__swbuf_r+0x12>
 8009596:	6a03      	ldr	r3, [r0, #32]
 8009598:	b90b      	cbnz	r3, 800959e <__swbuf_r+0x12>
 800959a:	f7fe f9b1 	bl	8007900 <__sinit>
 800959e:	69a3      	ldr	r3, [r4, #24]
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	071a      	lsls	r2, r3, #28
 80095a6:	d501      	bpl.n	80095ac <__swbuf_r+0x20>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	b943      	cbnz	r3, 80095be <__swbuf_r+0x32>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f82a 	bl	8009608 <__swsetup_r>
 80095b4:	b118      	cbz	r0, 80095be <__swbuf_r+0x32>
 80095b6:	f04f 37ff 	mov.w	r7, #4294967295
 80095ba:	4638      	mov	r0, r7
 80095bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6922      	ldr	r2, [r4, #16]
 80095c2:	b2f6      	uxtb	r6, r6
 80095c4:	1a98      	subs	r0, r3, r2
 80095c6:	6963      	ldr	r3, [r4, #20]
 80095c8:	4637      	mov	r7, r6
 80095ca:	4283      	cmp	r3, r0
 80095cc:	dc05      	bgt.n	80095da <__swbuf_r+0x4e>
 80095ce:	4621      	mov	r1, r4
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7ff fdeb 	bl	80091ac <_fflush_r>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d1ed      	bne.n	80095b6 <__swbuf_r+0x2a>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	3b01      	subs	r3, #1
 80095de:	60a3      	str	r3, [r4, #8]
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	701e      	strb	r6, [r3, #0]
 80095e8:	6962      	ldr	r2, [r4, #20]
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d004      	beq.n	80095fa <__swbuf_r+0x6e>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d5e1      	bpl.n	80095ba <__swbuf_r+0x2e>
 80095f6:	2e0a      	cmp	r6, #10
 80095f8:	d1df      	bne.n	80095ba <__swbuf_r+0x2e>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7ff fdd5 	bl	80091ac <_fflush_r>
 8009602:	2800      	cmp	r0, #0
 8009604:	d0d9      	beq.n	80095ba <__swbuf_r+0x2e>
 8009606:	e7d6      	b.n	80095b6 <__swbuf_r+0x2a>

08009608 <__swsetup_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4b29      	ldr	r3, [pc, #164]	@ (80096b0 <__swsetup_r+0xa8>)
 800960c:	4605      	mov	r5, r0
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	460c      	mov	r4, r1
 8009612:	b118      	cbz	r0, 800961c <__swsetup_r+0x14>
 8009614:	6a03      	ldr	r3, [r0, #32]
 8009616:	b90b      	cbnz	r3, 800961c <__swsetup_r+0x14>
 8009618:	f7fe f972 	bl	8007900 <__sinit>
 800961c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009620:	0719      	lsls	r1, r3, #28
 8009622:	d422      	bmi.n	800966a <__swsetup_r+0x62>
 8009624:	06da      	lsls	r2, r3, #27
 8009626:	d407      	bmi.n	8009638 <__swsetup_r+0x30>
 8009628:	2209      	movs	r2, #9
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009630:	f04f 30ff 	mov.w	r0, #4294967295
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	e033      	b.n	80096a0 <__swsetup_r+0x98>
 8009638:	0758      	lsls	r0, r3, #29
 800963a:	d512      	bpl.n	8009662 <__swsetup_r+0x5a>
 800963c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800963e:	b141      	cbz	r1, 8009652 <__swsetup_r+0x4a>
 8009640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009644:	4299      	cmp	r1, r3
 8009646:	d002      	beq.n	800964e <__swsetup_r+0x46>
 8009648:	4628      	mov	r0, r5
 800964a:	f7ff f8b1 	bl	80087b0 <_free_r>
 800964e:	2300      	movs	r3, #0
 8009650:	6363      	str	r3, [r4, #52]	@ 0x34
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	2300      	movs	r3, #0
 800965c:	6063      	str	r3, [r4, #4]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f043 0308 	orr.w	r3, r3, #8
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	b94b      	cbnz	r3, 8009682 <__swsetup_r+0x7a>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009678:	d003      	beq.n	8009682 <__swsetup_r+0x7a>
 800967a:	4621      	mov	r1, r4
 800967c:	4628      	mov	r0, r5
 800967e:	f000 f882 	bl	8009786 <__smakebuf_r>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	f013 0201 	ands.w	r2, r3, #1
 800968a:	d00a      	beq.n	80096a2 <__swsetup_r+0x9a>
 800968c:	2200      	movs	r2, #0
 800968e:	60a2      	str	r2, [r4, #8]
 8009690:	6962      	ldr	r2, [r4, #20]
 8009692:	4252      	negs	r2, r2
 8009694:	61a2      	str	r2, [r4, #24]
 8009696:	6922      	ldr	r2, [r4, #16]
 8009698:	b942      	cbnz	r2, 80096ac <__swsetup_r+0xa4>
 800969a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800969e:	d1c5      	bne.n	800962c <__swsetup_r+0x24>
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	0799      	lsls	r1, r3, #30
 80096a4:	bf58      	it	pl
 80096a6:	6962      	ldrpl	r2, [r4, #20]
 80096a8:	60a2      	str	r2, [r4, #8]
 80096aa:	e7f4      	b.n	8009696 <__swsetup_r+0x8e>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7f7      	b.n	80096a0 <__swsetup_r+0x98>
 80096b0:	20000024 	.word	0x20000024

080096b4 <_raise_r>:
 80096b4:	291f      	cmp	r1, #31
 80096b6:	b538      	push	{r3, r4, r5, lr}
 80096b8:	4605      	mov	r5, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	d904      	bls.n	80096c8 <_raise_r+0x14>
 80096be:	2316      	movs	r3, #22
 80096c0:	6003      	str	r3, [r0, #0]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096ca:	b112      	cbz	r2, 80096d2 <_raise_r+0x1e>
 80096cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d0:	b94b      	cbnz	r3, 80096e6 <_raise_r+0x32>
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 f830 	bl	8009738 <_getpid_r>
 80096d8:	4622      	mov	r2, r4
 80096da:	4601      	mov	r1, r0
 80096dc:	4628      	mov	r0, r5
 80096de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e2:	f000 b817 	b.w	8009714 <_kill_r>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d00a      	beq.n	8009700 <_raise_r+0x4c>
 80096ea:	1c59      	adds	r1, r3, #1
 80096ec:	d103      	bne.n	80096f6 <_raise_r+0x42>
 80096ee:	2316      	movs	r3, #22
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7e7      	b.n	80096c6 <_raise_r+0x12>
 80096f6:	2100      	movs	r1, #0
 80096f8:	4620      	mov	r0, r4
 80096fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096fe:	4798      	blx	r3
 8009700:	2000      	movs	r0, #0
 8009702:	e7e0      	b.n	80096c6 <_raise_r+0x12>

08009704 <raise>:
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <raise+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f7ff bfd3 	b.w	80096b4 <_raise_r>
 800970e:	bf00      	nop
 8009710:	20000024 	.word	0x20000024

08009714 <_kill_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	2300      	movs	r3, #0
 8009718:	4d06      	ldr	r5, [pc, #24]	@ (8009734 <_kill_r+0x20>)
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	f7f8 fc8a 	bl	800203a <_kill>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	d102      	bne.n	8009730 <_kill_r+0x1c>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	b103      	cbz	r3, 8009730 <_kill_r+0x1c>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	2000096c 	.word	0x2000096c

08009738 <_getpid_r>:
 8009738:	f7f8 bc78 	b.w	800202c <_getpid>

0800973c <__swhatbuf_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	4615      	mov	r5, r2
 8009746:	2900      	cmp	r1, #0
 8009748:	461e      	mov	r6, r3
 800974a:	b096      	sub	sp, #88	@ 0x58
 800974c:	da0c      	bge.n	8009768 <__swhatbuf_r+0x2c>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	2100      	movs	r1, #0
 8009752:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009756:	bf14      	ite	ne
 8009758:	2340      	movne	r3, #64	@ 0x40
 800975a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800975e:	2000      	movs	r0, #0
 8009760:	6031      	str	r1, [r6, #0]
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	b016      	add	sp, #88	@ 0x58
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	466a      	mov	r2, sp
 800976a:	f000 f849 	bl	8009800 <_fstat_r>
 800976e:	2800      	cmp	r0, #0
 8009770:	dbed      	blt.n	800974e <__swhatbuf_r+0x12>
 8009772:	9901      	ldr	r1, [sp, #4]
 8009774:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009778:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800977c:	4259      	negs	r1, r3
 800977e:	4159      	adcs	r1, r3
 8009780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009784:	e7eb      	b.n	800975e <__swhatbuf_r+0x22>

08009786 <__smakebuf_r>:
 8009786:	898b      	ldrh	r3, [r1, #12]
 8009788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978a:	079d      	lsls	r5, r3, #30
 800978c:	4606      	mov	r6, r0
 800978e:	460c      	mov	r4, r1
 8009790:	d507      	bpl.n	80097a2 <__smakebuf_r+0x1c>
 8009792:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009796:	6023      	str	r3, [r4, #0]
 8009798:	6123      	str	r3, [r4, #16]
 800979a:	2301      	movs	r3, #1
 800979c:	6163      	str	r3, [r4, #20]
 800979e:	b003      	add	sp, #12
 80097a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a2:	466a      	mov	r2, sp
 80097a4:	ab01      	add	r3, sp, #4
 80097a6:	f7ff ffc9 	bl	800973c <__swhatbuf_r>
 80097aa:	9f00      	ldr	r7, [sp, #0]
 80097ac:	4605      	mov	r5, r0
 80097ae:	4639      	mov	r1, r7
 80097b0:	4630      	mov	r0, r6
 80097b2:	f7ff f86f 	bl	8008894 <_malloc_r>
 80097b6:	b948      	cbnz	r0, 80097cc <__smakebuf_r+0x46>
 80097b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097bc:	059a      	lsls	r2, r3, #22
 80097be:	d4ee      	bmi.n	800979e <__smakebuf_r+0x18>
 80097c0:	f023 0303 	bic.w	r3, r3, #3
 80097c4:	f043 0302 	orr.w	r3, r3, #2
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	e7e2      	b.n	8009792 <__smakebuf_r+0xc>
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	6020      	str	r0, [r4, #0]
 80097dc:	b15b      	cbz	r3, 80097f6 <__smakebuf_r+0x70>
 80097de:	4630      	mov	r0, r6
 80097e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e4:	f000 f81e 	bl	8009824 <_isatty_r>
 80097e8:	b128      	cbz	r0, 80097f6 <__smakebuf_r+0x70>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f023 0303 	bic.w	r3, r3, #3
 80097f0:	f043 0301 	orr.w	r3, r3, #1
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	431d      	orrs	r5, r3
 80097fa:	81a5      	strh	r5, [r4, #12]
 80097fc:	e7cf      	b.n	800979e <__smakebuf_r+0x18>
	...

08009800 <_fstat_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	2300      	movs	r3, #0
 8009804:	4d06      	ldr	r5, [pc, #24]	@ (8009820 <_fstat_r+0x20>)
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	4611      	mov	r1, r2
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	f7f8 fc73 	bl	80020f8 <_fstat>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d102      	bne.n	800981c <_fstat_r+0x1c>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b103      	cbz	r3, 800981c <_fstat_r+0x1c>
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	bf00      	nop
 8009820:	2000096c 	.word	0x2000096c

08009824 <_isatty_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	2300      	movs	r3, #0
 8009828:	4d05      	ldr	r5, [pc, #20]	@ (8009840 <_isatty_r+0x1c>)
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 fc71 	bl	8002116 <_isatty>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_isatty_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_isatty_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	2000096c 	.word	0x2000096c

08009844 <pow>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4614      	mov	r4, r2
 800984a:	461d      	mov	r5, r3
 800984c:	4680      	mov	r8, r0
 800984e:	4689      	mov	r9, r1
 8009850:	f000 faf6 	bl	8009e40 <__ieee754_pow>
 8009854:	4622      	mov	r2, r4
 8009856:	4606      	mov	r6, r0
 8009858:	460f      	mov	r7, r1
 800985a:	462b      	mov	r3, r5
 800985c:	4620      	mov	r0, r4
 800985e:	4629      	mov	r1, r5
 8009860:	f7f7 f8d4 	bl	8000a0c <__aeabi_dcmpun>
 8009864:	bbc8      	cbnz	r0, 80098da <pow+0x96>
 8009866:	2200      	movs	r2, #0
 8009868:	2300      	movs	r3, #0
 800986a:	4640      	mov	r0, r8
 800986c:	4649      	mov	r1, r9
 800986e:	f7f7 f89b 	bl	80009a8 <__aeabi_dcmpeq>
 8009872:	b1b8      	cbz	r0, 80098a4 <pow+0x60>
 8009874:	2200      	movs	r2, #0
 8009876:	2300      	movs	r3, #0
 8009878:	4620      	mov	r0, r4
 800987a:	4629      	mov	r1, r5
 800987c:	f7f7 f894 	bl	80009a8 <__aeabi_dcmpeq>
 8009880:	2800      	cmp	r0, #0
 8009882:	d141      	bne.n	8009908 <pow+0xc4>
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f000 f9fe 	bl	8009c88 <finite>
 800988c:	b328      	cbz	r0, 80098da <pow+0x96>
 800988e:	2200      	movs	r2, #0
 8009890:	2300      	movs	r3, #0
 8009892:	4620      	mov	r0, r4
 8009894:	4629      	mov	r1, r5
 8009896:	f7f7 f891 	bl	80009bc <__aeabi_dcmplt>
 800989a:	b1f0      	cbz	r0, 80098da <pow+0x96>
 800989c:	f7fe f8fc 	bl	8007a98 <__errno>
 80098a0:	2322      	movs	r3, #34	@ 0x22
 80098a2:	e019      	b.n	80098d8 <pow+0x94>
 80098a4:	4630      	mov	r0, r6
 80098a6:	4639      	mov	r1, r7
 80098a8:	f000 f9ee 	bl	8009c88 <finite>
 80098ac:	b9c8      	cbnz	r0, 80098e2 <pow+0x9e>
 80098ae:	4640      	mov	r0, r8
 80098b0:	4649      	mov	r1, r9
 80098b2:	f000 f9e9 	bl	8009c88 <finite>
 80098b6:	b1a0      	cbz	r0, 80098e2 <pow+0x9e>
 80098b8:	4620      	mov	r0, r4
 80098ba:	4629      	mov	r1, r5
 80098bc:	f000 f9e4 	bl	8009c88 <finite>
 80098c0:	b178      	cbz	r0, 80098e2 <pow+0x9e>
 80098c2:	4632      	mov	r2, r6
 80098c4:	463b      	mov	r3, r7
 80098c6:	4630      	mov	r0, r6
 80098c8:	4639      	mov	r1, r7
 80098ca:	f7f7 f89f 	bl	8000a0c <__aeabi_dcmpun>
 80098ce:	2800      	cmp	r0, #0
 80098d0:	d0e4      	beq.n	800989c <pow+0x58>
 80098d2:	f7fe f8e1 	bl	8007a98 <__errno>
 80098d6:	2321      	movs	r3, #33	@ 0x21
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	4630      	mov	r0, r6
 80098dc:	4639      	mov	r1, r7
 80098de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e2:	2200      	movs	r2, #0
 80098e4:	2300      	movs	r3, #0
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f7 f85d 	bl	80009a8 <__aeabi_dcmpeq>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d0f3      	beq.n	80098da <pow+0x96>
 80098f2:	4640      	mov	r0, r8
 80098f4:	4649      	mov	r1, r9
 80098f6:	f000 f9c7 	bl	8009c88 <finite>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d0ed      	beq.n	80098da <pow+0x96>
 80098fe:	4620      	mov	r0, r4
 8009900:	4629      	mov	r1, r5
 8009902:	f000 f9c1 	bl	8009c88 <finite>
 8009906:	e7c8      	b.n	800989a <pow+0x56>
 8009908:	2600      	movs	r6, #0
 800990a:	4f01      	ldr	r7, [pc, #4]	@ (8009910 <pow+0xcc>)
 800990c:	e7e5      	b.n	80098da <pow+0x96>
 800990e:	bf00      	nop
 8009910:	3ff00000 	.word	0x3ff00000

08009914 <sqrt>:
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	4606      	mov	r6, r0
 8009918:	460f      	mov	r7, r1
 800991a:	f000 f9bb 	bl	8009c94 <__ieee754_sqrt>
 800991e:	4632      	mov	r2, r6
 8009920:	4604      	mov	r4, r0
 8009922:	460d      	mov	r5, r1
 8009924:	463b      	mov	r3, r7
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f7 f86f 	bl	8000a0c <__aeabi_dcmpun>
 800992e:	b990      	cbnz	r0, 8009956 <sqrt+0x42>
 8009930:	2200      	movs	r2, #0
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f840 	bl	80009bc <__aeabi_dcmplt>
 800993c:	b158      	cbz	r0, 8009956 <sqrt+0x42>
 800993e:	f7fe f8ab 	bl	8007a98 <__errno>
 8009942:	2321      	movs	r3, #33	@ 0x21
 8009944:	2200      	movs	r2, #0
 8009946:	6003      	str	r3, [r0, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	f7f6 feed 	bl	800072c <__aeabi_ddiv>
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	4620      	mov	r0, r4
 8009958:	4629      	mov	r1, r5
 800995a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800995c:	0000      	movs	r0, r0
	...

08009960 <atan>:
 8009960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009964:	4bbc      	ldr	r3, [pc, #752]	@ (8009c58 <atan+0x2f8>)
 8009966:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800996a:	429e      	cmp	r6, r3
 800996c:	4604      	mov	r4, r0
 800996e:	460d      	mov	r5, r1
 8009970:	468b      	mov	fp, r1
 8009972:	d918      	bls.n	80099a6 <atan+0x46>
 8009974:	4bb9      	ldr	r3, [pc, #740]	@ (8009c5c <atan+0x2fc>)
 8009976:	429e      	cmp	r6, r3
 8009978:	d801      	bhi.n	800997e <atan+0x1e>
 800997a:	d109      	bne.n	8009990 <atan+0x30>
 800997c:	b140      	cbz	r0, 8009990 <atan+0x30>
 800997e:	4622      	mov	r2, r4
 8009980:	462b      	mov	r3, r5
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	f7f6 fbf1 	bl	800016c <__adddf3>
 800998a:	4604      	mov	r4, r0
 800998c:	460d      	mov	r5, r1
 800998e:	e006      	b.n	800999e <atan+0x3e>
 8009990:	f1bb 0f00 	cmp.w	fp, #0
 8009994:	f340 8123 	ble.w	8009bde <atan+0x27e>
 8009998:	a593      	add	r5, pc, #588	@ (adr r5, 8009be8 <atan+0x288>)
 800999a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	4bae      	ldr	r3, [pc, #696]	@ (8009c60 <atan+0x300>)
 80099a8:	429e      	cmp	r6, r3
 80099aa:	d811      	bhi.n	80099d0 <atan+0x70>
 80099ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80099b0:	429e      	cmp	r6, r3
 80099b2:	d80a      	bhi.n	80099ca <atan+0x6a>
 80099b4:	a38e      	add	r3, pc, #568	@ (adr r3, 8009bf0 <atan+0x290>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fbd7 	bl	800016c <__adddf3>
 80099be:	2200      	movs	r2, #0
 80099c0:	4ba8      	ldr	r3, [pc, #672]	@ (8009c64 <atan+0x304>)
 80099c2:	f7f7 f819 	bl	80009f8 <__aeabi_dcmpgt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d1e9      	bne.n	800999e <atan+0x3e>
 80099ca:	f04f 3aff 	mov.w	sl, #4294967295
 80099ce:	e027      	b.n	8009a20 <atan+0xc0>
 80099d0:	f000 f956 	bl	8009c80 <fabs>
 80099d4:	4ba4      	ldr	r3, [pc, #656]	@ (8009c68 <atan+0x308>)
 80099d6:	4604      	mov	r4, r0
 80099d8:	429e      	cmp	r6, r3
 80099da:	460d      	mov	r5, r1
 80099dc:	f200 80b8 	bhi.w	8009b50 <atan+0x1f0>
 80099e0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 80099e4:	429e      	cmp	r6, r3
 80099e6:	f200 809c 	bhi.w	8009b22 <atan+0x1c2>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	f7f6 fbbd 	bl	800016c <__adddf3>
 80099f2:	2200      	movs	r2, #0
 80099f4:	4b9b      	ldr	r3, [pc, #620]	@ (8009c64 <atan+0x304>)
 80099f6:	f7f6 fbb7 	bl	8000168 <__aeabi_dsub>
 80099fa:	2200      	movs	r2, #0
 80099fc:	4606      	mov	r6, r0
 80099fe:	460f      	mov	r7, r1
 8009a00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 fbb0 	bl	800016c <__adddf3>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	460b      	mov	r3, r1
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f6 fe8a 	bl	800072c <__aeabi_ddiv>
 8009a18:	f04f 0a00 	mov.w	sl, #0
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	460d      	mov	r5, r1
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	4620      	mov	r0, r4
 8009a26:	4629      	mov	r1, r5
 8009a28:	f7f6 fd56 	bl	80004d8 <__aeabi_dmul>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	460b      	mov	r3, r1
 8009a30:	4680      	mov	r8, r0
 8009a32:	4689      	mov	r9, r1
 8009a34:	f7f6 fd50 	bl	80004d8 <__aeabi_dmul>
 8009a38:	a36f      	add	r3, pc, #444	@ (adr r3, 8009bf8 <atan+0x298>)
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460f      	mov	r7, r1
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	a36e      	add	r3, pc, #440	@ (adr r3, 8009c00 <atan+0x2a0>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fb8e 	bl	800016c <__adddf3>
 8009a50:	4632      	mov	r2, r6
 8009a52:	463b      	mov	r3, r7
 8009a54:	f7f6 fd40 	bl	80004d8 <__aeabi_dmul>
 8009a58:	a36b      	add	r3, pc, #428	@ (adr r3, 8009c08 <atan+0x2a8>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fb85 	bl	800016c <__adddf3>
 8009a62:	4632      	mov	r2, r6
 8009a64:	463b      	mov	r3, r7
 8009a66:	f7f6 fd37 	bl	80004d8 <__aeabi_dmul>
 8009a6a:	a369      	add	r3, pc, #420	@ (adr r3, 8009c10 <atan+0x2b0>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fb7c 	bl	800016c <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	a366      	add	r3, pc, #408	@ (adr r3, 8009c18 <atan+0x2b8>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fb73 	bl	800016c <__adddf3>
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	f7f6 fd25 	bl	80004d8 <__aeabi_dmul>
 8009a8e:	a364      	add	r3, pc, #400	@ (adr r3, 8009c20 <atan+0x2c0>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fb6a 	bl	800016c <__adddf3>
 8009a98:	4642      	mov	r2, r8
 8009a9a:	464b      	mov	r3, r9
 8009a9c:	f7f6 fd1c 	bl	80004d8 <__aeabi_dmul>
 8009aa0:	a361      	add	r3, pc, #388	@ (adr r3, 8009c28 <atan+0x2c8>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	4680      	mov	r8, r0
 8009aa8:	4689      	mov	r9, r1
 8009aaa:	4630      	mov	r0, r6
 8009aac:	4639      	mov	r1, r7
 8009aae:	f7f6 fd13 	bl	80004d8 <__aeabi_dmul>
 8009ab2:	a35f      	add	r3, pc, #380	@ (adr r3, 8009c30 <atan+0x2d0>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fb56 	bl	8000168 <__aeabi_dsub>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fd0a 	bl	80004d8 <__aeabi_dmul>
 8009ac4:	a35c      	add	r3, pc, #368	@ (adr r3, 8009c38 <atan+0x2d8>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fb4d 	bl	8000168 <__aeabi_dsub>
 8009ace:	4632      	mov	r2, r6
 8009ad0:	463b      	mov	r3, r7
 8009ad2:	f7f6 fd01 	bl	80004d8 <__aeabi_dmul>
 8009ad6:	a35a      	add	r3, pc, #360	@ (adr r3, 8009c40 <atan+0x2e0>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f7f6 fb44 	bl	8000168 <__aeabi_dsub>
 8009ae0:	4632      	mov	r2, r6
 8009ae2:	463b      	mov	r3, r7
 8009ae4:	f7f6 fcf8 	bl	80004d8 <__aeabi_dmul>
 8009ae8:	a357      	add	r3, pc, #348	@ (adr r3, 8009c48 <atan+0x2e8>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fb3b 	bl	8000168 <__aeabi_dsub>
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	f7f6 fcef 	bl	80004d8 <__aeabi_dmul>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	f7f6 fb33 	bl	800016c <__adddf3>
 8009b06:	4622      	mov	r2, r4
 8009b08:	462b      	mov	r3, r5
 8009b0a:	f7f6 fce5 	bl	80004d8 <__aeabi_dmul>
 8009b0e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	d144      	bne.n	8009ba2 <atan+0x242>
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fb24 	bl	8000168 <__aeabi_dsub>
 8009b20:	e733      	b.n	800998a <atan+0x2a>
 8009b22:	2200      	movs	r2, #0
 8009b24:	4b4f      	ldr	r3, [pc, #316]	@ (8009c64 <atan+0x304>)
 8009b26:	f7f6 fb1f 	bl	8000168 <__aeabi_dsub>
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	460f      	mov	r7, r1
 8009b30:	4620      	mov	r0, r4
 8009b32:	4629      	mov	r1, r5
 8009b34:	4b4b      	ldr	r3, [pc, #300]	@ (8009c64 <atan+0x304>)
 8009b36:	f7f6 fb19 	bl	800016c <__adddf3>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4630      	mov	r0, r6
 8009b40:	4639      	mov	r1, r7
 8009b42:	f7f6 fdf3 	bl	800072c <__aeabi_ddiv>
 8009b46:	f04f 0a01 	mov.w	sl, #1
 8009b4a:	4604      	mov	r4, r0
 8009b4c:	460d      	mov	r5, r1
 8009b4e:	e767      	b.n	8009a20 <atan+0xc0>
 8009b50:	4b46      	ldr	r3, [pc, #280]	@ (8009c6c <atan+0x30c>)
 8009b52:	429e      	cmp	r6, r3
 8009b54:	d21a      	bcs.n	8009b8c <atan+0x22c>
 8009b56:	2200      	movs	r2, #0
 8009b58:	4b45      	ldr	r3, [pc, #276]	@ (8009c70 <atan+0x310>)
 8009b5a:	f7f6 fb05 	bl	8000168 <__aeabi_dsub>
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4606      	mov	r6, r0
 8009b62:	460f      	mov	r7, r1
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	4b41      	ldr	r3, [pc, #260]	@ (8009c70 <atan+0x310>)
 8009b6a:	f7f6 fcb5 	bl	80004d8 <__aeabi_dmul>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	4b3c      	ldr	r3, [pc, #240]	@ (8009c64 <atan+0x304>)
 8009b72:	f7f6 fafb 	bl	800016c <__adddf3>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fdd5 	bl	800072c <__aeabi_ddiv>
 8009b82:	f04f 0a02 	mov.w	sl, #2
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	e749      	b.n	8009a20 <atan+0xc0>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	2000      	movs	r0, #0
 8009b92:	4938      	ldr	r1, [pc, #224]	@ (8009c74 <atan+0x314>)
 8009b94:	f7f6 fdca 	bl	800072c <__aeabi_ddiv>
 8009b98:	f04f 0a03 	mov.w	sl, #3
 8009b9c:	4604      	mov	r4, r0
 8009b9e:	460d      	mov	r5, r1
 8009ba0:	e73e      	b.n	8009a20 <atan+0xc0>
 8009ba2:	4b35      	ldr	r3, [pc, #212]	@ (8009c78 <atan+0x318>)
 8009ba4:	4e35      	ldr	r6, [pc, #212]	@ (8009c7c <atan+0x31c>)
 8009ba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fadb 	bl	8000168 <__aeabi_dsub>
 8009bb2:	4622      	mov	r2, r4
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	f7f6 fad7 	bl	8000168 <__aeabi_dsub>
 8009bba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009bc6:	f7f6 facf 	bl	8000168 <__aeabi_dsub>
 8009bca:	f1bb 0f00 	cmp.w	fp, #0
 8009bce:	4604      	mov	r4, r0
 8009bd0:	460d      	mov	r5, r1
 8009bd2:	f6bf aee4 	bge.w	800999e <atan+0x3e>
 8009bd6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009bda:	461d      	mov	r5, r3
 8009bdc:	e6df      	b.n	800999e <atan+0x3e>
 8009bde:	a51c      	add	r5, pc, #112	@ (adr r5, 8009c50 <atan+0x2f0>)
 8009be0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009be4:	e6db      	b.n	800999e <atan+0x3e>
 8009be6:	bf00      	nop
 8009be8:	54442d18 	.word	0x54442d18
 8009bec:	3ff921fb 	.word	0x3ff921fb
 8009bf0:	8800759c 	.word	0x8800759c
 8009bf4:	7e37e43c 	.word	0x7e37e43c
 8009bf8:	e322da11 	.word	0xe322da11
 8009bfc:	3f90ad3a 	.word	0x3f90ad3a
 8009c00:	24760deb 	.word	0x24760deb
 8009c04:	3fa97b4b 	.word	0x3fa97b4b
 8009c08:	a0d03d51 	.word	0xa0d03d51
 8009c0c:	3fb10d66 	.word	0x3fb10d66
 8009c10:	c54c206e 	.word	0xc54c206e
 8009c14:	3fb745cd 	.word	0x3fb745cd
 8009c18:	920083ff 	.word	0x920083ff
 8009c1c:	3fc24924 	.word	0x3fc24924
 8009c20:	5555550d 	.word	0x5555550d
 8009c24:	3fd55555 	.word	0x3fd55555
 8009c28:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c2c:	bfa2b444 	.word	0xbfa2b444
 8009c30:	52defd9a 	.word	0x52defd9a
 8009c34:	3fadde2d 	.word	0x3fadde2d
 8009c38:	af749a6d 	.word	0xaf749a6d
 8009c3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c40:	fe231671 	.word	0xfe231671
 8009c44:	3fbc71c6 	.word	0x3fbc71c6
 8009c48:	9998ebc4 	.word	0x9998ebc4
 8009c4c:	3fc99999 	.word	0x3fc99999
 8009c50:	54442d18 	.word	0x54442d18
 8009c54:	bff921fb 	.word	0xbff921fb
 8009c58:	440fffff 	.word	0x440fffff
 8009c5c:	7ff00000 	.word	0x7ff00000
 8009c60:	3fdbffff 	.word	0x3fdbffff
 8009c64:	3ff00000 	.word	0x3ff00000
 8009c68:	3ff2ffff 	.word	0x3ff2ffff
 8009c6c:	40038000 	.word	0x40038000
 8009c70:	3ff80000 	.word	0x3ff80000
 8009c74:	bff00000 	.word	0xbff00000
 8009c78:	0800ad80 	.word	0x0800ad80
 8009c7c:	0800ada0 	.word	0x0800ada0

08009c80 <fabs>:
 8009c80:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009c84:	4619      	mov	r1, r3
 8009c86:	4770      	bx	lr

08009c88 <finite>:
 8009c88:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8009c8c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8009c90:	0fc0      	lsrs	r0, r0, #31
 8009c92:	4770      	bx	lr

08009c94 <__ieee754_sqrt>:
 8009c94:	4a67      	ldr	r2, [pc, #412]	@ (8009e34 <__ieee754_sqrt+0x1a0>)
 8009c96:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	438a      	bics	r2, r1
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	460f      	mov	r7, r1
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	d10e      	bne.n	8009cc4 <__ieee754_sqrt+0x30>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f7f6 fc16 	bl	80004d8 <__aeabi_dmul>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f7f6 fa5a 	bl	800016c <__adddf3>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	460f      	mov	r7, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	dc0c      	bgt.n	8009ce2 <__ieee754_sqrt+0x4e>
 8009cc8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009ccc:	4302      	orrs	r2, r0
 8009cce:	d0f5      	beq.n	8009cbc <__ieee754_sqrt+0x28>
 8009cd0:	b189      	cbz	r1, 8009cf6 <__ieee754_sqrt+0x62>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	f7f6 fa48 	bl	8000168 <__aeabi_dsub>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	f7f6 fd26 	bl	800072c <__aeabi_ddiv>
 8009ce0:	e7ea      	b.n	8009cb8 <__ieee754_sqrt+0x24>
 8009ce2:	150a      	asrs	r2, r1, #20
 8009ce4:	d115      	bne.n	8009d12 <__ieee754_sqrt+0x7e>
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	e009      	b.n	8009cfe <__ieee754_sqrt+0x6a>
 8009cea:	0ae3      	lsrs	r3, r4, #11
 8009cec:	3a15      	subs	r2, #21
 8009cee:	0564      	lsls	r4, r4, #21
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d0fa      	beq.n	8009cea <__ieee754_sqrt+0x56>
 8009cf4:	e7f7      	b.n	8009ce6 <__ieee754_sqrt+0x52>
 8009cf6:	460a      	mov	r2, r1
 8009cf8:	e7fa      	b.n	8009cf0 <__ieee754_sqrt+0x5c>
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	3101      	adds	r1, #1
 8009cfe:	02d8      	lsls	r0, r3, #11
 8009d00:	d5fb      	bpl.n	8009cfa <__ieee754_sqrt+0x66>
 8009d02:	1e48      	subs	r0, r1, #1
 8009d04:	1a12      	subs	r2, r2, r0
 8009d06:	f1c1 0020 	rsb	r0, r1, #32
 8009d0a:	fa24 f000 	lsr.w	r0, r4, r0
 8009d0e:	4303      	orrs	r3, r0
 8009d10:	408c      	lsls	r4, r1
 8009d12:	2600      	movs	r6, #0
 8009d14:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009d18:	2116      	movs	r1, #22
 8009d1a:	07d2      	lsls	r2, r2, #31
 8009d1c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009d20:	4632      	mov	r2, r6
 8009d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d2a:	bf5c      	itt	pl
 8009d2c:	005b      	lslpl	r3, r3, #1
 8009d2e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009d32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d36:	bf58      	it	pl
 8009d38:	0064      	lslpl	r4, r4, #1
 8009d3a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009d3e:	107f      	asrs	r7, r7, #1
 8009d40:	0064      	lsls	r4, r4, #1
 8009d42:	1815      	adds	r5, r2, r0
 8009d44:	429d      	cmp	r5, r3
 8009d46:	bfde      	ittt	le
 8009d48:	182a      	addle	r2, r5, r0
 8009d4a:	1b5b      	suble	r3, r3, r5
 8009d4c:	1836      	addle	r6, r6, r0
 8009d4e:	0fe5      	lsrs	r5, r4, #31
 8009d50:	3901      	subs	r1, #1
 8009d52:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009d56:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009d5a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009d5e:	d1f0      	bne.n	8009d42 <__ieee754_sqrt+0xae>
 8009d60:	460d      	mov	r5, r1
 8009d62:	f04f 0a20 	mov.w	sl, #32
 8009d66:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	eb01 0c00 	add.w	ip, r1, r0
 8009d70:	db02      	blt.n	8009d78 <__ieee754_sqrt+0xe4>
 8009d72:	d113      	bne.n	8009d9c <__ieee754_sqrt+0x108>
 8009d74:	45a4      	cmp	ip, r4
 8009d76:	d811      	bhi.n	8009d9c <__ieee754_sqrt+0x108>
 8009d78:	f1bc 0f00 	cmp.w	ip, #0
 8009d7c:	eb0c 0100 	add.w	r1, ip, r0
 8009d80:	da42      	bge.n	8009e08 <__ieee754_sqrt+0x174>
 8009d82:	2900      	cmp	r1, #0
 8009d84:	db40      	blt.n	8009e08 <__ieee754_sqrt+0x174>
 8009d86:	f102 0e01 	add.w	lr, r2, #1
 8009d8a:	1a9b      	subs	r3, r3, r2
 8009d8c:	4672      	mov	r2, lr
 8009d8e:	45a4      	cmp	ip, r4
 8009d90:	bf88      	it	hi
 8009d92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009d96:	eba4 040c 	sub.w	r4, r4, ip
 8009d9a:	4405      	add	r5, r0
 8009d9c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009da0:	f1ba 0a01 	subs.w	sl, sl, #1
 8009da4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009da8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009dac:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009db0:	d1db      	bne.n	8009d6a <__ieee754_sqrt+0xd6>
 8009db2:	431c      	orrs	r4, r3
 8009db4:	d01a      	beq.n	8009dec <__ieee754_sqrt+0x158>
 8009db6:	4c20      	ldr	r4, [pc, #128]	@ (8009e38 <__ieee754_sqrt+0x1a4>)
 8009db8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009e3c <__ieee754_sqrt+0x1a8>
 8009dbc:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009dc0:	e9db 2300 	ldrd	r2, r3, [fp]
 8009dc4:	f7f6 f9d0 	bl	8000168 <__aeabi_dsub>
 8009dc8:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4640      	mov	r0, r8
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	f7f6 fdfc 	bl	80009d0 <__aeabi_dcmple>
 8009dd8:	b140      	cbz	r0, 8009dec <__ieee754_sqrt+0x158>
 8009dda:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009dde:	e9db 2300 	ldrd	r2, r3, [fp]
 8009de2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009de6:	d111      	bne.n	8009e0c <__ieee754_sqrt+0x178>
 8009de8:	4655      	mov	r5, sl
 8009dea:	3601      	adds	r6, #1
 8009dec:	1072      	asrs	r2, r6, #1
 8009dee:	086b      	lsrs	r3, r5, #1
 8009df0:	07f1      	lsls	r1, r6, #31
 8009df2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009df6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009dfa:	bf48      	it	mi
 8009dfc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009e00:	4618      	mov	r0, r3
 8009e02:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009e06:	e757      	b.n	8009cb8 <__ieee754_sqrt+0x24>
 8009e08:	4696      	mov	lr, r2
 8009e0a:	e7be      	b.n	8009d8a <__ieee754_sqrt+0xf6>
 8009e0c:	f7f6 f9ae 	bl	800016c <__adddf3>
 8009e10:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	4640      	mov	r0, r8
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	f7f6 fdce 	bl	80009bc <__aeabi_dcmplt>
 8009e20:	b120      	cbz	r0, 8009e2c <__ieee754_sqrt+0x198>
 8009e22:	1ca8      	adds	r0, r5, #2
 8009e24:	bf08      	it	eq
 8009e26:	3601      	addeq	r6, #1
 8009e28:	3502      	adds	r5, #2
 8009e2a:	e7df      	b.n	8009dec <__ieee754_sqrt+0x158>
 8009e2c:	1c6b      	adds	r3, r5, #1
 8009e2e:	f023 0501 	bic.w	r5, r3, #1
 8009e32:	e7db      	b.n	8009dec <__ieee754_sqrt+0x158>
 8009e34:	7ff00000 	.word	0x7ff00000
 8009e38:	200001e8 	.word	0x200001e8
 8009e3c:	200001e0 	.word	0x200001e0

08009e40 <__ieee754_pow>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	b091      	sub	sp, #68	@ 0x44
 8009e46:	e9cd 2300 	strd	r2, r3, [sp]
 8009e4a:	468b      	mov	fp, r1
 8009e4c:	e9dd 1800 	ldrd	r1, r8, [sp]
 8009e50:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8009e54:	4682      	mov	sl, r0
 8009e56:	ea57 0001 	orrs.w	r0, r7, r1
 8009e5a:	d112      	bne.n	8009e82 <__ieee754_pow+0x42>
 8009e5c:	4653      	mov	r3, sl
 8009e5e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8009e62:	18db      	adds	r3, r3, r3
 8009e64:	4152      	adcs	r2, r2
 8009e66:	4298      	cmp	r0, r3
 8009e68:	4b91      	ldr	r3, [pc, #580]	@ (800a0b0 <__ieee754_pow+0x270>)
 8009e6a:	4193      	sbcs	r3, r2
 8009e6c:	f080 84ce 	bcs.w	800a80c <__ieee754_pow+0x9cc>
 8009e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e74:	4650      	mov	r0, sl
 8009e76:	4659      	mov	r1, fp
 8009e78:	f7f6 f978 	bl	800016c <__adddf3>
 8009e7c:	b011      	add	sp, #68	@ 0x44
 8009e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e82:	4b8c      	ldr	r3, [pc, #560]	@ (800a0b4 <__ieee754_pow+0x274>)
 8009e84:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8009e88:	429e      	cmp	r6, r3
 8009e8a:	465d      	mov	r5, fp
 8009e8c:	46d1      	mov	r9, sl
 8009e8e:	d807      	bhi.n	8009ea0 <__ieee754_pow+0x60>
 8009e90:	d102      	bne.n	8009e98 <__ieee754_pow+0x58>
 8009e92:	f1ba 0f00 	cmp.w	sl, #0
 8009e96:	d1eb      	bne.n	8009e70 <__ieee754_pow+0x30>
 8009e98:	429f      	cmp	r7, r3
 8009e9a:	d801      	bhi.n	8009ea0 <__ieee754_pow+0x60>
 8009e9c:	d10f      	bne.n	8009ebe <__ieee754_pow+0x7e>
 8009e9e:	b171      	cbz	r1, 8009ebe <__ieee754_pow+0x7e>
 8009ea0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8009ea4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8009ea8:	ea55 0509 	orrs.w	r5, r5, r9
 8009eac:	d1e0      	bne.n	8009e70 <__ieee754_pow+0x30>
 8009eae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eb2:	18db      	adds	r3, r3, r3
 8009eb4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8009eb8:	4152      	adcs	r2, r2
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	e7d4      	b.n	8009e68 <__ieee754_pow+0x28>
 8009ebe:	2d00      	cmp	r5, #0
 8009ec0:	4633      	mov	r3, r6
 8009ec2:	da39      	bge.n	8009f38 <__ieee754_pow+0xf8>
 8009ec4:	4a7c      	ldr	r2, [pc, #496]	@ (800a0b8 <__ieee754_pow+0x278>)
 8009ec6:	4297      	cmp	r7, r2
 8009ec8:	d84e      	bhi.n	8009f68 <__ieee754_pow+0x128>
 8009eca:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8009ece:	4297      	cmp	r7, r2
 8009ed0:	f240 84ab 	bls.w	800a82a <__ieee754_pow+0x9ea>
 8009ed4:	153a      	asrs	r2, r7, #20
 8009ed6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009eda:	2a14      	cmp	r2, #20
 8009edc:	dd0f      	ble.n	8009efe <__ieee754_pow+0xbe>
 8009ede:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009ee2:	fa21 f402 	lsr.w	r4, r1, r2
 8009ee6:	fa04 f202 	lsl.w	r2, r4, r2
 8009eea:	428a      	cmp	r2, r1
 8009eec:	f040 849d 	bne.w	800a82a <__ieee754_pow+0x9ea>
 8009ef0:	f004 0401 	and.w	r4, r4, #1
 8009ef4:	f1c4 0402 	rsb	r4, r4, #2
 8009ef8:	2900      	cmp	r1, #0
 8009efa:	d15a      	bne.n	8009fb2 <__ieee754_pow+0x172>
 8009efc:	e00e      	b.n	8009f1c <__ieee754_pow+0xdc>
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d156      	bne.n	8009fb0 <__ieee754_pow+0x170>
 8009f02:	f1c2 0214 	rsb	r2, r2, #20
 8009f06:	fa47 f402 	asr.w	r4, r7, r2
 8009f0a:	fa04 f202 	lsl.w	r2, r4, r2
 8009f0e:	42ba      	cmp	r2, r7
 8009f10:	f040 8488 	bne.w	800a824 <__ieee754_pow+0x9e4>
 8009f14:	f004 0401 	and.w	r4, r4, #1
 8009f18:	f1c4 0402 	rsb	r4, r4, #2
 8009f1c:	4a67      	ldr	r2, [pc, #412]	@ (800a0bc <__ieee754_pow+0x27c>)
 8009f1e:	4297      	cmp	r7, r2
 8009f20:	d130      	bne.n	8009f84 <__ieee754_pow+0x144>
 8009f22:	f1b8 0f00 	cmp.w	r8, #0
 8009f26:	f280 8479 	bge.w	800a81c <__ieee754_pow+0x9dc>
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	465b      	mov	r3, fp
 8009f2e:	2000      	movs	r0, #0
 8009f30:	4962      	ldr	r1, [pc, #392]	@ (800a0bc <__ieee754_pow+0x27c>)
 8009f32:	f7f6 fbfb 	bl	800072c <__aeabi_ddiv>
 8009f36:	e7a1      	b.n	8009e7c <__ieee754_pow+0x3c>
 8009f38:	2400      	movs	r4, #0
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	d139      	bne.n	8009fb2 <__ieee754_pow+0x172>
 8009f3e:	4a5d      	ldr	r2, [pc, #372]	@ (800a0b4 <__ieee754_pow+0x274>)
 8009f40:	4297      	cmp	r7, r2
 8009f42:	d1eb      	bne.n	8009f1c <__ieee754_pow+0xdc>
 8009f44:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8009f48:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8009f4c:	ea53 0309 	orrs.w	r3, r3, r9
 8009f50:	f000 845c 	beq.w	800a80c <__ieee754_pow+0x9cc>
 8009f54:	4b5a      	ldr	r3, [pc, #360]	@ (800a0c0 <__ieee754_pow+0x280>)
 8009f56:	429e      	cmp	r6, r3
 8009f58:	d908      	bls.n	8009f6c <__ieee754_pow+0x12c>
 8009f5a:	f1b8 0f00 	cmp.w	r8, #0
 8009f5e:	f2c0 8459 	blt.w	800a814 <__ieee754_pow+0x9d4>
 8009f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f66:	e789      	b.n	8009e7c <__ieee754_pow+0x3c>
 8009f68:	2402      	movs	r4, #2
 8009f6a:	e7e6      	b.n	8009f3a <__ieee754_pow+0xfa>
 8009f6c:	f1b8 0f00 	cmp.w	r8, #0
 8009f70:	f04f 0000 	mov.w	r0, #0
 8009f74:	f04f 0100 	mov.w	r1, #0
 8009f78:	da80      	bge.n	8009e7c <__ieee754_pow+0x3c>
 8009f7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f7e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8009f82:	e77b      	b.n	8009e7c <__ieee754_pow+0x3c>
 8009f84:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8009f88:	d106      	bne.n	8009f98 <__ieee754_pow+0x158>
 8009f8a:	4652      	mov	r2, sl
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	4650      	mov	r0, sl
 8009f90:	4659      	mov	r1, fp
 8009f92:	f7f6 faa1 	bl	80004d8 <__aeabi_dmul>
 8009f96:	e771      	b.n	8009e7c <__ieee754_pow+0x3c>
 8009f98:	4a4a      	ldr	r2, [pc, #296]	@ (800a0c4 <__ieee754_pow+0x284>)
 8009f9a:	4590      	cmp	r8, r2
 8009f9c:	d109      	bne.n	8009fb2 <__ieee754_pow+0x172>
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	db07      	blt.n	8009fb2 <__ieee754_pow+0x172>
 8009fa2:	4650      	mov	r0, sl
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	b011      	add	sp, #68	@ 0x44
 8009fa8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	f7ff be72 	b.w	8009c94 <__ieee754_sqrt>
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	4659      	mov	r1, fp
 8009fb6:	9302      	str	r3, [sp, #8]
 8009fb8:	f7ff fe62 	bl	8009c80 <fabs>
 8009fbc:	9b02      	ldr	r3, [sp, #8]
 8009fbe:	f1b9 0f00 	cmp.w	r9, #0
 8009fc2:	d127      	bne.n	800a014 <__ieee754_pow+0x1d4>
 8009fc4:	4a3d      	ldr	r2, [pc, #244]	@ (800a0bc <__ieee754_pow+0x27c>)
 8009fc6:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8009fca:	4594      	cmp	ip, r2
 8009fcc:	d000      	beq.n	8009fd0 <__ieee754_pow+0x190>
 8009fce:	bb0e      	cbnz	r6, 800a014 <__ieee754_pow+0x1d4>
 8009fd0:	f1b8 0f00 	cmp.w	r8, #0
 8009fd4:	da05      	bge.n	8009fe2 <__ieee754_pow+0x1a2>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	2000      	movs	r0, #0
 8009fdc:	4937      	ldr	r1, [pc, #220]	@ (800a0bc <__ieee754_pow+0x27c>)
 8009fde:	f7f6 fba5 	bl	800072c <__aeabi_ddiv>
 8009fe2:	2d00      	cmp	r5, #0
 8009fe4:	f6bf af4a 	bge.w	8009e7c <__ieee754_pow+0x3c>
 8009fe8:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8009fec:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009ff0:	4326      	orrs	r6, r4
 8009ff2:	d108      	bne.n	800a006 <__ieee754_pow+0x1c6>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	f7f6 f8b4 	bl	8000168 <__aeabi_dsub>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	e795      	b.n	8009f32 <__ieee754_pow+0xf2>
 800a006:	2c01      	cmp	r4, #1
 800a008:	f47f af38 	bne.w	8009e7c <__ieee754_pow+0x3c>
 800a00c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a010:	4619      	mov	r1, r3
 800a012:	e733      	b.n	8009e7c <__ieee754_pow+0x3c>
 800a014:	0fea      	lsrs	r2, r5, #31
 800a016:	3a01      	subs	r2, #1
 800a018:	ea52 0c04 	orrs.w	ip, r2, r4
 800a01c:	d102      	bne.n	800a024 <__ieee754_pow+0x1e4>
 800a01e:	4652      	mov	r2, sl
 800a020:	465b      	mov	r3, fp
 800a022:	e7e9      	b.n	8009ff8 <__ieee754_pow+0x1b8>
 800a024:	f04f 0900 	mov.w	r9, #0
 800a028:	3c01      	subs	r4, #1
 800a02a:	4314      	orrs	r4, r2
 800a02c:	bf14      	ite	ne
 800a02e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800a0bc <__ieee754_pow+0x27c>
 800a032:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800a0c8 <__ieee754_pow+0x288>
 800a036:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800a03a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800a03e:	f240 8107 	bls.w	800a250 <__ieee754_pow+0x410>
 800a042:	4b22      	ldr	r3, [pc, #136]	@ (800a0cc <__ieee754_pow+0x28c>)
 800a044:	429f      	cmp	r7, r3
 800a046:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c0 <__ieee754_pow+0x280>)
 800a048:	d913      	bls.n	800a072 <__ieee754_pow+0x232>
 800a04a:	429e      	cmp	r6, r3
 800a04c:	d808      	bhi.n	800a060 <__ieee754_pow+0x220>
 800a04e:	f1b8 0f00 	cmp.w	r8, #0
 800a052:	da08      	bge.n	800a066 <__ieee754_pow+0x226>
 800a054:	2000      	movs	r0, #0
 800a056:	b011      	add	sp, #68	@ 0x44
 800a058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	f000 bcb0 	b.w	800a9c0 <__math_oflow>
 800a060:	f1b8 0f00 	cmp.w	r8, #0
 800a064:	dcf6      	bgt.n	800a054 <__ieee754_pow+0x214>
 800a066:	2000      	movs	r0, #0
 800a068:	b011      	add	sp, #68	@ 0x44
 800a06a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06e:	f000 bca2 	b.w	800a9b6 <__math_uflow>
 800a072:	429e      	cmp	r6, r3
 800a074:	d20c      	bcs.n	800a090 <__ieee754_pow+0x250>
 800a076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a07a:	2200      	movs	r2, #0
 800a07c:	2300      	movs	r3, #0
 800a07e:	f7f6 fc9d 	bl	80009bc <__aeabi_dcmplt>
 800a082:	3800      	subs	r0, #0
 800a084:	bf18      	it	ne
 800a086:	2001      	movne	r0, #1
 800a088:	f1b8 0f00 	cmp.w	r8, #0
 800a08c:	daec      	bge.n	800a068 <__ieee754_pow+0x228>
 800a08e:	e7e2      	b.n	800a056 <__ieee754_pow+0x216>
 800a090:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <__ieee754_pow+0x27c>)
 800a092:	2200      	movs	r2, #0
 800a094:	429e      	cmp	r6, r3
 800a096:	d91b      	bls.n	800a0d0 <__ieee754_pow+0x290>
 800a098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a09c:	2300      	movs	r3, #0
 800a09e:	f7f6 fc8d 	bl	80009bc <__aeabi_dcmplt>
 800a0a2:	3800      	subs	r0, #0
 800a0a4:	bf18      	it	ne
 800a0a6:	2001      	movne	r0, #1
 800a0a8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ac:	dcd3      	bgt.n	800a056 <__ieee754_pow+0x216>
 800a0ae:	e7db      	b.n	800a068 <__ieee754_pow+0x228>
 800a0b0:	fff00000 	.word	0xfff00000
 800a0b4:	7ff00000 	.word	0x7ff00000
 800a0b8:	433fffff 	.word	0x433fffff
 800a0bc:	3ff00000 	.word	0x3ff00000
 800a0c0:	3fefffff 	.word	0x3fefffff
 800a0c4:	3fe00000 	.word	0x3fe00000
 800a0c8:	bff00000 	.word	0xbff00000
 800a0cc:	43f00000 	.word	0x43f00000
 800a0d0:	4b5b      	ldr	r3, [pc, #364]	@ (800a240 <__ieee754_pow+0x400>)
 800a0d2:	f7f6 f849 	bl	8000168 <__aeabi_dsub>
 800a0d6:	a352      	add	r3, pc, #328	@ (adr r3, 800a220 <__ieee754_pow+0x3e0>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	f7f6 f9fa 	bl	80004d8 <__aeabi_dmul>
 800a0e4:	a350      	add	r3, pc, #320	@ (adr r3, 800a228 <__ieee754_pow+0x3e8>)
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f9f1 	bl	80004d8 <__aeabi_dmul>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	4682      	mov	sl, r0
 800a0fa:	468b      	mov	fp, r1
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	4629      	mov	r1, r5
 800a100:	4b50      	ldr	r3, [pc, #320]	@ (800a244 <__ieee754_pow+0x404>)
 800a102:	f7f6 f9e9 	bl	80004d8 <__aeabi_dmul>
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	a149      	add	r1, pc, #292	@ (adr r1, 800a230 <__ieee754_pow+0x3f0>)
 800a10c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a110:	f7f6 f82a 	bl	8000168 <__aeabi_dsub>
 800a114:	4622      	mov	r2, r4
 800a116:	462b      	mov	r3, r5
 800a118:	f7f6 f9de 	bl	80004d8 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	2000      	movs	r0, #0
 800a122:	4949      	ldr	r1, [pc, #292]	@ (800a248 <__ieee754_pow+0x408>)
 800a124:	f7f6 f820 	bl	8000168 <__aeabi_dsub>
 800a128:	4622      	mov	r2, r4
 800a12a:	4680      	mov	r8, r0
 800a12c:	4689      	mov	r9, r1
 800a12e:	462b      	mov	r3, r5
 800a130:	4620      	mov	r0, r4
 800a132:	4629      	mov	r1, r5
 800a134:	f7f6 f9d0 	bl	80004d8 <__aeabi_dmul>
 800a138:	4602      	mov	r2, r0
 800a13a:	460b      	mov	r3, r1
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 f9ca 	bl	80004d8 <__aeabi_dmul>
 800a144:	a33c      	add	r3, pc, #240	@ (adr r3, 800a238 <__ieee754_pow+0x3f8>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 f9c5 	bl	80004d8 <__aeabi_dmul>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	4650      	mov	r0, sl
 800a154:	4659      	mov	r1, fp
 800a156:	f7f6 f807 	bl	8000168 <__aeabi_dsub>
 800a15a:	2400      	movs	r4, #0
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4680      	mov	r8, r0
 800a162:	4689      	mov	r9, r1
 800a164:	4630      	mov	r0, r6
 800a166:	4639      	mov	r1, r7
 800a168:	f7f6 f800 	bl	800016c <__adddf3>
 800a16c:	4632      	mov	r2, r6
 800a16e:	463b      	mov	r3, r7
 800a170:	4620      	mov	r0, r4
 800a172:	460d      	mov	r5, r1
 800a174:	f7f5 fff8 	bl	8000168 <__aeabi_dsub>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4640      	mov	r0, r8
 800a17e:	4649      	mov	r1, r9
 800a180:	f7f5 fff2 	bl	8000168 <__aeabi_dsub>
 800a184:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a18c:	2300      	movs	r3, #0
 800a18e:	9304      	str	r3, [sp, #16]
 800a190:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a194:	4606      	mov	r6, r0
 800a196:	460f      	mov	r7, r1
 800a198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a19c:	4652      	mov	r2, sl
 800a19e:	465b      	mov	r3, fp
 800a1a0:	f7f5 ffe2 	bl	8000168 <__aeabi_dsub>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	462b      	mov	r3, r5
 800a1a8:	f7f6 f996 	bl	80004d8 <__aeabi_dmul>
 800a1ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1b0:	4680      	mov	r8, r0
 800a1b2:	4689      	mov	r9, r1
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 f98e 	bl	80004d8 <__aeabi_dmul>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f5 ffd2 	bl	800016c <__adddf3>
 800a1c8:	4652      	mov	r2, sl
 800a1ca:	465b      	mov	r3, fp
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	460f      	mov	r7, r1
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 f980 	bl	80004d8 <__aeabi_dmul>
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4602      	mov	r2, r0
 800a1dc:	4680      	mov	r8, r0
 800a1de:	4689      	mov	r9, r1
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	4639      	mov	r1, r7
 800a1e4:	f7f5 ffc2 	bl	800016c <__adddf3>
 800a1e8:	4b18      	ldr	r3, [pc, #96]	@ (800a24c <__ieee754_pow+0x40c>)
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	468a      	mov	sl, r1
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	f340 82e0 	ble.w	800a7b8 <__ieee754_pow+0x978>
 800a1f8:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a1fc:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a200:	4303      	orrs	r3, r0
 800a202:	f000 81df 	beq.w	800a5c4 <__ieee754_pow+0x784>
 800a206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a20a:	2200      	movs	r2, #0
 800a20c:	2300      	movs	r3, #0
 800a20e:	f7f6 fbd5 	bl	80009bc <__aeabi_dcmplt>
 800a212:	3800      	subs	r0, #0
 800a214:	bf18      	it	ne
 800a216:	2001      	movne	r0, #1
 800a218:	e71d      	b.n	800a056 <__ieee754_pow+0x216>
 800a21a:	bf00      	nop
 800a21c:	f3af 8000 	nop.w
 800a220:	60000000 	.word	0x60000000
 800a224:	3ff71547 	.word	0x3ff71547
 800a228:	f85ddf44 	.word	0xf85ddf44
 800a22c:	3e54ae0b 	.word	0x3e54ae0b
 800a230:	55555555 	.word	0x55555555
 800a234:	3fd55555 	.word	0x3fd55555
 800a238:	652b82fe 	.word	0x652b82fe
 800a23c:	3ff71547 	.word	0x3ff71547
 800a240:	3ff00000 	.word	0x3ff00000
 800a244:	3fd00000 	.word	0x3fd00000
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	408fffff 	.word	0x408fffff
 800a250:	4ad3      	ldr	r2, [pc, #844]	@ (800a5a0 <__ieee754_pow+0x760>)
 800a252:	402a      	ands	r2, r5
 800a254:	2a00      	cmp	r2, #0
 800a256:	f040 817a 	bne.w	800a54e <__ieee754_pow+0x70e>
 800a25a:	4bd2      	ldr	r3, [pc, #840]	@ (800a5a4 <__ieee754_pow+0x764>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	f7f6 f93b 	bl	80004d8 <__aeabi_dmul>
 800a262:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800a266:	460b      	mov	r3, r1
 800a268:	151a      	asrs	r2, r3, #20
 800a26a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a26e:	4422      	add	r2, r4
 800a270:	920a      	str	r2, [sp, #40]	@ 0x28
 800a272:	4acd      	ldr	r2, [pc, #820]	@ (800a5a8 <__ieee754_pow+0x768>)
 800a274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a278:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800a27c:	4293      	cmp	r3, r2
 800a27e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a282:	dd08      	ble.n	800a296 <__ieee754_pow+0x456>
 800a284:	4ac9      	ldr	r2, [pc, #804]	@ (800a5ac <__ieee754_pow+0x76c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	f340 8163 	ble.w	800a552 <__ieee754_pow+0x712>
 800a28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a28e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a292:	3301      	adds	r3, #1
 800a294:	930a      	str	r3, [sp, #40]	@ 0x28
 800a296:	2600      	movs	r6, #0
 800a298:	00f3      	lsls	r3, r6, #3
 800a29a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a29c:	4bc4      	ldr	r3, [pc, #784]	@ (800a5b0 <__ieee754_pow+0x770>)
 800a29e:	4629      	mov	r1, r5
 800a2a0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a2a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a2ae:	4623      	mov	r3, r4
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	f7f5 ff59 	bl	8000168 <__aeabi_dsub>
 800a2b6:	4652      	mov	r2, sl
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a2be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	49b9      	ldr	r1, [pc, #740]	@ (800a5b4 <__ieee754_pow+0x774>)
 800a2ce:	f7f6 fa2d 	bl	800072c <__aeabi_ddiv>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2de:	f7f6 f8fb 	bl	80004d8 <__aeabi_dmul>
 800a2e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a2e6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a2ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	46ab      	mov	fp, r5
 800a2f4:	106d      	asrs	r5, r5, #1
 800a2f6:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a300:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a304:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a308:	4640      	mov	r0, r8
 800a30a:	4649      	mov	r1, r9
 800a30c:	4614      	mov	r4, r2
 800a30e:	461d      	mov	r5, r3
 800a310:	f7f6 f8e2 	bl	80004d8 <__aeabi_dmul>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a31c:	f7f5 ff24 	bl	8000168 <__aeabi_dsub>
 800a320:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a324:	4606      	mov	r6, r0
 800a326:	460f      	mov	r7, r1
 800a328:	4620      	mov	r0, r4
 800a32a:	4629      	mov	r1, r5
 800a32c:	f7f5 ff1c 	bl	8000168 <__aeabi_dsub>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4650      	mov	r0, sl
 800a336:	4659      	mov	r1, fp
 800a338:	f7f5 ff16 	bl	8000168 <__aeabi_dsub>
 800a33c:	4642      	mov	r2, r8
 800a33e:	464b      	mov	r3, r9
 800a340:	f7f6 f8ca 	bl	80004d8 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f5 ff0c 	bl	8000168 <__aeabi_dsub>
 800a350:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a354:	f7f6 f8c0 	bl	80004d8 <__aeabi_dmul>
 800a358:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a35c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a360:	4610      	mov	r0, r2
 800a362:	4619      	mov	r1, r3
 800a364:	f7f6 f8b8 	bl	80004d8 <__aeabi_dmul>
 800a368:	a37b      	add	r3, pc, #492	@ (adr r3, 800a558 <__ieee754_pow+0x718>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	4604      	mov	r4, r0
 800a370:	460d      	mov	r5, r1
 800a372:	f7f6 f8b1 	bl	80004d8 <__aeabi_dmul>
 800a376:	a37a      	add	r3, pc, #488	@ (adr r3, 800a560 <__ieee754_pow+0x720>)
 800a378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37c:	f7f5 fef6 	bl	800016c <__adddf3>
 800a380:	4622      	mov	r2, r4
 800a382:	462b      	mov	r3, r5
 800a384:	f7f6 f8a8 	bl	80004d8 <__aeabi_dmul>
 800a388:	a377      	add	r3, pc, #476	@ (adr r3, 800a568 <__ieee754_pow+0x728>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 feed 	bl	800016c <__adddf3>
 800a392:	4622      	mov	r2, r4
 800a394:	462b      	mov	r3, r5
 800a396:	f7f6 f89f 	bl	80004d8 <__aeabi_dmul>
 800a39a:	a375      	add	r3, pc, #468	@ (adr r3, 800a570 <__ieee754_pow+0x730>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f5 fee4 	bl	800016c <__adddf3>
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	f7f6 f896 	bl	80004d8 <__aeabi_dmul>
 800a3ac:	a372      	add	r3, pc, #456	@ (adr r3, 800a578 <__ieee754_pow+0x738>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f5 fedb 	bl	800016c <__adddf3>
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	f7f6 f88d 	bl	80004d8 <__aeabi_dmul>
 800a3be:	a370      	add	r3, pc, #448	@ (adr r3, 800a580 <__ieee754_pow+0x740>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	f7f5 fed2 	bl	800016c <__adddf3>
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	462b      	mov	r3, r5
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	f7f6 f880 	bl	80004d8 <__aeabi_dmul>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	460b      	mov	r3, r1
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 f87a 	bl	80004d8 <__aeabi_dmul>
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	460d      	mov	r5, r1
 800a3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a3ec:	4642      	mov	r2, r8
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	f7f5 febc 	bl	800016c <__adddf3>
 800a3f4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3f8:	f7f6 f86e 	bl	80004d8 <__aeabi_dmul>
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	462b      	mov	r3, r5
 800a400:	f7f5 feb4 	bl	800016c <__adddf3>
 800a404:	4642      	mov	r2, r8
 800a406:	4682      	mov	sl, r0
 800a408:	468b      	mov	fp, r1
 800a40a:	464b      	mov	r3, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	4649      	mov	r1, r9
 800a410:	f7f6 f862 	bl	80004d8 <__aeabi_dmul>
 800a414:	2200      	movs	r2, #0
 800a416:	4b68      	ldr	r3, [pc, #416]	@ (800a5b8 <__ieee754_pow+0x778>)
 800a418:	4606      	mov	r6, r0
 800a41a:	460f      	mov	r7, r1
 800a41c:	f7f5 fea6 	bl	800016c <__adddf3>
 800a420:	4652      	mov	r2, sl
 800a422:	465b      	mov	r3, fp
 800a424:	f7f5 fea2 	bl	800016c <__adddf3>
 800a428:	2400      	movs	r4, #0
 800a42a:	460d      	mov	r5, r1
 800a42c:	4622      	mov	r2, r4
 800a42e:	460b      	mov	r3, r1
 800a430:	4640      	mov	r0, r8
 800a432:	4649      	mov	r1, r9
 800a434:	f7f6 f850 	bl	80004d8 <__aeabi_dmul>
 800a438:	2200      	movs	r2, #0
 800a43a:	4680      	mov	r8, r0
 800a43c:	4689      	mov	r9, r1
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	4b5d      	ldr	r3, [pc, #372]	@ (800a5b8 <__ieee754_pow+0x778>)
 800a444:	f7f5 fe90 	bl	8000168 <__aeabi_dsub>
 800a448:	4632      	mov	r2, r6
 800a44a:	463b      	mov	r3, r7
 800a44c:	f7f5 fe8c 	bl	8000168 <__aeabi_dsub>
 800a450:	4602      	mov	r2, r0
 800a452:	460b      	mov	r3, r1
 800a454:	4650      	mov	r0, sl
 800a456:	4659      	mov	r1, fp
 800a458:	f7f5 fe86 	bl	8000168 <__aeabi_dsub>
 800a45c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a460:	f7f6 f83a 	bl	80004d8 <__aeabi_dmul>
 800a464:	4622      	mov	r2, r4
 800a466:	4606      	mov	r6, r0
 800a468:	460f      	mov	r7, r1
 800a46a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a46e:	462b      	mov	r3, r5
 800a470:	f7f6 f832 	bl	80004d8 <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	f7f5 fe76 	bl	800016c <__adddf3>
 800a480:	2400      	movs	r4, #0
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	f7f5 fe6d 	bl	800016c <__adddf3>
 800a492:	a33d      	add	r3, pc, #244	@ (adr r3, 800a588 <__ieee754_pow+0x748>)
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	4620      	mov	r0, r4
 800a49a:	460d      	mov	r5, r1
 800a49c:	f7f6 f81c 	bl	80004d8 <__aeabi_dmul>
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f5 fe5c 	bl	8000168 <__aeabi_dsub>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f7f5 fe56 	bl	8000168 <__aeabi_dsub>
 800a4bc:	a334      	add	r3, pc, #208	@ (adr r3, 800a590 <__ieee754_pow+0x750>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f6 f809 	bl	80004d8 <__aeabi_dmul>
 800a4c6:	a334      	add	r3, pc, #208	@ (adr r3, 800a598 <__ieee754_pow+0x758>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	f7f6 f800 	bl	80004d8 <__aeabi_dmul>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f5 fe44 	bl	800016c <__adddf3>
 800a4e4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a4e6:	4b35      	ldr	r3, [pc, #212]	@ (800a5bc <__ieee754_pow+0x77c>)
 800a4e8:	2400      	movs	r4, #0
 800a4ea:	4413      	add	r3, r2
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f5 fe3c 	bl	800016c <__adddf3>
 800a4f4:	4682      	mov	sl, r0
 800a4f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4f8:	468b      	mov	fp, r1
 800a4fa:	f7f5 ff83 	bl	8000404 <__aeabi_i2d>
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a504:	4b2e      	ldr	r3, [pc, #184]	@ (800a5c0 <__ieee754_pow+0x780>)
 800a506:	4413      	add	r3, r2
 800a508:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a50c:	4652      	mov	r2, sl
 800a50e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a512:	465b      	mov	r3, fp
 800a514:	f7f5 fe2a 	bl	800016c <__adddf3>
 800a518:	4642      	mov	r2, r8
 800a51a:	464b      	mov	r3, r9
 800a51c:	f7f5 fe26 	bl	800016c <__adddf3>
 800a520:	4632      	mov	r2, r6
 800a522:	463b      	mov	r3, r7
 800a524:	f7f5 fe22 	bl	800016c <__adddf3>
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	4620      	mov	r0, r4
 800a52e:	460d      	mov	r5, r1
 800a530:	f7f5 fe1a 	bl	8000168 <__aeabi_dsub>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	f7f5 fe16 	bl	8000168 <__aeabi_dsub>
 800a53c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a540:	f7f5 fe12 	bl	8000168 <__aeabi_dsub>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	e618      	b.n	800a180 <__ieee754_pow+0x340>
 800a54e:	2400      	movs	r4, #0
 800a550:	e68a      	b.n	800a268 <__ieee754_pow+0x428>
 800a552:	2601      	movs	r6, #1
 800a554:	e6a0      	b.n	800a298 <__ieee754_pow+0x458>
 800a556:	bf00      	nop
 800a558:	4a454eef 	.word	0x4a454eef
 800a55c:	3fca7e28 	.word	0x3fca7e28
 800a560:	93c9db65 	.word	0x93c9db65
 800a564:	3fcd864a 	.word	0x3fcd864a
 800a568:	a91d4101 	.word	0xa91d4101
 800a56c:	3fd17460 	.word	0x3fd17460
 800a570:	518f264d 	.word	0x518f264d
 800a574:	3fd55555 	.word	0x3fd55555
 800a578:	db6fabff 	.word	0xdb6fabff
 800a57c:	3fdb6db6 	.word	0x3fdb6db6
 800a580:	33333303 	.word	0x33333303
 800a584:	3fe33333 	.word	0x3fe33333
 800a588:	e0000000 	.word	0xe0000000
 800a58c:	3feec709 	.word	0x3feec709
 800a590:	dc3a03fd 	.word	0xdc3a03fd
 800a594:	3feec709 	.word	0x3feec709
 800a598:	145b01f5 	.word	0x145b01f5
 800a59c:	be3e2fe0 	.word	0xbe3e2fe0
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	43400000 	.word	0x43400000
 800a5a8:	0003988e 	.word	0x0003988e
 800a5ac:	000bb679 	.word	0x000bb679
 800a5b0:	0800ade0 	.word	0x0800ade0
 800a5b4:	3ff00000 	.word	0x3ff00000
 800a5b8:	40080000 	.word	0x40080000
 800a5bc:	0800adc0 	.word	0x0800adc0
 800a5c0:	0800add0 	.word	0x0800add0
 800a5c4:	a39a      	add	r3, pc, #616	@ (adr r3, 800a830 <__ieee754_pow+0x9f0>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	f7f5 fdcd 	bl	800016c <__adddf3>
 800a5d2:	4642      	mov	r2, r8
 800a5d4:	e9cd 0100 	strd	r0, r1, [sp]
 800a5d8:	464b      	mov	r3, r9
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	f7f5 fdc3 	bl	8000168 <__aeabi_dsub>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ea:	f7f6 fa05 	bl	80009f8 <__aeabi_dcmpgt>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f47f ae09 	bne.w	800a206 <__ieee754_pow+0x3c6>
 800a5f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a5f8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a5fc:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a600:	fa43 fa0a 	asr.w	sl, r3, sl
 800a604:	44da      	add	sl, fp
 800a606:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a60a:	489b      	ldr	r0, [pc, #620]	@ (800a878 <__ieee754_pow+0xa38>)
 800a60c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a610:	4108      	asrs	r0, r1
 800a612:	ea00 030a 	and.w	r3, r0, sl
 800a616:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a61a:	f1c1 0114 	rsb	r1, r1, #20
 800a61e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a622:	4640      	mov	r0, r8
 800a624:	fa4a fa01 	asr.w	sl, sl, r1
 800a628:	f1bb 0f00 	cmp.w	fp, #0
 800a62c:	4649      	mov	r1, r9
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	bfb8      	it	lt
 800a634:	f1ca 0a00 	rsblt	sl, sl, #0
 800a638:	f7f5 fd96 	bl	8000168 <__aeabi_dsub>
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	2400      	movs	r4, #0
 800a642:	4632      	mov	r2, r6
 800a644:	463b      	mov	r3, r7
 800a646:	4640      	mov	r0, r8
 800a648:	4649      	mov	r1, r9
 800a64a:	f7f5 fd8f 	bl	800016c <__adddf3>
 800a64e:	a37a      	add	r3, pc, #488	@ (adr r3, 800a838 <__ieee754_pow+0x9f8>)
 800a650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a654:	4620      	mov	r0, r4
 800a656:	460d      	mov	r5, r1
 800a658:	f7f5 ff3e 	bl	80004d8 <__aeabi_dmul>
 800a65c:	4642      	mov	r2, r8
 800a65e:	464b      	mov	r3, r9
 800a660:	e9cd 0100 	strd	r0, r1, [sp]
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f5 fd7e 	bl	8000168 <__aeabi_dsub>
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fd78 	bl	8000168 <__aeabi_dsub>
 800a678:	a371      	add	r3, pc, #452	@ (adr r3, 800a840 <__ieee754_pow+0xa00>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	f7f5 ff2b 	bl	80004d8 <__aeabi_dmul>
 800a682:	a371      	add	r3, pc, #452	@ (adr r3, 800a848 <__ieee754_pow+0xa08>)
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	4680      	mov	r8, r0
 800a68a:	4689      	mov	r9, r1
 800a68c:	4620      	mov	r0, r4
 800a68e:	4629      	mov	r1, r5
 800a690:	f7f5 ff22 	bl	80004d8 <__aeabi_dmul>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f5 fd66 	bl	800016c <__adddf3>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6ac:	f7f5 fd5e 	bl	800016c <__adddf3>
 800a6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	4689      	mov	r9, r1
 800a6b8:	f7f5 fd56 	bl	8000168 <__aeabi_dsub>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	f7f5 fd50 	bl	8000168 <__aeabi_dsub>
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	4640      	mov	r0, r8
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	f7f5 ff00 	bl	80004d8 <__aeabi_dmul>
 800a6d8:	a35d      	add	r3, pc, #372	@ (adr r3, 800a850 <__ieee754_pow+0xa10>)
 800a6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6de:	4604      	mov	r4, r0
 800a6e0:	460d      	mov	r5, r1
 800a6e2:	f7f5 fef9 	bl	80004d8 <__aeabi_dmul>
 800a6e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800a858 <__ieee754_pow+0xa18>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f7f5 fd3c 	bl	8000168 <__aeabi_dsub>
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	f7f5 fef0 	bl	80004d8 <__aeabi_dmul>
 800a6f8:	a359      	add	r3, pc, #356	@ (adr r3, 800a860 <__ieee754_pow+0xa20>)
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	f7f5 fd35 	bl	800016c <__adddf3>
 800a702:	4622      	mov	r2, r4
 800a704:	462b      	mov	r3, r5
 800a706:	f7f5 fee7 	bl	80004d8 <__aeabi_dmul>
 800a70a:	a357      	add	r3, pc, #348	@ (adr r3, 800a868 <__ieee754_pow+0xa28>)
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	f7f5 fd2a 	bl	8000168 <__aeabi_dsub>
 800a714:	4622      	mov	r2, r4
 800a716:	462b      	mov	r3, r5
 800a718:	f7f5 fede 	bl	80004d8 <__aeabi_dmul>
 800a71c:	a354      	add	r3, pc, #336	@ (adr r3, 800a870 <__ieee754_pow+0xa30>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fd23 	bl	800016c <__adddf3>
 800a726:	4622      	mov	r2, r4
 800a728:	462b      	mov	r3, r5
 800a72a:	f7f5 fed5 	bl	80004d8 <__aeabi_dmul>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4640      	mov	r0, r8
 800a734:	4649      	mov	r1, r9
 800a736:	f7f5 fd17 	bl	8000168 <__aeabi_dsub>
 800a73a:	4604      	mov	r4, r0
 800a73c:	460d      	mov	r5, r1
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4640      	mov	r0, r8
 800a744:	4649      	mov	r1, r9
 800a746:	f7f5 fec7 	bl	80004d8 <__aeabi_dmul>
 800a74a:	2200      	movs	r2, #0
 800a74c:	e9cd 0100 	strd	r0, r1, [sp]
 800a750:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fd06 	bl	8000168 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a764:	f7f5 ffe2 	bl	800072c <__aeabi_ddiv>
 800a768:	4632      	mov	r2, r6
 800a76a:	4604      	mov	r4, r0
 800a76c:	460d      	mov	r5, r1
 800a76e:	463b      	mov	r3, r7
 800a770:	4640      	mov	r0, r8
 800a772:	4649      	mov	r1, r9
 800a774:	f7f5 feb0 	bl	80004d8 <__aeabi_dmul>
 800a778:	4632      	mov	r2, r6
 800a77a:	463b      	mov	r3, r7
 800a77c:	f7f5 fcf6 	bl	800016c <__adddf3>
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	4620      	mov	r0, r4
 800a786:	4629      	mov	r1, r5
 800a788:	f7f5 fcee 	bl	8000168 <__aeabi_dsub>
 800a78c:	4642      	mov	r2, r8
 800a78e:	464b      	mov	r3, r9
 800a790:	f7f5 fcea 	bl	8000168 <__aeabi_dsub>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	2000      	movs	r0, #0
 800a79a:	4938      	ldr	r1, [pc, #224]	@ (800a87c <__ieee754_pow+0xa3c>)
 800a79c:	f7f5 fce4 	bl	8000168 <__aeabi_dsub>
 800a7a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a7a4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800a7a8:	da2e      	bge.n	800a808 <__ieee754_pow+0x9c8>
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	f000 f870 	bl	800a890 <scalbn>
 800a7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7b4:	f7ff bbed 	b.w	8009f92 <__ieee754_pow+0x152>
 800a7b8:	4c31      	ldr	r4, [pc, #196]	@ (800a880 <__ieee754_pow+0xa40>)
 800a7ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a7be:	42a3      	cmp	r3, r4
 800a7c0:	d91a      	bls.n	800a7f8 <__ieee754_pow+0x9b8>
 800a7c2:	4b30      	ldr	r3, [pc, #192]	@ (800a884 <__ieee754_pow+0xa44>)
 800a7c4:	440b      	add	r3, r1
 800a7c6:	4303      	orrs	r3, r0
 800a7c8:	d009      	beq.n	800a7de <__ieee754_pow+0x99e>
 800a7ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	f7f6 f8f3 	bl	80009bc <__aeabi_dcmplt>
 800a7d6:	3800      	subs	r0, #0
 800a7d8:	bf18      	it	ne
 800a7da:	2001      	movne	r0, #1
 800a7dc:	e444      	b.n	800a068 <__ieee754_pow+0x228>
 800a7de:	4642      	mov	r2, r8
 800a7e0:	464b      	mov	r3, r9
 800a7e2:	f7f5 fcc1 	bl	8000168 <__aeabi_dsub>
 800a7e6:	4632      	mov	r2, r6
 800a7e8:	463b      	mov	r3, r7
 800a7ea:	f7f6 f8fb 	bl	80009e4 <__aeabi_dcmpge>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d1eb      	bne.n	800a7ca <__ieee754_pow+0x98a>
 800a7f2:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800a888 <__ieee754_pow+0xa48>
 800a7f6:	e6fd      	b.n	800a5f4 <__ieee754_pow+0x7b4>
 800a7f8:	469a      	mov	sl, r3
 800a7fa:	4b24      	ldr	r3, [pc, #144]	@ (800a88c <__ieee754_pow+0xa4c>)
 800a7fc:	459a      	cmp	sl, r3
 800a7fe:	f63f aef9 	bhi.w	800a5f4 <__ieee754_pow+0x7b4>
 800a802:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a806:	e71b      	b.n	800a640 <__ieee754_pow+0x800>
 800a808:	4621      	mov	r1, r4
 800a80a:	e7d1      	b.n	800a7b0 <__ieee754_pow+0x970>
 800a80c:	2000      	movs	r0, #0
 800a80e:	491b      	ldr	r1, [pc, #108]	@ (800a87c <__ieee754_pow+0xa3c>)
 800a810:	f7ff bb34 	b.w	8009e7c <__ieee754_pow+0x3c>
 800a814:	2000      	movs	r0, #0
 800a816:	2100      	movs	r1, #0
 800a818:	f7ff bb30 	b.w	8009e7c <__ieee754_pow+0x3c>
 800a81c:	4650      	mov	r0, sl
 800a81e:	4659      	mov	r1, fp
 800a820:	f7ff bb2c 	b.w	8009e7c <__ieee754_pow+0x3c>
 800a824:	460c      	mov	r4, r1
 800a826:	f7ff bb79 	b.w	8009f1c <__ieee754_pow+0xdc>
 800a82a:	2400      	movs	r4, #0
 800a82c:	f7ff bb64 	b.w	8009ef8 <__ieee754_pow+0xb8>
 800a830:	652b82fe 	.word	0x652b82fe
 800a834:	3c971547 	.word	0x3c971547
 800a838:	00000000 	.word	0x00000000
 800a83c:	3fe62e43 	.word	0x3fe62e43
 800a840:	fefa39ef 	.word	0xfefa39ef
 800a844:	3fe62e42 	.word	0x3fe62e42
 800a848:	0ca86c39 	.word	0x0ca86c39
 800a84c:	be205c61 	.word	0xbe205c61
 800a850:	72bea4d0 	.word	0x72bea4d0
 800a854:	3e663769 	.word	0x3e663769
 800a858:	c5d26bf1 	.word	0xc5d26bf1
 800a85c:	3ebbbd41 	.word	0x3ebbbd41
 800a860:	af25de2c 	.word	0xaf25de2c
 800a864:	3f11566a 	.word	0x3f11566a
 800a868:	16bebd93 	.word	0x16bebd93
 800a86c:	3f66c16c 	.word	0x3f66c16c
 800a870:	5555553e 	.word	0x5555553e
 800a874:	3fc55555 	.word	0x3fc55555
 800a878:	fff00000 	.word	0xfff00000
 800a87c:	3ff00000 	.word	0x3ff00000
 800a880:	4090cbff 	.word	0x4090cbff
 800a884:	3f6f3400 	.word	0x3f6f3400
 800a888:	4090cc00 	.word	0x4090cc00
 800a88c:	3fe00000 	.word	0x3fe00000

0800a890 <scalbn>:
 800a890:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800a894:	4616      	mov	r6, r2
 800a896:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a89a:	4683      	mov	fp, r0
 800a89c:	468c      	mov	ip, r1
 800a89e:	460b      	mov	r3, r1
 800a8a0:	b982      	cbnz	r2, 800a8c4 <scalbn+0x34>
 800a8a2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a8a6:	4303      	orrs	r3, r0
 800a8a8:	d039      	beq.n	800a91e <scalbn+0x8e>
 800a8aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a968 <scalbn+0xd8>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f7f5 fe13 	bl	80004d8 <__aeabi_dmul>
 800a8b2:	4b2e      	ldr	r3, [pc, #184]	@ (800a96c <scalbn+0xdc>)
 800a8b4:	4683      	mov	fp, r0
 800a8b6:	429e      	cmp	r6, r3
 800a8b8:	468c      	mov	ip, r1
 800a8ba:	da0d      	bge.n	800a8d8 <scalbn+0x48>
 800a8bc:	a326      	add	r3, pc, #152	@ (adr r3, 800a958 <scalbn+0xc8>)
 800a8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c2:	e01b      	b.n	800a8fc <scalbn+0x6c>
 800a8c4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800a8c8:	42ba      	cmp	r2, r7
 800a8ca:	d109      	bne.n	800a8e0 <scalbn+0x50>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	f7f5 fc4d 	bl	800016c <__adddf3>
 800a8d2:	4683      	mov	fp, r0
 800a8d4:	468c      	mov	ip, r1
 800a8d6:	e022      	b.n	800a91e <scalbn+0x8e>
 800a8d8:	460b      	mov	r3, r1
 800a8da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a8de:	3a36      	subs	r2, #54	@ 0x36
 800a8e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a8e4:	428e      	cmp	r6, r1
 800a8e6:	dd0c      	ble.n	800a902 <scalbn+0x72>
 800a8e8:	a31d      	add	r3, pc, #116	@ (adr r3, 800a960 <scalbn+0xd0>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	461c      	mov	r4, r3
 800a8f0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800a8f4:	f361 74df 	bfi	r4, r1, #31, #1
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	481d      	ldr	r0, [pc, #116]	@ (800a970 <scalbn+0xe0>)
 800a8fc:	f7f5 fdec 	bl	80004d8 <__aeabi_dmul>
 800a900:	e7e7      	b.n	800a8d2 <scalbn+0x42>
 800a902:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a906:	4432      	add	r2, r6
 800a908:	428a      	cmp	r2, r1
 800a90a:	dced      	bgt.n	800a8e8 <scalbn+0x58>
 800a90c:	2a00      	cmp	r2, #0
 800a90e:	dd0a      	ble.n	800a926 <scalbn+0x96>
 800a910:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a914:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a918:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a91c:	46ac      	mov	ip, r5
 800a91e:	4658      	mov	r0, fp
 800a920:	4661      	mov	r1, ip
 800a922:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800a926:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a92a:	da09      	bge.n	800a940 <scalbn+0xb0>
 800a92c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800a930:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800a934:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800a938:	480e      	ldr	r0, [pc, #56]	@ (800a974 <scalbn+0xe4>)
 800a93a:	f041 011f 	orr.w	r1, r1, #31
 800a93e:	e7bd      	b.n	800a8bc <scalbn+0x2c>
 800a940:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a944:	3236      	adds	r2, #54	@ 0x36
 800a946:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a94a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a94e:	4658      	mov	r0, fp
 800a950:	4629      	mov	r1, r5
 800a952:	2200      	movs	r2, #0
 800a954:	4b08      	ldr	r3, [pc, #32]	@ (800a978 <scalbn+0xe8>)
 800a956:	e7d1      	b.n	800a8fc <scalbn+0x6c>
 800a958:	c2f8f359 	.word	0xc2f8f359
 800a95c:	01a56e1f 	.word	0x01a56e1f
 800a960:	8800759c 	.word	0x8800759c
 800a964:	7e37e43c 	.word	0x7e37e43c
 800a968:	43500000 	.word	0x43500000
 800a96c:	ffff3cb0 	.word	0xffff3cb0
 800a970:	8800759c 	.word	0x8800759c
 800a974:	c2f8f359 	.word	0xc2f8f359
 800a978:	3c900000 	.word	0x3c900000

0800a97c <with_errno>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	4616      	mov	r6, r2
 800a984:	f7fd f888 	bl	8007a98 <__errno>
 800a988:	4629      	mov	r1, r5
 800a98a:	6006      	str	r6, [r0, #0]
 800a98c:	4620      	mov	r0, r4
 800a98e:	bd70      	pop	{r4, r5, r6, pc}

0800a990 <xflow>:
 800a990:	b513      	push	{r0, r1, r4, lr}
 800a992:	4604      	mov	r4, r0
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	b10c      	cbz	r4, 800a99e <xflow+0xe>
 800a99a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a99e:	e9cd 2300 	strd	r2, r3, [sp]
 800a9a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9a6:	f7f5 fd97 	bl	80004d8 <__aeabi_dmul>
 800a9aa:	2222      	movs	r2, #34	@ 0x22
 800a9ac:	b002      	add	sp, #8
 800a9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b2:	f7ff bfe3 	b.w	800a97c <with_errno>

0800a9b6 <__math_uflow>:
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a9bc:	f7ff bfe8 	b.w	800a990 <xflow>

0800a9c0 <__math_oflow>:
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800a9c6:	f7ff bfe3 	b.w	800a990 <xflow>
	...

0800a9cc <_init>:
 800a9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ce:	bf00      	nop
 800a9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d2:	bc08      	pop	{r3}
 800a9d4:	469e      	mov	lr, r3
 800a9d6:	4770      	bx	lr

0800a9d8 <_fini>:
 800a9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9da:	bf00      	nop
 800a9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9de:	bc08      	pop	{r3}
 800a9e0:	469e      	mov	lr, r3
 800a9e2:	4770      	bx	lr
